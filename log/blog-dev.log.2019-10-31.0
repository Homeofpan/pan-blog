2019-10-31 00:00:49.794  INFO 20120 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 20120 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 00:00:49.837 DEBUG 20120 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 00:00:49.837  INFO 20120 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 00:00:50.087  INFO 20120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 00:00:50.091  INFO 20120 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 00:00:50.839  INFO 20120 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 00:00:50.882  INFO 20120 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 27ms. Found 0 repository interfaces.
2019-10-31 00:00:51.238  INFO 20120 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b3195732] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 00:00:51.702  INFO 20120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 00:00:51.788  INFO 20120 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 00:00:51.788  INFO 20120 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 00:00:51.896  INFO 20120 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 00:00:51.900  INFO 20120 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1809 ms
2019-10-31 00:00:52.059  INFO 20120 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 00:00:52.309  INFO 20120 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 00:00:53.543  INFO 20120 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 00:00:53.653  INFO 20120 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 00:00:54.451  INFO 20120 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 00:00:54.513  INFO 20120 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 00:00:54.517  INFO 20120 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.422 seconds (JVM running for 6.542)
2019-10-31 00:01:08.068  INFO 20120 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 00:01:08.069  INFO 20120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 00:01:08.087  INFO 20120 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2019-10-31 00:01:08.121  INFO 20120 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:01:08.337 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.362 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.387 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.393 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.393 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.394 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.396 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.396 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.397 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.399 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.400 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.401 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.403 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.403 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.404 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.406 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.406 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:01:08.407 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.409 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.409 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.410 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.412 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.412 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:01:08.414 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.415 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.416 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.417 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.419 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.419 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:01:08.420 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.421 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.422 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.422 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.424 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.424 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:01:08.425 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.426 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:08.427 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.428 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.429 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:08.429 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:08.431 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:08.466 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:01:08.466 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:01:08.467 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:01:08.470 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:01:08.470 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:01:08.473 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:01:08.477 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:01:08.478 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:01:08.479 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:01:08.480 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:01:08.480 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:01:08.481 DEBUG 20120 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:01:08.488 DEBUG 20120 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:01:08.489 DEBUG 20120 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:01:08.490 DEBUG 20120 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:01:08.490 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:01:08.491 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:01:08.492 DEBUG 20120 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:01:08.493  INFO 20120 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:01:08.493  INFO 20120 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 375
2019-10-31 00:01:39.830  INFO 20120 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[23, {}]}
2019-10-31 00:01:39.831 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:01:39.831 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:01:39.834 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:39.881 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:01:39.881 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:39.882 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:39.883 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:01:39.884 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:01:39.884 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:01:39.886 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:01:39.886 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 10(Integer)
2019-10-31 00:01:39.887 DEBUG 20120 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:01:39.888  INFO 20120 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:01:39.888  INFO 20120 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 58
2019-10-31 00:02:57.517  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[23, {}]}
2019-10-31 00:02:57.523 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:02:57.523 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:02:57.525 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:02:57.534 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:02:57.535 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:02:57.536 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:02:57.538 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:02:57.538 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:02:57.539 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:02:57.541 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:02:57.541 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 10(Integer)
2019-10-31 00:02:57.542 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:02:57.542  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:02:57.543  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 26
2019-10-31 00:03:17.829  INFO 20120 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[23, {}]}
2019-10-31 00:03:17.830 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:03:17.830 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:03:17.832 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:03:17.839 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:03:17.839 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:03:17.841 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:03:17.843 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:03:17.844 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:03:17.845 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:03:17.846 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:03:17.846 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 10(Integer)
2019-10-31 00:03:17.847 DEBUG 20120 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:03:17.848  INFO 20120 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:03:17.848  INFO 20120 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 19
2019-10-31 00:04:43.849  INFO 20120 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[23, {}]}
2019-10-31 00:04:43.856 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:04:43.856 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:04:43.858 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:04:43.864 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:04:43.865 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:04:43.866 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:04:43.868 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:04:43.868 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:04:43.869 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:04:43.870 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:04:43.871 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 10(Integer)
2019-10-31 00:04:43.877 DEBUG 20120 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:04:43.878  INFO 20120 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:04:43.878  INFO 20120 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 29
2019-10-31 00:11:33.258  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:11:33.276 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.276 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.277 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.279 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.279 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.280 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.282 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.282 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.283 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.285 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.285 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.287 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.289 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.290 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.291 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.293 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.294 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:33.295 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.296 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.297 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.298 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.300 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.300 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:33.301 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.303 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.303 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.306 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.309 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.309 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:11:33.310 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.315 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.316 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.317 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.326 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.327 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:33.327 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.330 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:33.330 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.331 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.332 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:33.333 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:33.333 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:33.335 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:11:33.335 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:11:33.336 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:11:33.337 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:11:33.337 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:11:33.338 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:11:33.340 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:11:33.340 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:11:33.341 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:11:33.342 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:11:33.342 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:11:33.343 DEBUG 20120 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:11:33.344 DEBUG 20120 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:11:33.344 DEBUG 20120 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:11:33.345 DEBUG 20120 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:11:33.345 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:11:33.345 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:11:33.346 DEBUG 20120 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:11:33.347  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:11:33.347  INFO 20120 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 89
2019-10-31 00:11:40.103  INFO 20120 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:11:40.113 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.114 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.127 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.129 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.130 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.131 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.132 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.133 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.134 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.135 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.136 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.136 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.138 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.139 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.140 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.141 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.142 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:40.142 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.144 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.144 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.145 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.147 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.147 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:40.148 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.150 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.150 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.151 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.153 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.153 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:11:40.154 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.156 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.156 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.157 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.159 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.159 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:11:40.160 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.162 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:11:40.162 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.163 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.165 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:11:40.165 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:11:40.166 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:11:40.167 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:11:40.167 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:11:40.168 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:11:40.168 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:11:40.169 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:11:40.170 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:11:40.170 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:11:40.171 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:11:40.171 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:11:40.172 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:11:40.172 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:11:40.174 DEBUG 20120 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:11:40.175 DEBUG 20120 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:11:40.175 DEBUG 20120 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:11:40.177 DEBUG 20120 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:11:40.177 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:11:40.177 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:11:40.179 DEBUG 20120 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:11:40.180  INFO 20120 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:11:40.180  INFO 20120 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 77
2019-10-31 00:14:01.715  INFO 20120 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:14:01.733 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.733 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.736 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.738 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.738 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.739 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.741 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.741 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.742 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.743 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.743 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.744 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.746 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.746 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.747 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.749 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.749 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:14:01.750 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.751 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.751 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.752 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.754 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.754 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:14:01.755 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.757 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.757 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.758 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.760 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.760 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:14:01.761 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.762 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.763 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.763 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.767 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.767 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:14:01.768 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.770 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:14:01.770 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.771 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.781 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:14:01.781 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:14:01.782 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:14:01.783 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:14:01.783 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:14:01.783 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:14:01.784 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:14:01.784 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:14:01.785 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:14:01.786 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:14:01.786 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:14:01.786 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:14:01.787 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:14:01.788 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:14:01.789 DEBUG 20120 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:14:01.790 DEBUG 20120 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:14:01.790 DEBUG 20120 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:14:01.791 DEBUG 20120 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:14:01.791 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:14:01.791 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:14:01.792 DEBUG 20120 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:14:01.793  INFO 20120 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:14:01.793  INFO 20120 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 78
2019-10-31 00:16:00.174  INFO 33488 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 33488 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 00:16:00.174 DEBUG 33488 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 00:16:00.174  INFO 33488 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 00:16:01.187  INFO 33488 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 00:16:01.241  INFO 33488 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 36ms. Found 0 repository interfaces.
2019-10-31 00:16:01.788  INFO 33488 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ac9d9cf4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 00:16:02.230  INFO 33488 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 00:16:02.593  INFO 33488 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 00:16:05.491  INFO 33488 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 00:16:05.626  INFO 33488 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 00:16:06.363  INFO 33488 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 7.215 seconds (JVM running for 8.506)
2019-10-31 00:16:06.769 DEBUG 33488 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:16:06.800 DEBUG 33488 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:16:06.831 DEBUG 33488 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:16:07.003  INFO 33488 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 00:16:07.003  INFO 33488 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 00:16:07.019  INFO 33488 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 00:17:31.720  INFO 23492 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 23492 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 00:17:31.720 DEBUG 23492 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 00:17:31.724  INFO 23492 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 00:17:32.623  INFO 23492 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 00:17:32.670  INFO 23492 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 0 repository interfaces.
2019-10-31 00:17:33.269  INFO 23492 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6fd8ccf1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 00:17:33.640  INFO 23492 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 00:17:34.019  INFO 23492 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 00:17:36.710  INFO 23492 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 00:17:36.909  INFO 23492 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 00:17:37.712  INFO 23492 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 7.053 seconds (JVM running for 8.2)
2019-10-31 00:17:38.149 DEBUG 23492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:17:38.184 DEBUG 23492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:17:38.225 DEBUG 23492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:17:38.381  INFO 23492 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 00:17:38.381  INFO 23492 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 00:17:38.389  INFO 23492 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 00:17:54.231  INFO 8732 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 8732 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 00:17:54.235 DEBUG 8732 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 00:17:54.236  INFO 8732 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 00:17:54.313  INFO 8732 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 00:17:54.313  INFO 8732 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 00:17:55.160  INFO 8732 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 00:17:55.199  INFO 8732 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2019-10-31 00:17:55.562  INFO 8732 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$af1027aa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 00:17:56.049  INFO 8732 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 00:17:56.127  INFO 8732 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 00:17:56.127  INFO 8732 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 00:17:56.245  INFO 8732 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 00:17:56.245  INFO 8732 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1932 ms
2019-10-31 00:17:56.398  INFO 8732 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 00:17:56.651  INFO 8732 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 00:17:57.978  INFO 8732 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 00:17:58.075  INFO 8732 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 00:17:58.877  INFO 8732 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 00:17:58.936  INFO 8732 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 00:17:58.940  INFO 8732 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.469 seconds (JVM running for 6.587)
2019-10-31 00:18:13.951  INFO 8732 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 00:18:13.951  INFO 8732 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 00:18:13.968  INFO 8732 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-10-31 00:18:14.004  INFO 8732 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:18:14.201 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.227 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.251 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.258 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.258 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.259 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.261 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.261 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.263 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.265 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.265 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:18:14.266 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.268 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.268 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.270 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.273 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.274 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:18:14.275 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.276 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.276 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.278 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.279 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.279 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:18:14.281 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.283 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.283 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.284 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.286 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.286 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:18:14.287 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.289 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.289 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.290 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.292 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.292 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.293 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.295 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:14.295 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.297 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.299 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:14.300 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:14.301 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:14.335 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:18:14.335 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:18:14.336 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:18:14.339 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:18:14.340 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:18:14.342 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:18:14.347 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:18:14.348 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:18:14.349 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:18:14.350 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:18:14.350 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:18:14.351 DEBUG 8732 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:18:14.359 DEBUG 8732 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:18:14.359 DEBUG 8732 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:18:14.361 DEBUG 8732 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:18:14.361 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:18:14.362 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:18:14.363 DEBUG 8732 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:18:14.364  INFO 8732 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:18:14.364  INFO 8732 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 362
2019-10-31 00:18:20.833  INFO 8732 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/23', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[23, {}]}
2019-10-31 00:18:20.835 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:18:20.835 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 23(Integer)
2019-10-31 00:18:20.838 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:20.885 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:18:20.886 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:20.887 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:20.888 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:18:20.889 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:18:20.890 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:18:20.891 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:18:20.892 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 10(Integer)
2019-10-31 00:18:20.892 DEBUG 8732 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:18:20.893  INFO 8732 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:18:20.893  INFO 8732 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 60
2019-10-31 00:19:21.526  INFO 8732 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 00:19:21.549 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.549 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.550 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.552 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.552 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.554 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.556 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.556 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.557 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.559 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.559 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:19:21.562 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.564 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.564 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.565 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.568 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.568 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:19:21.569 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.571 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.571 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.572 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.574 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.574 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 00:19:21.575 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.578 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.578 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.580 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.593 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.593 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 00:19:21.594 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.596 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.596 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.603 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.604 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.604 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.605 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.607 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:21.607 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.608 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.609 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:21.609 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:21.610 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:21.611 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 00:19:21.611 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:19:21.612 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:19:21.613 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 00:19:21.613 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:19:21.614 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 00:19:21.615 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 00:19:21.615 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 00:19:21.616 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 00:19:21.616 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 00:19:21.617 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 00:19:21.618 DEBUG 8732 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 00:19:21.618 DEBUG 8732 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 00:19:21.619 DEBUG 8732 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 00:19:21.619 DEBUG 8732 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 00:19:21.620 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 00:19:21.620 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 00:19:21.621 DEBUG 8732 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 00:19:21.624  INFO 8732 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 00:19:21.624  INFO 8732 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 98
2019-10-31 00:19:24.163  INFO 8732 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/22', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[22, {}]}
2019-10-31 00:19:24.164 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:19:24.165 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 22(Integer)
2019-10-31 00:19:24.166 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:24.169 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:24.170 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:24.170 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:24.172 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:24.172 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:24.176 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:24.178 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:19:24.178 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 9(Integer)
2019-10-31 00:19:24.179 DEBUG 8732 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:19:24.179  INFO 8732 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:19:24.179  INFO 8732 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 16
2019-10-31 00:19:45.394  INFO 8732 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/22', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[22, {}]}
2019-10-31 00:19:45.395 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 00:19:45.395 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 22(Integer)
2019-10-31 00:19:45.397 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:45.400 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 00:19:45.400 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:45.401 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:45.403 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 00:19:45.403 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 00:19:45.404 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 00:19:45.405 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 00:19:45.406 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 9(Integer)
2019-10-31 00:19:45.407 DEBUG 8732 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 00:19:45.408  INFO 8732 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 00:19:45.408  INFO 8732 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 14
2019-10-31 10:58:33.760  INFO 36220 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 36220 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 10:58:33.796 DEBUG 36220 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 10:58:33.796  INFO 36220 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 10:58:34.168  INFO 36220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 10:58:34.169  INFO 36220 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 10:58:41.379  INFO 36220 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 10:58:41.587  INFO 36220 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 100ms. Found 0 repository interfaces.
2019-10-31 10:58:42.829  INFO 36220 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$70c6c2b3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 10:58:45.232  INFO 36220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 10:58:45.318  INFO 36220 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 10:58:45.318  INFO 36220 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 10:58:45.774  INFO 36220 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 10:58:45.774  INFO 36220 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 11605 ms
2019-10-31 10:58:46.418  INFO 36220 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 10:58:47.276  INFO 36220 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 10:58:50.180  INFO 36220 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 10:58:50.357  INFO 36220 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 10:58:51.649  INFO 36220 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 10:58:51.731  INFO 36220 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 10:58:51.753  INFO 36220 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 20.867 seconds (JVM running for 23.753)
2019-10-31 10:59:23.799  INFO 36220 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 10:59:23.799  INFO 36220 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 10:59:23.813  INFO 36220 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2019-10-31 10:59:23.909  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 10:59:24.490 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.558 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.587 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.595 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.595 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.596 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.599 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.599 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.601 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.602 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.602 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:24.604 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.606 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.606 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.608 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.611 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.611 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:24.612 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.614 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.615 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.616 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.617 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.619 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 10:59:24.621 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.622 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.623 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.624 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.626 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.627 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:24.628 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.629 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.630 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.631 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.633 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.633 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.634 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.637 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:24.637 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.639 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.640 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:24.641 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:24.641 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:24.725 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 10:59:24.725 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 10:59:24.728 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 10:59:24.734 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 10:59:24.735 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 10:59:24.739 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 10:59:24.752 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 10:59:24.752 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 10:59:24.756 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 10:59:24.760 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 10:59:24.761 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 10:59:24.766 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 10:59:24.811 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 10:59:24.811 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 10:59:24.813 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 10:59:24.813 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 10:59:24.814 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 10:59:24.816 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 10:59:24.817  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 10:59:24.817  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 909
2019-10-31 10:59:33.767  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/18', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[18, {}]}
2019-10-31 10:59:33.769 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 10:59:33.769 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 18(Integer)
2019-10-31 10:59:33.773 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:33.827 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:33.827 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:33.829 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:33.830 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:33.831 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:33.832 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:33.835 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 10:59:33.835 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 7(Integer)
2019-10-31 10:59:33.836 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 10:59:33.836  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 10:59:33.836  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 69
2019-10-31 10:59:55.311  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 10:59:55.328 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.328 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.330 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.333 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.333 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.334 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.336 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.336 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.337 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.339 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.340 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:55.342 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.344 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.344 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.345 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.347 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.348 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:55.349 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.350 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.351 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.352 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.353 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.354 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 10:59:55.355 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.356 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.357 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.358 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.359 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.360 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 10:59:55.360 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.362 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.362 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.364 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.372 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.372 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.373 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.375 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 10:59:55.375 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.377 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.378 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 10:59:55.378 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 10:59:55.379 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 10:59:55.380 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 10:59:55.380 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 10:59:55.381 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 10:59:55.382 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 10:59:55.382 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 10:59:55.384 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 10:59:55.384 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 10:59:55.384 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 10:59:55.385 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 10:59:55.386 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 10:59:55.386 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 10:59:55.387 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 5
2019-10-31 10:59:55.388 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 10:59:55.388 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 10:59:55.389 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 10:59:55.389 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 10:59:55.389 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 10:59:55.391 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 5
2019-10-31 10:59:55.392  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 10:59:55.392  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 81
2019-10-31 10:59:57.140  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 10:59:57.147  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 10:59:57.148  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 11:00:03.747  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@59cec966]}
2019-10-31 11:00:03.762 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 11:00:03.763 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 11:00:03.766 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 11:00:03.768  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 11:00:03.768  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 21
2019-10-31 11:00:03.807  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index;jsessionid=ED93CABF75476985B43834D195070CAC', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 11:00:03.811  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 11:00:03.811  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 4
2019-10-31 11:00:39.895  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 11:00:39.901 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 11:00:39.901 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 11:00:39.903 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 11:00:39.905 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 11:00:39.905 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:00:39.910 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 7
2019-10-31 11:00:39.920 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.920 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:00:39.921 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.923 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.923 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:00:39.924 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.926 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.927 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:00:39.928 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.930 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.930 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:00:39.931 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.933 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.933 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:00:39.934 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.936 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.936 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:00:39.945 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.947 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:00:39.947 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:00:39.948 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:00:39.954 DEBUG 36220 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 11:00:39.954 DEBUG 36220 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 11:00:39.955 DEBUG 36220 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 11:00:39.957  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 11:00:39.957  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 62
2019-10-31 11:00:44.958  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.tags', args=[null, {}]}
2019-10-31 11:00:44.965 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectByExample_COUNT  : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:00:44.965 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectByExample_COUNT  : ==> Parameters: 
2019-10-31 11:00:44.966 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.dao.TagMapper.selectByExample_COUNT  : <==      Total: 1
2019-10-31 11:00:44.968 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag limit ?,? 
2019-10-31 11:00:44.968 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:00:44.969 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : <==      Total: 5
2019-10-31 11:00:44.971  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/tags
2019-10-31 11:00:44.971  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 13
2019-10-31 11:00:46.701  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.toInputPage', args=[{}]}
2019-10-31 11:00:46.702  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/tags-input
2019-10-31 11:00:46.702  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 1
2019-10-31 11:00:50.652  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.addTag', args=[Tag{id=null, name='mybatis', blogs=null}, {}]}
2019-10-31 11:00:50.654 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag WHERE ( name = ? ) 
2019-10-31 11:00:50.654 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: mybatis(String)
2019-10-31 11:00:50.654 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : <==      Total: 0
2019-10-31 11:00:50.659 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.insertSelective    : ==>  Preparing: insert into tag ( name ) values ( ? ) 
2019-10-31 11:00:50.659 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.insertSelective    : ==> Parameters: mybatis(String)
2019-10-31 11:00:50.662 DEBUG 36220 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.insertSelective    : <==    Updates: 1
2019-10-31 11:00:50.667  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : redirect:/admin/tags
2019-10-31 11:00:50.667  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 11:00:50.696  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.tags', args=[null, {message=新增成功}]}
2019-10-31 11:00:50.697 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectByExample_COUNT  : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:00:50.697 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectByExample_COUNT  : ==> Parameters: 
2019-10-31 11:00:50.698 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.dao.TagMapper.selectByExample_COUNT  : <==      Total: 1
2019-10-31 11:00:50.699 DEBUG 36220 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag limit ?,? 
2019-10-31 11:00:50.699 DEBUG 36220 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:00:50.699 DEBUG 36220 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 11:00:50.703  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/tags
2019-10-31 11:00:50.703  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 7
2019-10-31 11:02:41.137  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 11:02:41.145 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 11:02:41.146 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 11:02:41.147 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 11:02:41.148 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 11:02:41.148 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:02:41.152 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 7
2019-10-31 11:02:41.154 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.154 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:02:41.155 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.157 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.157 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:02:41.158 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.161 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.161 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:02:41.162 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.164 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.164 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:02:41.166 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.168 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.168 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:02:41.169 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.171 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.171 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:02:41.172 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.173 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:02:41.174 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:02:41.175 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:02:41.177 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 11:02:41.177 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 11:02:41.178 DEBUG 36220 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 11:02:41.179  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 11:02:41.179  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 42
2019-10-31 11:02:44.174  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 11:02:44.175 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 11:02:44.176 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 11:02:44.177 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 11:02:44.180 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 11:02:44.180 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 11:02:44.181 DEBUG 36220 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 11:02:44.182  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 11:02:44.182  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 11:11:07.371  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis重点复习', description='mybatis的一些重点复习', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=1, createTime=null, updateTime=null, content='## Mybatis用到的动态代理设计模式:

### 作用:用于增强目标对象的目标方法

1.静态代理模式:在程序没有运行时,已经提前增强了.例如:你一直都有请一个律师顾问,平时一直都为你工作,不仅仅是只替你有官司的时候再来工作

2.动态代理(jdk(有接口使用)和cglib(无接口使用,不建议使用,会污染代码))

:在程序没有运行之前,是不会对你的目标方法进行增强,当你需要增强目标方法的时候,才会帮你增强;例如:平时你没有官司打,某一天,很不幸被人xxx,要打官司了,这个时候你去请你律师帮你打.        



### 一.Mybatis的动态代理:

注意点

1.mapper映射文件中的namespace一定为:dao层接口的全限定类名

2.mapper中的对应sql语句的id一定要与接口的方法名字一致,否则会报一下错误:
```java
    org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): 
```
### 二.传入动态代理的参数为map时:

由于无法将传过来的数据包装成一个对象,有String,Integer,Student这三个参数.当用于多条件查询的时候,就可以使用map参数的传递:

dao:
```java
    public interface IStudentDao {
    	List<Student> selectStudentByCondition(Map<String,Object> map);
    }
```


mapper:

接收的参数格式为:#{map按顺序放进去的key的值}
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<select id="selectStudentByCondition" resultType="Student">
    		select id,name,age,score from student1
    		 where name like '%' #{nameCon} '%' 
    		 and age > #{ageCon}
    		 and score > #{stu.score}
    		<!-- select id,name,age,score from student1 where name like '%${value}%' -->
    	</select>
    </mapper>
```


test:
```java
    	@Test
    	public void test1() {
    		Student stu = new Student("田七",27,90);
    		Map<String, Object> map = new HashMap<String,Object>();
    		map.put("nameCon","张");
    		map.put("ageCon", 23);
    		map.put("stu",stu);
    		List<Student> students = dao.selectStudentByCondition(map);
    		for (Student student : students) {
    			System.out.println(student);
    		}
    	}
```


### 第二种动态代理获取参数的方法:

mapper2:

接收格式:#{arg+map中索引的值}
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<select id="selectStudentByCondition" resultType="Student">
    		select id,name,age,score from student1
    		 where name like '%' #{arg0} '%' 
    		 and age > #{arg1}
    		<!-- select id,name,age,score from student1 where name like '%${value}%' -->
    	</select>
    </mapper>
```
总结:

### Mapper映射文件中的sql语句的#{}可以放的内容:

1. 参数对象的属性
2. 随意内容,作为占位符
3. 参数为map时的key
4. 参数为map时,若key的value为对象,则可将该对象的属性放入
5. 参数的索引号



### 三.多表关联查询对返回对象的封装:

第一种:

pojo:
```java
    public class Country {
    	private Integer cid;
    	private String cname;
    	//关联属性
    	private Set<Minister> ministers;
    	
    	public Integer getCid() {
    		return cid;
    	}
    }
```

```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister">
    			<id column="mid" property="mid"/>
    			<result column="mname" property="mname"/>
    		</collection>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname,mid,mname 
    			from country,minister 
    			where countryid=cid and cid=#{xxx}
    	</select>
    </mapper>
```




### 第二种:(使用递归查询的方式)
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<select id="selectMinisterByCountry" resultType="Minister">
    		select mid,mname from minister where countryid =#{ooo}
    	</select>
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
             <!--column:里面的参数是传入给select语句所使用的参数-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname from country where cid=#{xx}
    	</select>
    </mapper>
```




### 四:延时加载:

MyBatis中的延时加载，也称为懒加载，是指在进行关联查询时（也就是上面的多表查询），按照设置延时规则推迟对关联对象的select查询。延时加载可以有效的较少数据库压力。

需要置疑的是，MyBatis的延迟加载只是对关联对象的查询有延迟设置，对于主加载的对象都是直接执行查询语句的。下面是关联查询的mapper语句（其实就在上面）
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister">
    			<id column="mid" property="mid"/>
    			<result column="mname" property="mname"/>
    		</collection>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname,mid,mname 
    			from country,minister 
    			where countryid=cid and cid=#{xxx}
    	</select>
    </mapper>
```


### 4.2关联对象的加载时机:

mybatis的延时加载分三种类型：直接加载，侵入式延迟加载，深度延迟加载

- 直接加载 执行完对主加载对象的select语句，马上执行对关联对象的select查询
- 侵入式延迟 执行对主加载对象的查询时，不会执行对关联对象的查询。担当要访问主加载对象的详情时，就会马上执行关联对象的select查询。即对关联对象的查询执行，侵入到了主加载对象的详情访问中。
- 深度延迟 执行对主加载对象的查询时，不会执行对关联对象的查询。访问主加载对象的详情时也不会执行关联对象的select查询。只有当真正的访问关联对象的时候，才会执行对关联对象的select查询



开启延时加载的配置:
```xml
     	<settings>
     		<!--延迟加载的总开关  -->
     		<setting name="lazyLoadingEnabled" value="true"/>
     		<!--侵入式加载的总开关,默认为false,意味着是深度延迟,前提是延时加载开启了-->
     		<setting name="aggressiveLazyLoading" value="true"/>
     	</settings>
```






### 五.查询缓存:

myabtis的查询缓存机制，根据缓存区的作用域与生命周期，可划分为两种：一级缓存、二级缓存
mybatis查询缓存的作用域是根据映射文件mapper的namespace划分的，相同的namespace的mapper查询数据库存在同一个缓存区域。不同namespace下的数据互不干扰。无论是一级缓存还是二级缓存，都是按照namespace进行分别存放的。
但一、二级缓存的不同之处在于，以及一级缓存的作用域是:SqlSession,SqlSession一旦关闭，则SqlSession中的数据将不存在，即一级缓存就不复存在。而二级缓存的生命周期会与整个应用同步，与SqlSession是否关闭没有关系。换句话 一级缓存是在同一线程（同一SqlSession）间共享数据，而二级缓存是在不同线程（不同SqlSession）间共享数据



### 1.一级查询缓存

mybatis一级查询缓存是基于org.apache.ibatis.cache.impl.PerpetualCache类的HashMap本地缓存，其作用域是SqlSession，相同的namespace的mapper查询数据库存在同一个缓存区域。不同namespace下的数据互不干扰。在同一个SqlSession中两次执行相同的sql查询语句，第一次执行完毕后，会将查询结果写入到缓存中，第二次会从缓存中直接获取数据，而不再到数据库中进行查询，从而提高查询效率。
当一个sqlSession结束后，该SqlSession中的一级查询缓存也就不存在来了，mybatis默认一级查询缓存是开启状态的， 且不能关闭 。

---从缓存中读取数据的key是SQL的id和sql语句

缓存底层实现是个map，key是一个hashcode+sql的id+sql语句，value为查询出来的结果集映射成的java对象。

---增删改操作会清空一级缓存，无论是否提交（commit）



### 2.内置二级缓存

使用二级缓存的目的，不是共享数据，因为MyBatis从缓存中读取数据的依据是SQL的id和sql语句，而并非查询出的对象。所以， 二级缓存中的数据不是为了在多个查询之间共享,而是为了延长该查询结果的保存时间 ，提高系统性能

mybatis内置的二级缓存为org.apache.ibatis.cache.impl.PerpetualCache

2.1实体类实现序列化接口:
```java
    public class Student implements Serializable
```


2.2mapper映射文件中添加<cache/>标签
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<cache/>
    	<insert id="inserStudent">
    	<!--parameterMap参数可以省略不写  -->
    		<!--放sql语句,?放属性名  -->
    		insert into student1(name,age,score) values(#{name},#{age},#{score})
    	</insert>
    	<select id="selectById"	useCache="false" resultType="Student">
    		select id,name,age,score from student1 where id=#{xxxx}
    	</select>
    	<select id="selectById2" resultType="Student">
    		select id,name from student1 where id=#{xxxx}
    	</select>
    </mapper>
```


---二级缓存的配置
```xml
    <cache eviction="FIFO" flushInterval="10800000" readOnly="true" size="512"/>
```
- eviction:逐出策略。当二级缓存中的对象达到最大值时，就需要通过住处策略将缓存中的对象移出缓存。默认为LRU。常用策略有：
  - FIFO：First In First Out。先进先出
  - LRU：List Recently Used，未被使用时间最长的
- flushInterval：刷新缓存的时间间隔，单位毫秒。这里的刷新缓存即清空缓存。一般不指定，即当执行增删改时刷新缓存
- readOnly：设置缓存中数据是否只读。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，者提供了很重要的性能优势。读写的缓存会返回缓存对象的拷贝，这会慢一点，但是安全，因此默认是false。
- size：二级缓存中可以存放的最多对象个数，默认为1024个

---注意

增删改同样会清空二级缓存，但是！对于二级缓存的清空，实际上是将key对应的value置为null，而并非将键值对删除。从DB中进行select查询的条件时，在缓存中不存在这个key，或者key存在但是value为null



---关闭二级缓存

二级缓存默认开启，若要将其关闭，则需要进行相关设置。根据关闭的范围大小，可以分为全局关闭与局部关闭。

（1）全局关闭 所谓全局关闭是指，整个应用的二级缓存全部关闭，所有查询均不使用二级缓存。全局开关设置在主配置文件的全局设置settings标签中，该属性为cacheEnabled，设置为false则关闭；设置为true则开启，默认为true。
```xml
    <settings>
    	<!-- 关闭二级查询缓存 -->
    	<setting name="cacheEnabled" value="false"/>
    </settings>
```
（2）局部关闭 所谓局部关闭，指整个应用的二级缓存时开启的，对于某个select标签查询不适用二级缓存。此时可以单独关闭该select标签的二级缓存。
在该要关闭二级缓存的select/标签中，将其属性useCache设置为false，即可关闭该查询的二级缓存，默认为true。
```xml
    <cache/>
    <select id="selectById" useCache="false" resultType="Student">
    	select * from student where id=#{xxx}
    </select>
```
---二级缓存的使用原则

1.只能在一个命名空间下使用二级缓存 由于二级缓存中的数据是基于namespace的，即不同namespace中的数据互不干扰。在多个namespace中若均存在对同一个表的操作，那么这多个namespace中的数据可能会出现不一致

2.在表单上使用二级缓存 如果一个表与其他表有关联关系，那么就非常有可能存在多个namespace对同一个数据的操作。而不同namespace中的数据互不干扰，那么这多个namespace中的数据可能会出现不一致

3.查询多与修改时使用二级缓存 在查询操作远远多于增删改操作的情况下可以使用二级缓存。因为任何增伤该都会将二级缓存刷新，对二级缓存的频繁刷新将降低系统性能', type=Type{id=15, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@59cec966, {}]}
2019-10-31 11:11:07.378 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, recommend, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 11:11:07.387 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 15(Integer), 11(String), mybatis重点复习(String), mybatis的一些重点复习(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 11:11:07.372(Timestamp), 2019-10-31 11:11:07.372(Timestamp), ## Mybatis用到的动态代理设计模式:

### 作用:用于增强目标对象的目标方法

1.静态代理模式:在程序没有运行时,已经提前增强了.例如:你一直都有请一个律师顾问,平时一直都为你工作,不仅仅是只替你有官司的时候再来工作

2.动态代理(jdk(有接口使用)和cglib(无接口使用,不建议使用,会污染代码))

:在程序没有运行之前,是不会对你的目标方法进行增强,当你需要增强目标方法的时候,才会帮你增强;例如:平时你没有官司打,某一天,很不幸被人xxx,要打官司了,这个时候你去请你律师帮你打.        



### 一.Mybatis的动态代理:

注意点

1.mapper映射文件中的namespace一定为:dao层接口的全限定类名

2.mapper中的对应sql语句的id一定要与接口的方法名字一致,否则会报一下错误:
```java
    org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): 
```
### 二.传入动态代理的参数为map时:

由于无法将传过来的数据包装成一个对象,有String,Integer,Student这三个参数.当用于多条件查询的时候,就可以使用map参数的传递:

dao:
```java
    public interface IStudentDao {
    	List<Student> selectStudentByCondition(Map<String,Object> map);
    }
```


mapper:

接收的参数格式为:#{map按顺序放进去的key的值}
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<select id="selectStudentByCondition" resultType="Student">
    		select id,name,age,score from student1
    		 where name like '%' #{nameCon} '%' 
    		 and age > #{ageCon}
    		 and score > #{stu.score}
    		<!-- select id,name,age,score from student1 where name like '%${value}%' -->
    	</select>
    </mapper>
```


test:
```java
    	@Test
    	public void test1() {
    		Student stu = new Student("田七",27,90);
    		Map<String, Object> map = new HashMap<String,Object>();
    		map.put("nameCon","张");
    		map.put("ageCon", 23);
    		map.put("stu",stu);
    		List<Student> students = dao.selectStudentByCondition(map);
    		for (Student student : students) {
    			System.out.println(student);
    		}
    	}
```


### 第二种动态代理获取参数的方法:

mapper2:

接收格式:#{arg+map中索引的值}
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<select id="selectStudentByCondition" resultType="Student">
    		select id,name,age,score from student1
    		 where name like '%' #{arg0} '%' 
    		 and age > #{arg1}
    		<!-- select id,name,age,score from student1 where name like '%${value}%' -->
    	</select>
    </mapper>
```
总结:

### Mapper映射文件中的sql语句的#{}可以放的内容:

1. 参数对象的属性
2. 随意内容,作为占位符
3. 参数为map时的key
4. 参数为map时,若key的value为对象,则可将该对象的属性放入
5. 参数的索引号



### 三.多表关联查询对返回对象的封装:

第一种:

pojo:
```java
    public class Country {
    	private Integer cid;
    	private String cname;
    	//关联属性
    	private Set<Minister> ministers;
    	
    	public Integer getCid() {
    		return cid;
    	}
    }
```

```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister">
    			<id column="mid" property="mid"/>
    			<result column="mname" property="mname"/>
    		</collection>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname,mid,mname 
    			from country,minister 
    			where countryid=cid and cid=#{xxx}
    	</select>
    </mapper>
```




### 第二种:(使用递归查询的方式)
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<select id="selectMinisterByCountry" resultType="Minister">
    		select mid,mname from minister where countryid =#{ooo}
    	</select>
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
             <!--column:里面的参数是传入给select语句所使用的参数-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname from country where cid=#{xx}
    	</select>
    </mapper>
```




### 四:延时加载:

MyBatis中的延时加载，也称为懒加载，是指在进行关联查询时（也就是上面的多表查询），按照设置延时规则推迟对关联对象的select查询。延时加载可以有效的较少数据库压力。

需要置疑的是，MyBatis的延迟加载只是对关联对象的查询有延迟设置，对于主加载的对象都是直接执行查询语句的。下面是关联查询的mapper语句（其实就在上面）
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.ICountryDao">
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid"/>
    		<result column="cname" property="cname"/>
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister">
    			<id column="mid" property="mid"/>
    			<result column="mname" property="mname"/>
    		</collection>
    	</resultMap>
    	<select id="selectCountryById" resultMap="countryMap">
    			select cid,cname,mid,mname 
    			from country,minister 
    			where countryid=cid and cid=#{xxx}
    	</select>
    </mapper>
```


### 4.2关联对象的加载时机:

mybatis的延时加载分三种类型：直接加载，侵入式延迟加载，深度延迟加载

- 直接加载 执行完对主加载对象的select语句，马上执行对关联对象的select查询
- 侵入式延迟 执行对主加载对象的查询时，不会执行对关联对象的查询。担当要访问主加载对象的详情时，就会马上执行关联对象的select查询。即对关联对象的查询执行，侵入到了主加载对象的详情访问中。
- 深度延迟 执行对主加载对象的查询时，不会执行对关联对象的查询。访问主加载对象的详情时也不会执行关联对象的select查询。只有当真正的访问关联对象的时候，才会执行对关联对象的select查询



开启延时加载的配置:
```xml
     	<settings>
     		<!--延迟加载的总开关  -->
     		<setting name="lazyLoadingEnabled" value="true"/>
     		<!--侵入式加载的总开关,默认为false,意味着是深度延迟,前提是延时加载开启了-->
     		<setting name="aggressiveLazyLoading" value="true"/>
     	</settings>
```






### 五.查询缓存:

myabtis的查询缓存机制，根据缓存区的作用域与生命周期，可划分为两种：一级缓存、二级缓存
mybatis查询缓存的作用域是根据映射文件mapper的namespace划分的，相同的namespace的mapper查询数据库存在同一个缓存区域。不同namespace下的数据互不干扰。无论是一级缓存还是二级缓存，都是按照namespace进行分别存放的。
但一、二级缓存的不同之处在于，以及一级缓存的作用域是:SqlSession,SqlSession一旦关闭，则SqlSession中的数据将不存在，即一级缓存就不复存在。而二级缓存的生命周期会与整个应用同步，与SqlSession是否关闭没有关系。换句话 一级缓存是在同一线程（同一SqlSession）间共享数据，而二级缓存是在不同线程（不同SqlSession）间共享数据



### 1.一级查询缓存

mybatis一级查询缓存是基于org.apache.ibatis.cache.impl.PerpetualCache类的HashMap本地缓存，其作用域是SqlSession，相同的namespace的mapper查询数据库存在同一个缓存区域。不同namespace下的数据互不干扰。在同一个SqlSession中两次执行相同的sql查询语句，第一次执行完毕后，会将查询结果写入到缓存中，第二次会从缓存中直接获取数据，而不再到数据库中进行查询，从而提高查询效率。
当一个sqlSession结束后，该SqlSession中的一级查询缓存也就不存在来了，mybatis默认一级查询缓存是开启状态的， 且不能关闭 。

---从缓存中读取数据的key是SQL的id和sql语句

缓存底层实现是个map，key是一个hashcode+sql的id+sql语句，value为查询出来的结果集映射成的java对象。

---增删改操作会清空一级缓存，无论是否提交（commit）



### 2.内置二级缓存

使用二级缓存的目的，不是共享数据，因为MyBatis从缓存中读取数据的依据是SQL的id和sql语句，而并非查询出的对象。所以， 二级缓存中的数据不是为了在多个查询之间共享,而是为了延长该查询结果的保存时间 ，提高系统性能

mybatis内置的二级缓存为org.apache.ibatis.cache.impl.PerpetualCache

2.1实体类实现序列化接口:
```java
    public class Student implements Serializable
```


2.2mapper映射文件中添加<cache/>标签
```xml
    <?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    	<cache/>
    	<insert id="inserStudent">
    	<!--parameterMap参数可以省略不写  -->
    		<!--放sql语句,?放属性名  -->
    		insert into student1(name,age,score) values(#{name},#{age},#{score})
    	</insert>
    	<select id="selectById"	useCache="false" resultType="Student">
    		select id,name,age,score from student1 where id=#{xxxx}
    	</select>
    	<select id="selectById2" resultType="Student">
    		select id,name from student1 where id=#{xxxx}
    	</select>
    </mapper>
```


---二级缓存的配置
```xml
    <cache eviction="FIFO" flushInterval="10800000" readOnly="true" size="512"/>
```
- eviction:逐出策略。当二级缓存中的对象达到最大值时，就需要通过住处策略将缓存中的对象移出缓存。默认为LRU。常用策略有：
  - FIFO：First In First Out。先进先出
  - LRU：List Recently Used，未被使用时间最长的
- flushInterval：刷新缓存的时间间隔，单位毫秒。这里的刷新缓存即清空缓存。一般不指定，即当执行增删改时刷新缓存
- readOnly：设置缓存中数据是否只读。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，者提供了很重要的性能优势。读写的缓存会返回缓存对象的拷贝，这会慢一点，但是安全，因此默认是false。
- size：二级缓存中可以存放的最多对象个数，默认为1024个

---注意

增删改同样会清空二级缓存，但是！对于二级缓存的清空，实际上是将key对应的value置为null，而并非将键值对删除。从DB中进行select查询的条件时，在缓存中不存在这个key，或者key存在但是value为null



---关闭二级缓存

二级缓存默认开启，若要将其关闭，则需要进行相关设置。根据关闭的范围大小，可以分为全局关闭与局部关闭。

（1）全局关闭 所谓全局关闭是指，整个应用的二级缓存全部关闭，所有查询均不使用二级缓存。全局开关设置在主配置文件的全局设置settings标签中，该属性为cacheEnabled，设置为false则关闭；设置为true则开启，默认为true。
```xml
    <settings>
    	<!-- 关闭二级查询缓存 -->
    	<setting name="cacheEnabled" value="false"/>
    </settings>
```
（2）局部关闭 所谓局部关闭，指整个应用的二级缓存时开启的，对于某个select标签查询不适用二级缓存。此时可以单独关闭该select标签的二级缓存。
在该要关闭二级缓存的select/标签中，将其属性useCache设置为false，即可关闭该查询的二级缓存，默认为true。
```xml
    <cache/>
    <select id="selectById" useCache="false" resultType="Student">
    	select * from student where id=#{xxx}
    </select>
```
---二级缓存的使用原则

1.只能在一个命名空间下使用二级缓存 由于二级缓存中的数据是基于namespace的，即不同namespace中的数据互不干扰。在多个namespace中若均存在对同一个表的操作，那么这多个namespace中的数据可能会出现不一致

2.在表单上使用二级缓存 如果一个表与其他表有关联关系，那么就非常有可能存在多个namespace对同一个数据的操作。而不同namespace中的数据互不干扰，那么这多个namespace中的数据可能会出现不一致

3.查询多与修改时使用二级缓存 在查询操作远远多于增删改操作的情况下可以使用二级缓存。因为任何增伤该都会将二级缓存刷新，对二级缓存的频繁刷新将降低系统性能(String)
2019-10-31 11:11:07.391 DEBUG 36220 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 11:11:07.393 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 11:11:07.394 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 15(Integer)
2019-10-31 11:11:07.395 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 11:11:07.395 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 11:11:07.395 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: ssm(String), 2(Integer), 15(Integer)
2019-10-31 11:11:07.397 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 11:11:07.399 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 11:11:07.399 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 11:11:07.400 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 11:11:07.400 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 11:11:07.400 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 1(Integer), 11(Integer)
2019-10-31 11:11:07.403 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 11:11:07.509  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 11:11:07.511  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 140
2019-10-31 11:11:07.516  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 11:11:07.516 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 11:11:07.516 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 11:11:07.518 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 11:11:07.519 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 11:11:07.519 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:07.524 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 8
2019-10-31 11:11:07.533 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.533 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:07.535 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.537 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.537 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:07.538 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.539 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.539 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:07.541 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.542 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.543 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:07.543 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.546 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.546 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:07.547 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.548 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.549 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:07.550 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.551 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.552 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:07.552 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.554 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:07.554 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:07.556 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:07.557 DEBUG 36220 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 11:11:07.557 DEBUG 36220 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 11:11:07.559 DEBUG 36220 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 11:11:07.560  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 11:11:07.560  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 44
2019-10-31 11:11:10.131  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 11:11:10.145 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.145 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.147 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.149 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.149 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:10.150 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.152 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.152 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.154 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.156 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.156 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.157 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.159 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.159 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.160 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.163 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.163 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:10.164 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.165 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.165 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.167 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.169 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.169 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:10.170 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.172 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.173 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.173 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.174 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.174 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:10.176 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.177 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.177 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.180 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.182 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.182 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:10.183 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.184 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:10.185 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.186 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.189 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:10.189 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:10.190 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:10.192 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:10.197 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:10.197 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:10.198 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:10.199 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:10.199 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:10.204 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:10.204 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:10.205 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:10.206 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:10.206 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:10.207 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:10.208 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:10.209  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:10.209  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 78
2019-10-31 11:11:22.253  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:22.264 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:22.264 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:22.264 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:22.266 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:22.267 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:22.267 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:22.268 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:22.268 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:22.270 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:22.271 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:22.271 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:22.273 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:22.273 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:22.274 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:22.275 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:22.276 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:22.276 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:22.277 DEBUG 36220 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:22.278 DEBUG 36220 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:22.278 DEBUG 36220 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:22.279 DEBUG 36220 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:22.279 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:22.279 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:22.280 DEBUG 36220 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:22.281  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:22.281  INFO 36220 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 28
2019-10-31 11:11:24.454  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:24.459 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:24.459 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:24.460 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:24.462 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:24.462 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:24.463 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:24.465 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:24.466 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:24.466 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:24.466 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:24.467 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:24.468 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:24.468 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:24.468 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:24.470 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:24.471 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:24.471 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:24.472 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:24.473 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:24.473 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:24.474 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:24.474 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:24.474 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:24.475 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:24.476  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:24.476  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 22
2019-10-31 11:11:27.892  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:27.898 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:27.898 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:27.899 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:27.901 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:27.901 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:27.902 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:27.903 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:27.904 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:27.905 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:27.906 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:27.906 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:27.907 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:27.907 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:27.907 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:27.908 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:27.908 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:27.908 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:27.908 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:27.913 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:27.913 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:27.914 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:27.914 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:27.914 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:27.916 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:27.917  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:27.917  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 25
2019-10-31 11:11:31.476  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:31.486 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:31.486 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:31.487 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:31.488 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:31.488 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:31.489 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:31.491 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:31.491 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:31.492 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:31.496 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:31.496 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:31.497 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:31.497 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:31.499 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:31.499 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:31.500 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:31.500 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:31.500 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:31.501 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:31.502  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:31.502  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 26
2019-10-31 11:11:33.752  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:33.755 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:33.755 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:33.756 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:33.757 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:33.758 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:33.759 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:33.760 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:33.761 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:33.761 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:33.762 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:33.762 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:33.763 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:33.764 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:33.764 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:33.765 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:33.766 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:33.766 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:33.768 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:33.768 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:33.769 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:33.769 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:33.769 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:33.769 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:33.770 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:33.771  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:33.771  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 20
2019-10-31 11:11:35.636  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:35.640 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:35.641 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:35.642 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:35.643 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:35.643 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:35.645 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:35.646 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:35.646 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:35.647 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:35.647 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:35.648 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:35.658 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:35.658 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:35.659 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:35.659 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:35.661 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:35.662 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:35.662 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:35.663 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:35.663 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:35.664 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:35.664 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:35.664 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:35.665 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:35.667  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:35.667  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 31
2019-10-31 11:11:40.830  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 11:11:40.838 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.838 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.839 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.841 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.841 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:40.842 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.844 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.844 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.845 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.847 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.847 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.848 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.849 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.849 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.850 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.852 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.852 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:40.853 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.854 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.854 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.854 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.857 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.857 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:40.859 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.860 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.860 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.861 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.862 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.862 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:40.864 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.865 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.865 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.865 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.867 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.868 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:40.869 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.870 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:40.870 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.870 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.872 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:40.873 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:40.874 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:40.875 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:40.875 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:40.876 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:40.876 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:40.877 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:40.877 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:40.878 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:40.878 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:40.878 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:40.878 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:40.878 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:40.881 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:40.882 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:40.882 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:40.882 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:40.882 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:40.883 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:40.884 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:40.884  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:40.884  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 54
2019-10-31 11:11:48.053  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 11:11:48.086 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.086 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.087 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.089 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.089 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:48.089 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.090 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.091 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.091 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.093 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.093 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.093 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.094 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.094 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.095 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.095 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.095 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:48.095 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:48.099 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.103 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.103 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.103 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.103 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.103 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:11:48.107 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.107 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.107 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.107 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.111 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:48.116 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:48.120 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:48.124 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:48.124 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:48.124 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:48.124 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:48.126 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:48.126 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:48.126 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:48.127  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:48.127  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 74
2019-10-31 11:11:50.719  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:50.724 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:50.725 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:50.725 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:50.726 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:50.726 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:50.727 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:50.728 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:50.728 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:50.728 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:50.729 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:50.729 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:50.730 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:50.730 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:50.730 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:50.731 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:50.731 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:50.731 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:50.733 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:50.733 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:50.734 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:50.734 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:50.734 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:50.734 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:50.735 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:50.736  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:50.736  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 17
2019-10-31 11:11:55.351  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:11:55.356 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:11:55.356 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:55.357 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:55.358 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:11:55.358 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:11:55.359 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:11:55.360 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:11:55.360 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:55.360 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:55.362 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:11:55.362 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:55.362 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:11:55.363 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:11:55.363 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:11:55.364 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:11:55.365 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:11:55.365 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:11:55.375 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:11:55.376 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:11:55.376 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:11:55.377 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:11:55.378 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:11:55.378 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:11:55.379 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:11:55.379  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:11:55.379  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 28
2019-10-31 11:12:09.184  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:12:09.191 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:12:09.191 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:09.192 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:09.193 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:12:09.193 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:09.194 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:09.195 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:12:09.195 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:09.196 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:09.196 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:12:09.196 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:09.197 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:12:09.197 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:12:09.197 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:09.202 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:09.203 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:12:09.203 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:12:09.204 DEBUG 36220 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:12:09.205 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:12:09.205 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:12:09.205 DEBUG 36220 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:12:09.205 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:12:09.205 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:09.206 DEBUG 36220 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:12:09.206  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:12:09.206  INFO 36220 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 22
2019-10-31 11:12:11.277  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:12:11.282 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:12:11.282 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:11.283 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:11.284 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:12:11.284 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:11.285 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:11.286 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:12:11.286 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:12:11.287 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:11.291 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:11.291 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:12:11.291 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:12:11.296 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:12:11.296 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:12:11.297 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:12:11.297 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:12:11.298 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:12:11.298 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:11.299 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:12:11.300  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:12:11.300  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 23
2019-10-31 11:12:17.374  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:12:17.384 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:12:17.384 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:17.390 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:17.391 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:12:17.392 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:12:17.393 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:12:17.394 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:12:17.394 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:17.395 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:17.396 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:12:17.396 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:17.396 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:12:17.397 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:12:17.397 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:12:17.398 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:12:17.399 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:12:17.399 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:12:17.400 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:12:17.401 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:12:17.401 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:12:17.401 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:12:17.402 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:12:17.402 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:12:17.402 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:12:17.404  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:12:17.404  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 30
2019-10-31 11:13:19.963  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:13:19.974 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:13:19.974 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:13:19.976 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:13:19.977 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:13:19.977 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:13:19.977 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:13:19.978 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:13:19.978 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:13:19.979 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:13:19.979 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:13:19.980 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:13:19.981 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:13:19.981 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:13:19.982 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:13:19.982 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:13:19.982 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:13:19.982 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:13:19.984 DEBUG 36220 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:13:19.988 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:13:19.988 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:13:19.989 DEBUG 36220 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:13:19.989 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:13:19.990 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:13:19.990 DEBUG 36220 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:13:19.991  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:13:19.991  INFO 36220 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 28
2019-10-31 11:13:27.774  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:13:27.787 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:13:27.787 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:13:27.789 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:13:27.790 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:13:27.790 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:13:27.791 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:13:27.792 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:13:27.792 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:13:27.793 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:13:27.793 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:13:27.793 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:13:27.795 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:13:27.795 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:13:27.795 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:13:27.796 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:13:27.796 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:13:27.797 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:13:27.797 DEBUG 36220 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:13:27.797 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:13:27.797 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:13:27.799 DEBUG 36220 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:13:27.799 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:13:27.799 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:13:27.800 DEBUG 36220 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:13:27.801  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:13:27.801  INFO 36220 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 27
2019-10-31 11:15:05.557  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:15:05.567 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:15:05.567 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:15:05.567 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:15:05.570 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:15:05.570 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:15:05.571 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:15:05.572 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:15:05.572 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:15:05.573 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:15:05.573 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:15:05.573 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:15:05.574 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:15:05.574 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:15:05.575 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:15:05.576 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:15:05.576 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:15:05.576 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:15:05.577 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:15:05.578 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:15:05.578 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:15:05.578 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:15:05.579 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:15:05.579 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:15:05.580 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:15:05.581  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:15:05.581  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 24
2019-10-31 11:16:25.218  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:16:25.227 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:25.227 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:25.236 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:25.237 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:25.238 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:25.238 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:25.239 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:25.239 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:25.240 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:25.240 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:25.240 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:25.241 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:25.243 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:25.243 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:25.244 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:25.244 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:25.244 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:25.245 DEBUG 36220 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:25.245 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:25.246 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:25.246 DEBUG 36220 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:25.246 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:25.247 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:25.247 DEBUG 36220 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:25.248  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:25.248  INFO 36220 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 30
2019-10-31 11:16:30.477  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 11:16:30.486 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.486 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.487 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.489 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.489 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:30.489 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.491 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.491 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.492 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.494 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.494 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.495 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.496 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.496 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.496 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.499 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.500 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:30.500 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.502 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.502 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.503 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.504 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.504 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:30.505 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.506 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.507 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.508 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.509 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.510 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:30.510 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.511 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.511 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.512 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.513 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.513 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:30.515 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.516 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:30.516 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.517 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.518 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:30.519 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:30.519 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:30.520 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:30.520 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:30.520 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:30.521 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:30.521 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:30.522 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:30.523 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:30.523 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:30.523 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:30.524 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:30.524 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:30.525 DEBUG 36220 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:30.526 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:30.527 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:30.527 DEBUG 36220 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:30.527 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:30.527 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:30.528 DEBUG 36220 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:30.529  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:30.529  INFO 36220 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 52
2019-10-31 11:16:38.622  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 11:16:38.636 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.636 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.637 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.638 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.639 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:38.640 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.641 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.641 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.641 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.645 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.645 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.646 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.647 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.648 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.648 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.650 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.650 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:38.651 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.652 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.652 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.653 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.655 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.655 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:38.655 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.656 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.657 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.657 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.658 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.659 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:38.659 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.660 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.660 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.662 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.663 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.663 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:38.664 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.665 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:38.665 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.666 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.667 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:38.667 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:38.668 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:38.669 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:38.669 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:38.670 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:38.670 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:38.670 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:38.672 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:38.672 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:38.672 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:38.673 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:38.673 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:38.673 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:38.679 DEBUG 36220 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:38.680 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:38.680 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:38.681 DEBUG 36220 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:38.681 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:38.682 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:38.682 DEBUG 36220 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:38.683  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:38.683  INFO 36220 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 61
2019-10-31 11:16:43.158  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[0, {}]}
2019-10-31 11:16:43.168 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.168 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.169 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.170 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.171 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:43.172 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.173 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.173 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.174 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.176 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.176 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.177 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.178 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.178 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.178 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.181 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.181 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:43.182 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.183 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.183 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.184 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.185 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.186 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:43.187 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.188 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.188 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.188 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.190 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.191 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:43.191 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.192 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.192 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.194 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.195 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.196 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:43.196 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.197 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:43.198 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.199 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.200 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:43.201 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:43.201 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:43.202 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:43.202 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:43.203 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:43.203 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:43.203 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:43.204 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:43.204 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:43.205 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:43.205 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:43.206 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:43.206 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:43.206 DEBUG 36220 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:43.207 DEBUG 36220 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:43.207 DEBUG 36220 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:43.207 DEBUG 36220 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:43.207 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:43.208 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:43.209 DEBUG 36220 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:43.209  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:43.210  INFO 36220 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 52
2019-10-31 11:16:49.074  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[4, {}]}
2019-10-31 11:16:49.080 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:49.080 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:49.081 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:49.081 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:49.082 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:49.082 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:49.082 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:49.082 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:49.084 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:49.084 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:49.084 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:49.085 DEBUG 36220 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:49.085 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:49.085 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:49.088 DEBUG 36220 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:49.088 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:49.088 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:49.089 DEBUG 36220 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:49.089  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:49.089  INFO 36220 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 11:16:53.083  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 11:16:53.093 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.093 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.095 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.096 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.096 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:53.097 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.102 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.103 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.104 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.106 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.106 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.106 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.108 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.108 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.109 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.110 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.110 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:53.112 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.113 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.113 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.114 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.115 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.115 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:53.116 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.117 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.117 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.118 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.119 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.119 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:16:53.121 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.122 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.122 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.123 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.124 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.125 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:16:53.126 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.127 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:16:53.127 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.127 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.129 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:16:53.130 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:16:53.130 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:16:53.132 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:16:53.132 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:53.132 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:53.132 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:16:53.132 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:53.134 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:16:53.135 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:16:53.135 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:16:53.136 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:16:53.136 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:16:53.137 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:16:53.138 DEBUG 36220 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:16:53.139 DEBUG 36220 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:16:53.139 DEBUG 36220 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:16:53.139 DEBUG 36220 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:16:53.140 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:16:53.140 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:16:53.141 DEBUG 36220 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:16:53.141  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:16:53.141  INFO 36220 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 58
2019-10-31 11:19:57.622  INFO 11964 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 11964 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 11:19:57.626 DEBUG 11964 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 11:19:57.626  INFO 11964 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 11:19:57.682  INFO 11964 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 11:19:57.683  INFO 11964 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 11:19:58.534  INFO 11964 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 11:19:58.579  INFO 11964 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 repository interfaces.
2019-10-31 11:19:59.031  INFO 11964 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ade68ef3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 11:19:59.638  INFO 11964 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 11:19:59.658  INFO 11964 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 11:19:59.659  INFO 11964 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 11:19:59.790  INFO 11964 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 11:19:59.791  INFO 11964 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2108 ms
2019-10-31 11:20:00.012  INFO 11964 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 11:20:00.298  INFO 11964 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 11:20:02.797  INFO 11964 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 11:20:02.911  INFO 11964 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 11:20:04.015  INFO 11964 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 11:20:04.086  INFO 11964 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 11:20:04.089  INFO 11964 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 7.086 seconds (JVM running for 9.537)
2019-10-31 11:20:08.062  INFO 11964 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 11:20:08.063  INFO 11964 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 11:20:08.080  INFO 11964 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2019-10-31 11:20:08.125  INFO 11964 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 11:20:08.369 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.399 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.428 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.435 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.436 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:20:08.436 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.439 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.439 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.440 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.442 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.442 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.444 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.446 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.446 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.448 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.449 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.450 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:20:08.451 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.453 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.453 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.454 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.457 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.457 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:20:08.459 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.461 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.461 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.462 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.464 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.465 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 11:20:08.466 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.467 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.468 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.469 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.471 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.471 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:20:08.472 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.474 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:20:08.474 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.475 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:20:08.477 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:20:08.478 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:20:08.479 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:22:47.999 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 11:22:48.001 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:22:48.003 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:22:48.019 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 11:22:48.026 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:22:48.037 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 11:22:50.663 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 11:22:50.667 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 11:22:50.670 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 11:22:50.678 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 11:22:50.680 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 11:22:50.682 DEBUG 11964 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 11:22:54.342 DEBUG 11964 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 11:22:54.342 DEBUG 11964 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 11:22:54.347 DEBUG 11964 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 11:22:54.350 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 11:22:54.352 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 11:22:54.358 DEBUG 11964 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 11:23:30.257  INFO 11964 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 11:23:30.257  INFO 11964 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 202135
2019-10-31 11:23:30.267  INFO 11964 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/18', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[18, {}]}
2019-10-31 11:23:30.268 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 11:23:30.269 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 18(Integer)
2019-10-31 11:23:30.273 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:23:30.359 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:23:30.359 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 11:23:30.359 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:23:30.363 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:23:30.363 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:23:30.363 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:23:30.363 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 11:23:30.367 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 7(Integer)
2019-10-31 11:23:30.367 DEBUG 11964 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 11:23:30.367  INFO 11964 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 11:23:30.367  INFO 11964 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 100
2019-10-31 11:23:35.648  INFO 11964 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 11:23:35.656 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 11:23:35.656 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:23:35.658 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 11:23:35.661 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 11:23:35.661 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 11:23:35.662 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:18:03.651 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:18:03.651 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:18:03.651 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:18:03.655 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:18:03.655 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:18:03.655 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:18:03.658 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:18:03.658 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:18:03.659 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:18:03.659 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:18:03.659 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:18:03.659 DEBUG 11964 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:18:03.664 DEBUG 11964 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:18:03.664 DEBUG 11964 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:18:03.666 DEBUG 11964 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:18:03.667 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:18:03.667 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:18:03.668 DEBUG 11964 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:18:03.669  INFO 11964 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:18:03.669  INFO 11964 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 3268021
2019-10-31 12:18:15.276  INFO 11964 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:18:15.291 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:18:15.292 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:18:15.293 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:18:15.299 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:18:15.300 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:18:15.301 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:18:51.739 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:18:51.740 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:18:51.745 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:18:51.746 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:18:51.746 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:18:51.750 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:18:51.750 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:18:51.750 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:18:51.756 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:18:51.757 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:18:51.757 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:18:51.759 DEBUG 11964 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:18:51.760 DEBUG 11964 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:18:51.761 DEBUG 11964 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:18:51.761 DEBUG 11964 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:18:51.762 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:18:51.762 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:18:51.763 DEBUG 11964 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:18:51.765  INFO 11964 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:18:51.765  INFO 11964 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 36489
2019-10-31 12:19:32.518  INFO 11964 --- [Thread-23] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 12:19:32.519  INFO 11964 --- [Thread-23] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 12:19:32.523  INFO 11964 --- [Thread-23] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 12:19:38.813  INFO 34316 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 34316 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 12:19:38.817 DEBUG 34316 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 12:19:38.817  INFO 34316 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 12:19:38.935  INFO 34316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 12:19:38.935  INFO 34316 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 12:19:39.773  INFO 34316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 12:19:39.818  INFO 34316 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 32ms. Found 0 repository interfaces.
2019-10-31 12:19:40.184  INFO 34316 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b245a538] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 12:19:40.731  INFO 34316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 12:19:40.820  INFO 34316 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 12:19:40.820  INFO 34316 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 12:19:40.932  INFO 34316 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 12:19:40.933  INFO 34316 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1998 ms
2019-10-31 12:19:41.085  INFO 34316 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 12:19:41.326  INFO 34316 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 12:19:42.649  INFO 34316 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 12:19:42.775  INFO 34316 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 12:19:43.569  INFO 34316 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 12:19:43.628  INFO 34316 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 12:19:43.633  INFO 34316 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.47 seconds (JVM running for 6.592)
2019-10-31 12:19:49.978  INFO 34316 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 12:19:49.978  INFO 34316 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 12:19:49.995  INFO 34316 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 14 ms
2019-10-31 12:19:50.028  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 12:19:50.259 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.285 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.308 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.318 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.319 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:19:50.319 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.322 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.323 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.324 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.326 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.326 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.327 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.329 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.330 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.331 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.334 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.334 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:19:50.335 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.337 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.337 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.339 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.341 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.341 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:19:50.343 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.346 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.346 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.348 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.350 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.350 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:19:50.351 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.353 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.354 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.354 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.358 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.358 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:19:50.359 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.362 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:50.363 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.365 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.367 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:50.367 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:50.368 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:50.411 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:19:50.412 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:50.413 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:50.414 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:19:50.416 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:50.419 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:19:50.425 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:19:50.426 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:50.426 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:50.427 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:19:50.428 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:19:50.429 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:19:50.438 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:19:50.438 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:19:50.439 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:19:50.440 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:19:50.440 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:50.442 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:19:50.443  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:19:50.443  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 416
2019-10-31 12:19:55.577  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:19:55.587 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:55.587 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:55.589 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:55.592 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:55.592 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:55.594 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:55.595 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:19:55.595 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:55.596 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:55.596 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:19:55.599 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:55.602 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:19:55.602 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:19:55.603 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:55.604 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:55.604 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:19:55.604 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:19:55.608 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:19:55.609 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:19:55.609 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:19:55.610 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:19:55.610 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:19:55.610 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:55.612 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:19:55.614  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:19:55.614  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 37
2019-10-31 12:19:58.641  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:19:58.651 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:19:58.651 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:58.652 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:58.654 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:19:58.655 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:19:58.657 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:19:58.658 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:19:58.659 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:58.659 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:58.660 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:19:58.660 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:58.663 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:19:58.664 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:19:58.665 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:19:58.666 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:19:58.668 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:19:58.668 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:19:58.669 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:19:58.673 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:19:58.673 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:19:58.674 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:19:58.674 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:19:58.674 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:19:58.677 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:19:58.678  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:19:58.678  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 37
2019-10-31 12:20:00.562  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:00.568 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:00.568 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:00.570 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:00.573 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:00.574 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:00.575 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:00.576 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:00.576 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:00.577 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:00.579 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:00.579 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:00.580 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:00.580 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:00.580 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:00.584 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:00.585 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:00.585 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:00.586 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:00.588 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:00.588 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:00.589 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:00.589 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:00.589 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:00.589 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:00.593  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:00.593  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 31
2019-10-31 12:20:01.699  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:01.703 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:01.703 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:01.705 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:01.706 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:01.706 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:01.715 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:01.717 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:01.717 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:01.718 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:01.718 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:01.718 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:01.718 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:01.722 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:01.722 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:01.723 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:01.723 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:01.723 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:01.727 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:01.728 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:01.729 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:01.729 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:01.729 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:01.731 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:01.732 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:01.733  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:01.733  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 34
2019-10-31 12:20:02.819  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:02.823 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:02.823 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:02.825 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:02.828 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:02.828 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:02.837 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:02.839 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:02.839 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:02.839 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:02.839 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:02.839 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:02.843 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:02.844 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:02.844 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:02.845 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:02.845 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:02.845 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:02.845 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:02.850 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:02.850 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:02.851 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:02.852 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:02.852 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:02.853 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:02.855  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:02.855  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 36
2019-10-31 12:20:03.451  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:03.455 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:03.455 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.457 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.459 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:03.460 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.460 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.462 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:03.462 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.463 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.464 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.464 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.465 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:03.466 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:03.467 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.468 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.469 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.469 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:03.469 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:03.473 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:03.473 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:03.473 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:03.473 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:03.473 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.475 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:03.476  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:03.476  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 25
2019-10-31 12:20:03.831  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:03.834 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:03.834 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.834 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.838 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:03.839 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.839 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.840 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:03.841 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.841 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.843 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.844 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.845 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:03.846 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:03.846 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.846 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.847 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.848 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:03.849 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:03.849 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:03.851 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:03.852 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:03.852 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:03.852 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.853 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:03.854  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:03.854  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 23
2019-10-31 12:20:03.878  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:03.883 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:03.883 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.884 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.886 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:03.887 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:03.887 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:03.888 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:03.888 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.889 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.890 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.890 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.892 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:03.894 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:03.894 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:03.895 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:03.896 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:03.896 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:03.897 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:03.898 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:03.898 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:03.899 DEBUG 34316 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:03.899 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:03.899 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:03.900 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:03.902  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:03.902  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 24
2019-10-31 12:20:04.865  INFO 34316 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:20:04.870 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:20:04.870 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:04.873 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:04.876 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:04.876 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:04.877 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:04.879 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:20:04.879 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:04.880 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:04.881 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:20:04.881 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:04.882 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:20:04.883 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:20:04.883 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:20:04.884 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:20:04.884 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:20:04.885 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:04.886 DEBUG 34316 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:20:04.886 DEBUG 34316 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:20:04.886 DEBUG 34316 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:20:04.888 DEBUG 34316 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:20:04.888 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:20:04.888 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:20:04.889 DEBUG 34316 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:20:04.891  INFO 34316 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:20:04.891  INFO 34316 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 26
2019-10-31 12:20:29.499  INFO 34316 --- [http-nio-8080-exec-5] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 12:20:29.504  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 12:20:29.506  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 12:20:29.506  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 12:20:35.415  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@19096960]}
2019-10-31 12:20:35.429 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 12:20:35.430 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 12:20:35.431 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 12:20:35.434  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 12:20:35.434  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 19
2019-10-31 12:20:35.451  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 12:20:35.454  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 12:20:35.454  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 3
2019-10-31 12:20:37.210  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 12:20:37.215 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 12:20:37.216 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 12:20:37.216 DEBUG 34316 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 12:20:37.217 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 12:20:37.217 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:20:37.221 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 8
2019-10-31 12:20:37.228 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.228 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:37.229 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.231 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.231 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:20:37.232 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.234 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.234 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:20:37.234 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.237 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.237 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:20:37.238 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.239 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.240 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:20:37.240 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.242 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.242 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:37.243 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.244 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.245 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:20:37.246 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.248 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:20:37.248 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:20:37.249 DEBUG 34316 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:20:37.251 DEBUG 34316 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 12:20:37.251 DEBUG 34316 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 12:20:37.252 DEBUG 34316 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 12:20:37.253  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 12:20:37.253  INFO 34316 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 43
2019-10-31 12:20:38.591  INFO 34316 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 12:20:38.594 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 12:20:38.594 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 12:20:38.595 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 12:20:38.598 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 12:20:38.598 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 12:20:38.599 DEBUG 34316 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 12:20:38.600  INFO 34316 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 12:20:38.600  INFO 34316 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 9
2019-10-31 12:21:05.206  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='7', title='eeee', description='sss', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='eeee', type=Type{id=8, name='null', blogs=null}, tagIds='7'}, org.apache.catalina.session.StandardSessionFacade@19096960, {}]}
2019-10-31 12:21:05.211 DEBUG 34316 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 12:21:05.212 DEBUG 34316 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 8(Integer), 7(String), eeee(String), sss(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 12:21:05.207(Timestamp), 2019-10-31 12:21:05.207(Timestamp), eeee(String)
2019-10-31 12:21:05.216 DEBUG 34316 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 12:21:05.223 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 12:21:05.223 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 8(Integer)
2019-10-31 12:21:05.224 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 12:21:05.225 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 12:21:05.226 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 测试(String), 1(Integer), 8(Integer)
2019-10-31 12:21:05.226 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 12:21:05.229 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 12:21:05.229 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 7(Integer)
2019-10-31 12:21:05.230 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 12:21:05.230 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 12:21:05.231 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: java多线程(String), 2(Integer), 7(Integer)
2019-10-31 12:21:05.232 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 12:21:05.315  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 12:21:05.316  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 110
2019-10-31 12:21:05.324  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 12:21:05.324 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 12:21:05.325 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 12:21:05.326 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 12:21:05.327 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 12:21:05.327 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:21:05.332 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 9
2019-10-31 12:21:05.336 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.337 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:05.338 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.340 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.340 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:05.341 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.342 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.343 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:21:05.343 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.345 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.345 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:05.346 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.347 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.347 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:05.349 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.350 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.350 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:05.350 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.353 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.353 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:05.354 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.356 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.357 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:21:05.357 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.359 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:05.359 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 12:21:05.360 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:05.362 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 12:21:05.362 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 12:21:05.363 DEBUG 34316 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 12:21:05.364  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 12:21:05.364  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 40
2019-10-31 12:21:07.859  INFO 34316 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:21:07.874 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:07.874 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:07.876 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:07.877 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:07.877 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:07.879 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:07.880 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:07.880 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:07.881 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:07.882 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:07.883 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:07.884 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:07.885 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:21:07.885 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:07.886 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:07.887 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:21:07.888 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:07.888 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:21:07.889 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:21:07.889 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:07.890 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:07.890 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:21:07.890 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:21:07.890 DEBUG 34316 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:21:07.894 DEBUG 34316 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:21:07.894 DEBUG 34316 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:21:07.895 DEBUG 34316 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:21:07.895 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:21:07.895 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:07.896 DEBUG 34316 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:21:07.897  INFO 34316 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:21:07.897  INFO 34316 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 38
2019-10-31 12:21:12.160  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 12:21:12.170 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:12.170 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:12.171 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:12.172 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:12.172 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:12.173 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:12.175 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:12.175 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:12.176 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:12.177 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:12.178 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:12.179 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:12.180 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:21:12.180 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:12.181 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:21:12.182 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:21:12.187 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:21:12.188 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:21:12.188 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:21:12.189 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:21:12.189 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:21:12.190 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:12.190 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:21:12.191  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:21:12.191  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 31
2019-10-31 12:21:14.866  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 12:21:14.872 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.872 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.876 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.878 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.879 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 12:21:14.879 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.881 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.881 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.883 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.884 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.884 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:21:14.885 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.886 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.887 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.888 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.889 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.889 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.890 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.893 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.893 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.893 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.895 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.896 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:14.896 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.898 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.898 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.898 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.901 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.902 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:14.902 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.904 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.904 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.905 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.907 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.907 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 12:21:14.907 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.908 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 12:21:14.909 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 12:21:14.909 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.911 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 12:21:14.912 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 12:21:14.912 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 12:21:14.913 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 12:21:14.914 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:14.915 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:14.915 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 12:21:14.916 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:14.916 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 12:21:14.916 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 12:21:14.916 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 12:21:14.917 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 12:21:14.917 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 12:21:14.917 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 12:21:14.919 DEBUG 34316 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 12:21:14.919 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 12:21:14.919 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 12:21:14.921 DEBUG 34316 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 12:21:14.921 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 12:21:14.921 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 12:21:14.922 DEBUG 34316 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 12:21:14.923  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 12:21:14.923  INFO 34316 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 57
2019-10-31 13:10:13.182  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 13:10:13.197 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.198 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.199 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.201 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.201 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:10:13.203 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.204 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.204 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.205 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.206 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.207 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:10:13.207 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.209 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.209 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.210 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.211 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.211 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.212 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.213 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.214 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.214 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.216 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.216 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:10:13.217 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.218 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.218 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.219 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.220 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.220 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:10:13.221 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.222 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.222 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.223 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.225 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.225 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:10:13.225 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.226 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:13.226 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:13.227 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.229 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:13.229 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:10:13.230 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:13.231 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:10:13.231 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:13.231 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:13.232 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:10:13.232 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:13.232 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:10:13.232 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:10:13.233 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:13.234 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:13.234 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:10:13.234 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:10:13.235 DEBUG 34316 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:10:13.236 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:10:13.236 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:10:13.237 DEBUG 34316 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:10:13.237 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:10:13.237 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:13.238 DEBUG 34316 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:10:13.239  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:10:13.239  INFO 34316 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 57
2019-10-31 13:10:18.220  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:10:18.225 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:18.226 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:18.227 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:18.229 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:18.229 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:18.229 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:18.232 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:18.232 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:18.233 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:18.234 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:18.234 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:18.235 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:18.237 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:10:18.237 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:18.238 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:18.238 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:10:18.238 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:18.238 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:10:18.238 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:10:18.242 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:18.243 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:18.244 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:10:18.245 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:10:18.245 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:10:18.246 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:10:18.247 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:10:18.247 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:10:18.248 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:10:18.248 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:18.248 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:10:18.250  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:10:18.250  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 30
2019-10-31 13:10:52.772  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:10:52.780 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:52.786 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:52.787 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:52.787 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:52.789 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:52.789 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:52.790 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:52.791 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:52.791 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:52.793 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:52.793 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:52.793 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:52.794 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:10:52.795 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:52.795 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:52.796 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:10:52.796 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:52.796 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:10:52.799 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:10:52.799 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:52.799 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:52.801 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:10:52.801 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:10:52.802 DEBUG 34316 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:10:52.803 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:10:52.803 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:10:52.803 DEBUG 34316 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:10:52.803 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:10:52.803 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:52.804 DEBUG 34316 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:10:52.805  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:10:52.805  INFO 34316 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 33
2019-10-31 13:10:55.398  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:10:55.403 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:55.403 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:55.404 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:55.405 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:55.406 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:55.406 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:55.408 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:10:55.408 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:55.408 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:55.410 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:10:55.411 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:10:55.411 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:10:55.412 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:10:55.412 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:55.413 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:55.413 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:10:55.414 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:55.415 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:10:55.416 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:10:55.416 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:10:55.416 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:10:55.417 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:10:55.417 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:10:55.418 DEBUG 34316 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:10:55.419 DEBUG 34316 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:10:55.419 DEBUG 34316 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:10:55.420 DEBUG 34316 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:10:55.421 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:10:55.421 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:10:55.421 DEBUG 34316 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:10:55.422  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:10:55.422  INFO 34316 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 24
2019-10-31 13:13:46.722  INFO 30540 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 30540 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 13:13:46.725 DEBUG 30540 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 13:13:46.725  INFO 30540 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 13:13:46.777  INFO 30540 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 13:13:46.777  INFO 30540 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 13:13:47.639  INFO 30540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 13:13:47.681  INFO 30540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 29ms. Found 0 repository interfaces.
2019-10-31 13:13:48.105  INFO 30540 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$75152922] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 13:13:48.691  INFO 30540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 13:13:48.713  INFO 30540 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 13:13:48.714  INFO 30540 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 13:13:48.838  INFO 30540 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 13:13:48.839  INFO 30540 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2062 ms
2019-10-31 13:13:49.013  INFO 30540 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 13:13:49.300  INFO 30540 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 13:13:50.737  INFO 30540 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 13:13:50.865  INFO 30540 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 13:13:51.690  INFO 30540 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 13:13:51.759  INFO 30540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 13:13:51.763  INFO 30540 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.838 seconds (JVM running for 7.427)
2019-10-31 13:15:15.626  INFO 30540 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 13:15:15.627  INFO 30540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 13:15:15.640  INFO 30540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2019-10-31 13:15:15.686  INFO 30540 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 13:17:33.639 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:33.980 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:34.214 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:35.326 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:35.329 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:17:35.342 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:36.926 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:36.928 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:36.940 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:37.457 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:37.461 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:17:37.468 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:38.797 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:38.799 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:38.824 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:39.132 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:39.137 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:39.144 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:40.465 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:40.469 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:40.484 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:40.856 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:40.861 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:17:40.890 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:42.378 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:42.384 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:42.398 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:42.897 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:42.898 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:17:42.908 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:44.689 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:44.694 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:44.705 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:44.979 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:44.979 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:17:44.982 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:46.591 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:17:46.591 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:17:46.610 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:17:47.043 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:17:47.048 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:17:47.053 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:20:09.052 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:20:09.056 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:20:09.057 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:20:09.059 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:20:09.062 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:20:09.065 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:20:09.070 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:20:09.070 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:20:09.070 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:20:09.070 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:20:09.070 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:20:09.075 DEBUG 30540 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:20:09.083 DEBUG 30540 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:20:09.084 DEBUG 30540 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:20:09.085 DEBUG 30540 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:20:09.086 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:20:09.086 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:20:09.086 DEBUG 30540 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:20:09.090  INFO 30540 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:20:09.090  INFO 30540 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 293408
2019-10-31 13:21:40.982  INFO 30540 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:22:29.316 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:22:29.321 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:22:29.328 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:22:29.939 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:22:31.798 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:22:31.801 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:22:34.768 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:22:34.772 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:22:34.787 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:22:35.699 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:22:35.703 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:22:35.714 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:29:05.017 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:29:05.018 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:29:05.018 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:29:05.018 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:29:05.021 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:29:05.024 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:29:05.024 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:29:05.025 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:29:05.026 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:29:05.028 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:29:05.028 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:29:05.030 DEBUG 30540 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:29:05.031 DEBUG 30540 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:29:05.031 DEBUG 30540 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:29:05.031 DEBUG 30540 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:29:05.033 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:29:05.033 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:29:05.035 DEBUG 30540 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:29:05.036  INFO 30540 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:29:05.036  INFO 30540 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 444054
2019-10-31 13:29:07.415  INFO 30540 --- [Thread-20] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 13:29:07.415  INFO 30540 --- [Thread-20] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 13:29:07.440  INFO 30540 --- [Thread-20] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 13:29:51.882  INFO 6628 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 6628 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 13:29:51.884 DEBUG 6628 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 13:29:51.884  INFO 6628 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 13:29:51.975  INFO 6628 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 13:29:51.975  INFO 6628 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 13:29:52.708  INFO 6628 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 13:29:52.751  INFO 6628 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 32ms. Found 0 repository interfaces.
2019-10-31 13:29:53.114  INFO 6628 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8853d007] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 13:29:53.554  INFO 6628 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 13:29:53.641  INFO 6628 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 13:29:53.641  INFO 6628 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 13:29:53.749  INFO 6628 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 13:29:53.750  INFO 6628 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1775 ms
2019-10-31 13:29:53.905  INFO 6628 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 13:29:54.157  INFO 6628 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 13:29:55.416  INFO 6628 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 13:29:55.520  INFO 6628 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 13:29:56.572  INFO 6628 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 13:29:56.694  INFO 6628 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 13:29:56.696  INFO 6628 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.655 seconds (JVM running for 6.774)
2019-10-31 13:29:59.985  INFO 6628 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 13:29:59.986  INFO 6628 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 13:30:00.002  INFO 6628 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-10-31 13:30:00.039  INFO 6628 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 13:30:00.253 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.281 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.308 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.314 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.315 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:30:00.316 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.318 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.318 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.320 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.321 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.321 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:00.322 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.325 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.326 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.327 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.329 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.329 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.330 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.332 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.332 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.334 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.336 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.336 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:00.337 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.340 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.341 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.342 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.344 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.344 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:00.345 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.347 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.348 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.349 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.351 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.351 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:00.352 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.353 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:00.353 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:00.353 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.358 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:00.358 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:00.359 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:00.397 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:30:00.398 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:00.399 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:00.400 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:30:00.401 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:00.404 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:30:00.409 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:30:00.410 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:00.411 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:00.412 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:30:00.412 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:30:00.414 DEBUG 6628 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:30:00.422 DEBUG 6628 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:30:00.423 DEBUG 6628 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:30:00.424 DEBUG 6628 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:30:00.424 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:30:00.425 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:00.426 DEBUG 6628 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:30:00.427  INFO 6628 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:30:00.427  INFO 6628 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 392
2019-10-31 13:30:04.165  INFO 6628 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:30:04.171 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:04.171 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:04.173 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:04.176 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:04.176 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:04.178 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:04.180 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:04.180 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:04.181 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:04.183 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:04.185 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:04.186 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:04.187 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:30:04.187 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:04.188 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:04.188 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:30:04.189 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:04.191 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:30:04.192 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:30:04.192 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:04.193 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:04.194 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:30:04.195 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:30:04.196 DEBUG 6628 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:30:04.196 DEBUG 6628 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:30:04.197 DEBUG 6628 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:30:04.197 DEBUG 6628 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:30:04.198 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:30:04.198 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:04.199 DEBUG 6628 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:30:04.200  INFO 6628 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:30:04.200  INFO 6628 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 35
2019-10-31 13:30:06.326  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 13:30:06.334 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.334 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.335 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.339 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.339 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:30:06.345 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.347 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.348 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.350 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.352 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.352 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:06.354 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.356 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.357 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.358 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.360 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.360 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.361 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.363 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.363 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.365 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.367 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.367 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:06.367 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.378 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.379 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.381 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.383 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.383 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:06.383 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.386 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.387 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.387 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.390 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.390 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:06.391 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.394 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:06.395 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:06.396 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.401 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:06.401 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:06.402 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:06.404 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:30:06.404 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:06.405 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:06.406 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:30:06.407 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:06.408 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:30:06.409 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:30:06.409 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:06.410 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:06.411 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:30:06.411 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:30:06.413 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:30:06.414 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:30:06.414 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:30:06.415 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:30:06.415 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:30:06.415 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:06.417 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:30:06.418  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:30:06.418  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 92
2019-10-31 13:30:09.564  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:30:09.575 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:09.575 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:09.576 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:09.578 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:09.580 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:09.581 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:09.582 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:09.582 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:09.583 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:09.587 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:09.588 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:09.589 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:09.590 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:30:09.591 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:09.592 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:09.593 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:30:09.593 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:09.593 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:30:09.593 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:30:09.593 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:09.597 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:09.598 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:30:09.598 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:30:09.599 DEBUG 6628 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:30:09.601 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:30:09.601 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:30:09.601 DEBUG 6628 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:30:09.601 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:30:09.601 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:09.603 DEBUG 6628 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:30:09.605  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:30:09.605  INFO 6628 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 41
2019-10-31 13:30:11.367  INFO 6628 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 13:30:11.377 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.377 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.378 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.381 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.381 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:30:11.382 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.384 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.385 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.386 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.387 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.387 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:11.390 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.392 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.392 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.393 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.394 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.394 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.394 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.398 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.399 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.400 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.402 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.402 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:11.403 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.405 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.405 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.407 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.409 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.409 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:11.410 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.411 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.411 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.413 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.414 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.415 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:30:11.415 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.424 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:30:11.425 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:30:11.426 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.427 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:30:11.428 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:30:11.430 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:30:11.431 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:30:11.431 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:11.433 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:11.434 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:30:11.434 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:11.434 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:30:11.435 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:30:11.435 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:30:11.437 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:30:11.438 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:30:11.438 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:30:11.439 DEBUG 6628 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:30:11.440 DEBUG 6628 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:30:11.440 DEBUG 6628 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:30:11.441 DEBUG 6628 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:30:11.442 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:30:11.442 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:30:11.442 DEBUG 6628 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:30:11.444  INFO 6628 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:30:11.444  INFO 6628 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 77
2019-10-31 13:32:18.500  INFO 25244 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 25244 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 13:32:18.504 DEBUG 25244 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 13:32:18.504  INFO 25244 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 13:32:18.575  INFO 25244 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 13:32:18.575  INFO 25244 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 13:32:19.699  INFO 25244 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 13:32:19.773  INFO 25244 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2019-10-31 13:32:20.301  INFO 25244 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$175595cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 13:32:21.017  INFO 25244 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 13:32:21.159  INFO 25244 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 13:32:21.159  INFO 25244 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 13:32:21.283  INFO 25244 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 13:32:21.283  INFO 25244 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2707 ms
2019-10-31 13:32:21.443  INFO 25244 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 13:32:21.681  INFO 25244 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 13:32:22.844  INFO 25244 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 13:32:22.937  INFO 25244 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 13:32:23.578  INFO 25244 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 13:32:23.640  INFO 25244 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 13:32:23.640  INFO 25244 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 6.347 seconds (JVM running for 7.99)
2019-10-31 13:32:37.171  INFO 25244 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 13:32:37.172  INFO 25244 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 13:32:37.185  INFO 25244 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2019-10-31 13:32:37.206  INFO 25244 --- [http-nio-8080-exec-1] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 13:32:37.223  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 13:32:37.226  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 13:32:37.226  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 5
2019-10-31 13:32:42.396  INFO 25244 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@5fe95492]}
2019-10-31 13:32:42.557 DEBUG 25244 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 13:32:42.583 DEBUG 25244 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 13:32:42.607 DEBUG 25244 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 13:32:42.611  INFO 25244 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 13:32:42.611  INFO 25244 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 215
2019-10-31 13:32:42.626  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 13:32:42.628  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 13:32:42.628  INFO 25244 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 13:32:43.979  INFO 25244 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 13:32:44.009 DEBUG 25244 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 13:32:44.009 DEBUG 25244 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 13:32:44.010 DEBUG 25244 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 13:32:44.013 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 13:32:44.014 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:32:44.023 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 9
2019-10-31 13:32:44.028 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.028 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:44.030 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.032 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.032 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:44.033 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.035 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.035 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:32:44.037 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.039 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.039 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:44.040 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.042 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.042 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:44.043 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.045 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.046 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:44.047 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.049 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.049 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:44.050 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.053 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.053 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:32:44.054 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.055 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:44.056 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 8(Integer)
2019-10-31 13:32:44.057 DEBUG 25244 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:44.059 DEBUG 25244 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 13:32:44.060 DEBUG 25244 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 13:32:44.061 DEBUG 25244 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 13:32:44.062  INFO 25244 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 13:32:44.062  INFO 25244 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 83
2019-10-31 13:32:46.446  INFO 25244 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/25/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[25, {}]}
2019-10-31 13:32:46.447 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 13:32:46.448 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 25(Integer)
2019-10-31 13:32:46.449 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.451 DEBUG 25244 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 13:32:46.452 DEBUG 25244 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 8(Integer)
2019-10-31 13:32:46.455 DEBUG 25244 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 13:32:46.456 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 13:32:46.457 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 测试(String), 0(Integer), 8(Integer)
2019-10-31 13:32:46.458 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 13:32:46.468 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 13:32:46.469 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 7(Integer)
2019-10-31 13:32:46.471 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 13:32:46.473 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 13:32:46.473 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: java多线程(String), 1(Integer), 7(Integer)
2019-10-31 13:32:46.474 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 13:32:46.476 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 13:32:46.476 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 25(Integer)
2019-10-31 13:32:46.477 DEBUG 25244 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 13:32:46.572  INFO 25244 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 13:32:46.572  INFO 25244 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 126
2019-10-31 13:32:46.580  INFO 25244 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 13:32:46.581 DEBUG 25244 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 13:32:46.581 DEBUG 25244 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 13:32:46.582 DEBUG 25244 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 13:32:46.584 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 13:32:46.584 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:32:46.591 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 8
2019-10-31 13:32:46.593 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.594 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:46.595 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.597 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.597 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:46.598 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.600 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.600 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:32:46.601 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.604 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.604 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:46.605 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.607 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.607 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:32:46.608 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.609 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.610 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:46.611 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.613 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.613 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:32:46.614 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.615 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:32:46.616 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:32:46.617 DEBUG 25244 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:32:46.619 DEBUG 25244 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 13:32:46.619 DEBUG 25244 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 13:32:46.620 DEBUG 25244 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 13:32:46.621  INFO 25244 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 13:32:46.621  INFO 25244 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 41
2019-10-31 13:34:21.759  INFO 32364 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 32364 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 13:34:21.759 DEBUG 32364 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 13:34:21.759  INFO 32364 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 13:34:22.723  INFO 32364 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 13:34:22.809  INFO 32364 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 0 repository interfaces.
2019-10-31 13:34:23.301  INFO 32364 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c5970443] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 13:34:23.666  INFO 32364 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 13:34:24.096  INFO 32364 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 13:34:27.147  INFO 32364 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 13:34:27.284  INFO 32364 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 13:34:28.006  INFO 32364 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.946 seconds (JVM running for 8.312)
2019-10-31 13:34:30.087 DEBUG 32364 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 13:34:30.122 DEBUG 32364 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 24(Integer)
2019-10-31 13:34:30.153 DEBUG 32364 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:34:30.376  INFO 32364 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 13:34:30.380  INFO 32364 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 13:34:30.411  INFO 32364 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 13:35:03.387  INFO 32688 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 32688 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 13:35:03.389 DEBUG 32688 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 13:35:03.389  INFO 32688 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 13:35:03.515  INFO 32688 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 13:35:03.516  INFO 32688 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 13:35:04.285  INFO 32688 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 13:35:04.324  INFO 32688 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 27ms. Found 0 repository interfaces.
2019-10-31 13:35:04.675  INFO 32688 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ca04cb4b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 13:35:05.114  INFO 32688 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 13:35:05.188  INFO 32688 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 13:35:05.189  INFO 32688 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 13:35:05.292  INFO 32688 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 13:35:05.292  INFO 32688 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1776 ms
2019-10-31 13:35:05.441  INFO 32688 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 13:35:05.671  INFO 32688 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 13:35:06.819  INFO 32688 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 13:35:06.916  INFO 32688 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 13:35:07.584  INFO 32688 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 13:35:07.639  INFO 32688 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 13:35:07.643  INFO 32688 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 4.924 seconds (JVM running for 5.889)
2019-10-31 13:35:34.861  INFO 32688 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 13:35:34.861  INFO 32688 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 13:35:34.872  INFO 32688 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2019-10-31 13:35:34.904  INFO 32688 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 13:35:35.087 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.109 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.132 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.137 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.138 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.139 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.141 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.142 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.144 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.146 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.146 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:35.147 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.148 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.149 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.150 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.152 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.152 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:35.153 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.155 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.156 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.157 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.159 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.159 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:35:35.161 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.162 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.163 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.164 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.166 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.166 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:35.167 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.169 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.170 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.171 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.173 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.173 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.174 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.175 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:35.176 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.177 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.178 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:35.179 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:35.180 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:35.212 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:35:35.212 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:35.214 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:35.216 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:35:35.216 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:35.219 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:35:35.224 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:35:35.224 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:35.225 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:35.226 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:35:35.226 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:35:35.228 DEBUG 32688 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:35:35.235 DEBUG 32688 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:35:35.235 DEBUG 32688 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:35:35.236 DEBUG 32688 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:35:35.236 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:35:35.237 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:35.238 DEBUG 32688 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:35:35.240  INFO 32688 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:35:35.240  INFO 32688 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 339
2019-10-31 13:35:41.387  INFO 32688 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 13:35:41.394 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:41.394 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:41.395 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:41.398 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:41.398 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:35:41.399 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:41.401 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:35:41.401 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:41.402 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:41.403 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:35:41.403 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:41.405 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:35:41.407 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:35:41.407 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:41.408 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:41.409 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:35:41.409 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:35:41.410 DEBUG 32688 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:35:41.411 DEBUG 32688 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:35:41.411 DEBUG 32688 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:35:41.412 DEBUG 32688 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:35:41.412 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:35:41.413 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:41.415 DEBUG 32688 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:35:41.416  INFO 32688 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:35:41.416  INFO 32688 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 29
2019-10-31 13:35:46.476  INFO 32688 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 13:35:46.485 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.485 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.486 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.488 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.488 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.489 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.491 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.491 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.492 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.495 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.495 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:46.496 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.498 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.499 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.500 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.501 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.502 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:46.503 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.504 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.505 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.506 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.507 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.507 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 13:35:46.508 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.510 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.510 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.511 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.514 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.515 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 13:35:46.516 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.522 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.522 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.523 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.524 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.525 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.527 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.528 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 13:35:46.529 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.530 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.531 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 13:35:46.532 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 13:35:46.533 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 13:35:46.534 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 13:35:46.534 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:46.535 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:46.535 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 13:35:46.536 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:46.537 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 13:35:46.537 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 13:35:46.538 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 13:35:46.538 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 13:35:46.539 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 13:35:46.539 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 13:35:46.541 DEBUG 32688 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 13:35:46.542 DEBUG 32688 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 13:35:46.542 DEBUG 32688 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 13:35:46.543 DEBUG 32688 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 13:35:46.543 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 13:35:46.544 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 13:35:46.545 DEBUG 32688 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 13:35:46.547  INFO 32688 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 13:35:46.547  INFO 32688 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 71
2019-10-31 14:33:58.589  INFO 10704 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 10704 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 14:33:58.590 DEBUG 10704 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 14:33:58.590  INFO 10704 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 14:33:58.670  INFO 10704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 14:33:58.670  INFO 10704 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 14:33:59.376  INFO 10704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 14:33:59.417  INFO 10704 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2019-10-31 14:33:59.790  INFO 10704 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1daceed8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 14:34:00.257  INFO 10704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 14:34:00.339  INFO 10704 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 14:34:00.339  INFO 10704 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 14:34:00.452  INFO 10704 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 14:34:00.452  INFO 10704 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1782 ms
2019-10-31 14:34:00.605  INFO 10704 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 14:34:00.848  INFO 10704 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 14:34:02.096  INFO 10704 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 14:34:02.199  INFO 10704 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 14:34:02.983  INFO 10704 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 14:34:03.055  INFO 10704 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 14:34:03.055  INFO 10704 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.153 seconds (JVM running for 6.616)
2019-10-31 14:34:55.954  INFO 10704 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 14:34:55.955  INFO 10704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 14:34:55.971  INFO 10704 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-10-31 14:34:56.005  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:34:56.390 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:34:56.415 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:34:56.441 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:34:56.446 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:34:56.447 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:34:56.450 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:34:56.456 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:34:56.456 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:34:56.458 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:34:56.459 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:34:56.459 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:34:56.462 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:34:56.477 DEBUG 10704 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:34:56.477 DEBUG 10704 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:34:56.479 DEBUG 10704 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:34:56.479 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:34:56.479 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:34:56.481 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:34:56.483  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:34:56.483  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 481
2019-10-31 14:35:03.099  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/16', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[16, {}]}
2019-10-31 14:35:03.101 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:35:03.101 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 16(Integer)
2019-10-31 14:35:03.106 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:35:03.146 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:35:03.147 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:35:03.147 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:35:03.151 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:35:03.151 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:35:03.152 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:35:03.154 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 14:35:03.154 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 6(Integer)
2019-10-31 14:35:03.155 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 14:35:03.156  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 14:35:03.156  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 57
2019-10-31 14:38:28.966  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:38:29.101 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:38:29.102 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:29.104 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:29.106 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:38:29.107 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:29.109 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:29.110 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:38:29.111 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:38:29.113 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:38:29.114 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:38:29.114 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:38:29.116 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:38:29.117 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:38:29.118 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:38:29.119 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:38:29.120 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:38:29.121 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:38:29.123 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:38:29.126 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:38:29.126 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:38:29.127 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:38:29.127 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:38:29.127 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:38:29.129 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:38:29.130  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:38:29.130  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 164
2019-10-31 14:38:32.401  INFO 10704 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/16', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[16, {}]}
2019-10-31 14:38:32.402 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:38:32.403 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 16(Integer)
2019-10-31 14:38:32.407 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:32.410 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:38:32.410 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:32.412 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:32.414 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:38:32.414 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:32.415 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:32.417 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 14:38:32.418 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 6(Integer)
2019-10-31 14:38:32.420 DEBUG 10704 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 14:38:32.421  INFO 10704 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 14:38:32.421  INFO 10704 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 20
2019-10-31 14:38:58.290  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:38:58.477 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:38:58.478 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:58.481 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:58.486 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:38:58.487 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:38:58.490 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:58.495 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:38:58.495 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:58.498 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:58.502 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:38:58.503 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:38:58.506 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:38:58.509 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:38:58.509 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:38:58.511 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:38:58.512 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:38:58.513 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:38:58.515 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:38:58.515 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:38:58.516 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:38:58.521 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:38:58.522 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:38:58.523 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:38:58.525 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:38:58.526 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:38:58.526 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:38:58.527 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:38:58.527 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:38:58.527 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:38:58.529 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:38:58.531  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:38:58.531  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 241
2019-10-31 14:41:11.109  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:41:11.342 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.343 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.345 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.350 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.350 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.352 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.354 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.354 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.356 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.358 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.358 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:11.359 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.361 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.361 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.363 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.365 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.365 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:11.366 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.368 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.369 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.370 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.373 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.373 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:11.374 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.376 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.377 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.378 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.379 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.380 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:11.381 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.385 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.385 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.386 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.395 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.396 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.396 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.398 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:11.398 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.399 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.401 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:11.401 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:11.402 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:11.403 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:11.404 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:11.405 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:11.407 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:11.407 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:11.409 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:11.409 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:11.410 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:11.410 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:11.411 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:11.411 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:11.412 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:11.413 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:11.413 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:11.414 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:11.414 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:11.415 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:11.416 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:11.418  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:11.418  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 309
2019-10-31 14:41:14.638  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 14:41:14.752 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:14.752 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:14.754 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:14.755 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:14.756 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:14.756 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:14.758 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:14.758 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:14.759 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:14.760 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:14.761 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:14.762 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:14.763 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:14.763 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:14.764 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:14.765 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:14.765 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:14.766 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:14.767 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:14.767 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:14.768 DEBUG 10704 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:14.768 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:14.769 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:14.770 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:14.771  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:14.771  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 133
2019-10-31 14:41:17.057  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 14:41:17.225 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.226 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.229 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.233 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.233 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.235 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.240 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.241 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.243 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.247 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.248 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:17.249 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.253 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.254 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.259 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.262 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.262 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:17.263 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.265 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.265 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.266 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.268 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.268 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:17.269 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.271 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.271 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.272 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.274 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.274 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:17.275 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.277 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.277 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.278 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.280 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.280 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.281 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.282 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:17.282 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.283 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.285 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:17.285 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:17.286 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:17.287 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:17.287 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:17.288 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:17.289 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:17.289 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:17.290 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:17.290 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:17.291 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:17.291 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:17.292 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:17.292 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:17.293 DEBUG 10704 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:17.294 DEBUG 10704 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:17.295 DEBUG 10704 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:17.296 DEBUG 10704 --- [http-nio-8080-exec-9] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:17.296 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:17.296 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:17.297 DEBUG 10704 --- [http-nio-8080-exec-9] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:17.298  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:17.298  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 241
2019-10-31 14:41:18.653  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:41:18.821 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.821 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.823 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.827 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.827 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.830 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.833 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.833 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.835 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.838 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.838 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:18.840 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.843 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.843 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.845 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.849 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.849 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:18.851 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.853 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.853 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.854 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.856 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.856 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:18.857 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.858 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.859 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.859 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.861 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.861 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:18.862 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.864 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.864 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.865 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.866 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.867 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.867 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.869 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:18.869 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.870 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.871 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:18.872 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:18.873 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:18.874 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:18.874 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:18.875 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:18.876 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:18.877 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:18.877 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:18.878 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:18.878 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:18.879 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:18.880 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:18.880 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:18.881 DEBUG 10704 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:18.882 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:18.882 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:18.882 DEBUG 10704 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:18.883 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:18.883 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:18.884 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:18.884  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:18.884  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 231
2019-10-31 14:41:20.364  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TypeShowController.typesPage', args=[null, -1, {}]}
2019-10-31 14:41:20.369 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:20.369 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:20.369 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:20.370 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:20.371 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:20.374 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:20.376 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.377 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.377 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.379 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.379 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.380 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.381 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.381 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.382 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.383 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.384 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:20.384 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.386 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.386 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.387 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.388 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.388 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:20.389 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.391 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.391 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.392 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.393 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.394 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:20.394 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.396 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.396 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.397 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.398 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.398 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:20.399 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.400 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.401 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.402 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.403 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.403 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.404 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.405 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:20.405 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.406 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.408 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:20.408 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:20.409 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:20.410 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc 
2019-10-31 14:41:20.410 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 
2019-10-31 14:41:20.411 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:20.411  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : types
2019-10-31 14:41:20.411  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 47
2019-10-31 14:41:21.650  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagShowController.tagsPage', args=[null, -1, {}]}
2019-10-31 14:41:21.653 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:21.653 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:21.654 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:21.657 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:21.658 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:21.664 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:21.670 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.670 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.671 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.673 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.673 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.675 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.677 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.677 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.678 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.679 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.680 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:21.680 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.682 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.682 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.683 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.684 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.684 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:21.685 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.686 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.686 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.687 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.690 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.690 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:21.692 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.694 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.694 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.695 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.697 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.698 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:21.698 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.699 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.699 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.700 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.701 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.701 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.702 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.704 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:21.704 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.705 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.706 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:21.707 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:21.708 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:21.710 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc 
2019-10-31 14:41:21.710 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 
2019-10-31 14:41:21.711 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:21.711  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : tags
2019-10-31 14:41:21.711  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 61
2019-10-31 14:41:22.111  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagShowController.tagsPage', args=[null, -1, {}]}
2019-10-31 14:41:22.112 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:22.112 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:22.113 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:22.114 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:22.115 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:22.117 DEBUG 10704 --- [http-nio-8080-exec-2] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:22.118 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.118 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.119 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.120 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.120 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.120 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.121 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.122 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.122 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.125 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.125 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.126 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.127 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.128 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.129 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.130 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.131 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.131 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.133 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.133 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.134 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.135 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.135 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:22.135 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.135 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.135 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.136 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.137 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.137 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.137 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.138 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.139 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.141 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.143 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.143 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.143 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.145 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.145 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.146 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.147 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.147 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.147 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.148 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc 
2019-10-31 14:41:22.148 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 
2019-10-31 14:41:22.149 DEBUG 10704 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:22.149  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : tags
2019-10-31 14:41:22.149  INFO 10704 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 38
2019-10-31 14:41:22.527  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TypeShowController.typesPage', args=[null, -1, {}]}
2019-10-31 14:41:22.528 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:22.528 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:22.529 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:22.530 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:22.531 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:22.533 DEBUG 10704 --- [http-nio-8080-exec-1] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:22.534 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.534 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.535 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.535 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.536 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.541 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.542 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.543 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.543 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.545 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.545 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.546 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.546 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.546 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.547 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.548 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.548 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.549 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.550 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.550 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.551 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.551 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.551 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:22.552 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.553 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.553 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.553 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.554 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.554 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:22.555 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.557 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.557 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.557 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.559 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.559 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.560 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.561 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:22.561 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.562 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.563 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:22.563 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:22.563 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:22.564 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc 
2019-10-31 14:41:22.564 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 
2019-10-31 14:41:22.565 DEBUG 10704 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:22.565  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : types
2019-10-31 14:41:22.565  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 38
2019-10-31 14:41:22.893  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:41:23.065 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.066 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.067 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.070 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.070 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.071 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.075 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.075 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.078 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.082 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.082 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:23.083 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.084 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.084 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.085 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.086 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.086 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:23.087 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.088 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.089 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.091 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.093 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.093 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:23.094 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.095 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.095 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.096 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.097 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.098 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:23.098 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.100 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.100 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.101 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.102 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.102 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.103 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.104 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:23.104 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.105 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.107 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:23.107 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:23.108 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:23.110 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:23.110 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:23.111 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:23.111 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:23.112 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:23.112 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:23.113 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:23.113 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:23.113 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:23.114 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:23.114 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:23.115 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:23.115 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:23.116 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:23.116 DEBUG 10704 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:23.116 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:23.116 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:23.117 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:23.118  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:23.118  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 225
2019-10-31 14:41:24.224  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/types/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TypeShowController.typesPage', args=[null, -1, {}]}
2019-10-31 14:41:24.225 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:24.225 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:24.226 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:24.228 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:24.228 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:24.230 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:24.231 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.231 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.232 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.233 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.233 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.234 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.235 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.236 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.236 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.239 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.239 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.240 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.242 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.242 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.243 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.244 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.244 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.245 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.246 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.246 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.247 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.248 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.248 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:24.248 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.249 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.249 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.250 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.251 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.251 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.252 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.253 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.253 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.255 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.257 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.257 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.258 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.260 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.260 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.261 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.262 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.262 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.263 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc 
2019-10-31 14:41:24.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 
2019-10-31 14:41:24.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:24.265  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : types
2019-10-31 14:41:24.265  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 41
2019-10-31 14:41:24.901  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/tags/-1', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagShowController.tagsPage', args=[null, -1, {}]}
2019-10-31 14:41:24.901 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:41:24.902 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectBlogByTimeDesc_COUNT       : ==> Parameters: 
2019-10-31 14:41:24.902 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectBlogByTimeDesc_COUNT       : <==      Total: 1
2019-10-31 14:41:24.904 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==>  Preparing: select * from blog Order By update_time Desc limit ?,? 
2019-10-31 14:41:24.904 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.selectBlogByTimeDesc  : ==> Parameters: 0(Integer), 7(Integer)
2019-10-31 14:41:24.906 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.BlogMapper.selectBlogByTimeDesc  : <==      Total: 7
2019-10-31 14:41:24.907 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.907 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.908 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.909 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.910 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.911 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.913 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.913 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.913 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.914 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.915 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.915 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.916 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.916 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.917 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.918 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.918 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.919 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.920 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.920 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.921 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.923 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.923 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:24.924 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.926 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.926 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.927 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.928 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.928 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:24.929 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.930 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.930 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.930 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.931 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.931 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.932 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.933 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:24.933 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.933 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.934 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:24.935 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:24.935 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:24.936 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc 
2019-10-31 14:41:24.936 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 
2019-10-31 14:41:24.938 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:24.938  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : tags
2019-10-31 14:41:24.938  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 37
2019-10-31 14:41:25.766  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.ArchivesController.archives', args=[{}]}
2019-10-31 14:41:25.770 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.selectAllYears    : ==>  Preparing: select DATE_FORMAT(update_time,'%Y') as year from blog Group by YEAR order by year desc; 
2019-10-31 14:41:25.771 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.selectAllYears    : ==> Parameters: 
2019-10-31 14:41:25.774 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.selectAllYears    : <==      Total: 1
2019-10-31 14:41:25.775 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.selectBolyGroupByYear   : ==>  Preparing: SELECT * FROM blog WHERE DATE_FORMAT(update_time, '%Y') = ? ORDER BY update_time DESC; 
2019-10-31 14:41:25.776 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.selectBolyGroupByYear   : ==> Parameters: 2019(String)
2019-10-31 14:41:25.780 DEBUG 10704 --- [http-nio-8080-exec-10] c.p.d.BlogMapper.selectBolyGroupByYear   : <==      Total: 8
2019-10-31 14:41:25.789 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.countByExample    : ==>  Preparing: select count(*) from blog 
2019-10-31 14:41:25.789 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.countByExample    : ==> Parameters: 
2019-10-31 14:41:25.790 DEBUG 10704 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.countByExample    : <==      Total: 1
2019-10-31 14:41:25.790  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : archives
2019-10-31 14:41:25.790  INFO 10704 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 24
2019-10-31 14:41:27.366  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.about', args=[]}
2019-10-31 14:41:27.366  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : about
2019-10-31 14:41:27.366  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 0
2019-10-31 14:41:29.838  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:41:30.006 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.007 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.008 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.012 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.012 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.013 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.017 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.018 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.019 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.022 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.023 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:30.024 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.026 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.027 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.028 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.031 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.031 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:30.032 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.036 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.036 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.037 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.040 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.041 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:41:30.042 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.044 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.044 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.045 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.047 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.047 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:41:30.047 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.049 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.049 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.050 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.052 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.052 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.053 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.054 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:41:30.054 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.055 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.056 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:41:30.056 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:41:30.057 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:41:30.058 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:41:30.058 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:30.059 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:30.060 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:41:30.060 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:30.061 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:41:30.061 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:41:30.061 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:41:30.062 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:41:30.062 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:41:30.062 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:41:30.063 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:41:30.064 DEBUG 10704 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:41:30.064 DEBUG 10704 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:41:30.065 DEBUG 10704 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:41:30.065 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:41:30.065 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:41:30.066 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:41:30.066  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:41:30.066  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 228
2019-10-31 14:42:05.819  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 14:42:05.997 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:42:05.997 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:42:05.998 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:05.999 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:06.000 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:42:06.000 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:06.001 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:42:06.001 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:42:06.002 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:42:06.003 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:42:06.003 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:42:06.004 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:42:06.004 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:42:06.004 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:42:06.012 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:42:06.013 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:42:06.013 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:42:06.013 DEBUG 10704 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:42:06.014 DEBUG 10704 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:42:06.014 DEBUG 10704 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:42:06.015 DEBUG 10704 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:42:06.015 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:42:06.015 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:42:06.016 DEBUG 10704 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:42:06.017  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:42:06.017  INFO 10704 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 198
2019-10-31 14:42:25.130  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 14:42:25.137  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 14:42:25.137  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 7
2019-10-31 14:42:31.645  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@777038b4]}
2019-10-31 14:42:31.650 DEBUG 10704 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 14:42:31.650 DEBUG 10704 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 14:42:31.651 DEBUG 10704 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 14:42:31.653  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 14:42:31.653  INFO 10704 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 14:42:31.667  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index;jsessionid=039521E324C93944E3844FC9D7F170C5', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 14:42:31.669  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 14:42:31.669  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 14:42:35.245  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 14:42:35.249 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:42:35.250 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 14:42:35.251 DEBUG 10704 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 14:42:35.253 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 14:42:35.253 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:42:35.255 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 8
2019-10-31 14:42:35.257 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.257 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:42:35.257 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.259 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.259 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:42:35.260 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.261 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.261 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:42:35.262 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.262 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.262 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:42:35.263 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:42:35.264 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.266 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.266 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:42:35.266 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.267 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.268 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:42:35.268 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.269 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:42:35.270 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:42:35.270 DEBUG 10704 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:42:35.273 DEBUG 10704 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:42:35.273 DEBUG 10704 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:42:35.274 DEBUG 10704 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:42:35.275  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 14:42:35.275  INFO 10704 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 30
2019-10-31 14:42:39.065  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 14:42:39.066 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 14:42:39.066 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 14:42:39.067 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 14:42:39.069 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:42:39.070 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:42:39.070 DEBUG 10704 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:42:39.071  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 14:42:39.071  INFO 10704 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 6
2019-10-31 14:49:16.283  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis回顾一', description='mybatis一些问题以及源码依据或官网根据,自定义typehandler，自定义plugin......', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='## 一.xml和annotation同时使用哪个会生效

当xml和annotation同时作用于同一个接口的方法时,annotation会生效,原因看下面源码的分析:

#### 这里的关键类是:org.apache.ibatis.builder.annotation.MapperAnnotationBuilder,里面有一个方法

#### parse():用来解析dao的接口
```java
     public void parse() {
        //获取所有dao接口的全限定类名
        String resource = type.toString();
        if (!configuration.isResourceLoaded(resource)) {
          //解析xml配置文件
          loadXmlResource();
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //解析出方法注解上面的statement语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        parsePendingMethods();
      }
```


由此可见,在解析annotation的之前,已经有个loadXmlResource();方法去解析xml的mapper文件,也就是如果xml存在,后面解析annotation得到的sql会将其覆盖.



### 二.使用annotation时没有xml为什么不会报错?
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //获取当前<mapper/>标签下面扫描包的xml映射文件
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不在接口的包下面,则去找classpath下面的xml文件
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          //找到的话就去解析对应的sql语句
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            xmlParser.parse();
          }
        }
      }
```


这里没有报错的原因是,当xml文件不存在的时候,Resources.getResourceAsStream的方法抛出的异常被catch捕获到并且没有作任何处理,所以没有报错



三.接着上面的那个方法来说明一个坑:

当mybatis主配置文件使用如下方式来指定mapper文件位置时:

        <!-- 注册映射文件 -->
        <mappers>
            <package name="com.pan.dao"/>
        </mappers>



会出现一个严重的错误:无论你的mapper文件是放在同包下面,并且没有路径出错的问题时,mybatis依然会报错说没有绑定对应的sql语句,原因是使用maven建立mybatis项目时,maven工程会忽略掉src/main/java下面的所有资源,然后可以利用上面的loadXmlResource()方法进行解释出错的原因.
```java
      
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //程序来到这里时,会获取该包下面的xml文件的名称
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          //2.但是来到这里发现文件是不存在的,由于maven的原因
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不在接口的包下面,则去找classpath下面的xml文件
              //3.又来到classpath路径下找相同名称的xml文件,发现还是没有
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          //找到的话就去解析对应的sql语句
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            xmlParser.parse();
          }
        }
         //4.没有解析xml文件,sql都没有解析,方法就完成了,也就是没有进行sql的绑定.
      }
```
原因:没有解析xml文件,sql都没有解析,方法就完成了,也就是没有进行sql的绑定.



解决方案:
```pom
        <build>
            <resources>
                <resource>
                    <directory>src/main/java</directory>
                    <includes>
                        <include>**/*.properties</include>
                        <include>**/*.xml</include>
                    </includes>
                    <filtering>false</filtering>
                </resource>
                <!-- 如果不添加这个src/main/resources文件夹将消失,但没关系,看个人需要 -->
                <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                        <include>**/*.properties</include>
                        <include>**/*.xml</include>
                    </includes>
                    <filtering>false</filtering>
                </resource>
            </resources>
        </build>
```




### 四.解析 完的xml主配置文件到哪里去了?

在mybatis中有一个类用于存放主配置信息:org.apache.ibatis.session.Configuration,在主配置文件解析完以后,就会将信息存放到该对象中,成员变量就是标签对应的属性.
```java
    public class Configuration {
    
      protected Environment environment;
    
      protected boolean safeRowBoundsEnabled;
      protected boolean safeResultHandlerEnabled = true;
      protected boolean mapUnderscoreToCamelCase;
      protected boolean aggressiveLazyLoading;
      protected boolean multipleResultSetsEnabled = true;
      protected boolean useGeneratedKeys;
      protected boolean useColumnLabel = true;
      protected boolean cacheEnabled = true;
      protected boolean callSettersOnNulls;
      protected boolean useActualParamName = true;
      protected boolean returnInstanceForEmptyRow;
    
      protected String logPrefix;
      protected Class<? extends Log> logImpl;
      protected Class<? extends VFS> vfsImpl;
      protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;
      protected JdbcType jdbcTypeForNull = JdbcType.OTHER;
      protected Set<String> lazyLoadTriggerMethods = new HashSet<>(Arrays.asList("equals", "clone", "hashCode", "toString"));
      protected Integer defaultStatementTimeout;
      protected Integer defaultFetchSize;
      protected ResultSetType defaultResultSetType;
      protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;
      protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;
      protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;
    
      protected Properties variables = new Properties();
      protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();
      protected ObjectFactory objectFactory = new DefaultObjectFactory();
      protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();
    
      protected boolean lazyLoadingEnabled = false;
      protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL
    
      protected String databaseId;
      /**
       * Configuration factory class.
       * Used to create Configuration for loading deserialized unread properties.
       *
       * @see <a href='https://code.google.com/p/mybatis/issues/detail?id=300'>Issue 300 (google code)</a>
       */
      protected Class<?> configurationFactory;
    
      protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
      protected final InterceptorChain interceptorChain = new InterceptorChain();
      protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();
      protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();
      protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();
    
      protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>("Mapped Statements collection")
          .conflictMessageProducer((savedValue, targetValue) ->
              ". please check " + savedValue.getResource() + " and " + targetValue.getResource());
      protected final Map<String, Cache> caches = new StrictMap<>("Caches collection");
      protected final Map<String, ResultMap> resultMaps = new StrictMap<>("Result Maps collection");
      protected final Map<String, ParameterMap> parameterMaps = new StrictMap<>("Parameter Maps collection");
      protected final Map<String, KeyGenerator> keyGenerators = new StrictMap<>("Key Generators collection");
    
      protected final Set<String> loadedResources = new HashSet<>();
      protected final Map<String, XNode> sqlFragments = new StrictMap<>("XML fragments parsed from previous mappers");
    
      protected final Collection<XMLStatementBuilder> incompleteStatements = new LinkedList<>();
      protected final Collection<CacheRefResolver> incompleteCacheRefs = new LinkedList<>();
      protected final Collection<ResultMapResolver> incompleteResultMaps = new LinkedList<>();
      protected final Collection<MethodResolver> incompleteMethods = new LinkedList<>();
    }
```


### 五.自定义的typeHandle(类型处理器)

官方对typeHandle的定义:

Whenever MyBatis sets a parameter on a PreparedStatement or retrieves a value from a ResultSet, a TypeHandler is used to retrieve the value in a means appropriate to the Java type. The following table describes the default TypeHandlers.



自定义typeHandle的实现:

You can override the type handlers or create your own to deal with unsupported or non-standard types. To do so, implement the interface org.apache.ibatis.type.TypeHandler or extend the convenience class org.apache.ibatis.type.BaseTypeHandler and optionally map it to a JDBC type. 

继承BaseTypeHandler<T>:
```java
    // ExampleTypeHandler.java
    @MappedJdbcTypes(JdbcType.VARCHAR)
    public class ExampleTypeHandler extends BaseTypeHandler<String> {
    
      @Override
      public void setNonNullParameter(PreparedStatement ps, int i,
        String parameter, JdbcType jdbcType) throws SQLException {
        ps.setString(i, parameter);
      }
    
      @Override
      public String getNullableResult(ResultSet rs, String columnName)
        throws SQLException {
        return rs.getString(columnName);
      }
    
      @Override
      public String getNullableResult(ResultSet rs, int columnIndex)
        throws SQLException {
        return rs.getString(columnIndex);
      }
    
      @Override
      public String getNullableResult(CallableStatement cs, int columnIndex)
        throws SQLException {
        return cs.getString(columnIndex);
      }
    }
```


主配置文件中:
```xml
    	<!--导入自定义的typeHandle-->
    	<typeHandlers>
    		<typeHandler handler="com.pan.handler.MyHandler"/>
    	</typeHandlers>
```


同时也可以在resultMap中使用:
```xml
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid" jdbcType="INTEGER"/>
    		<!--如果这里标签里面加入了jdbcType的话,MyHandle里面的@MappedJdbcTypes中的配置jdbc类型则忽略-->
    		<result column="cname" property="cname" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
    		<!-- 与上面的作用一样
    			<result column="cname" property="cname"  typeHandler="com.pan.handler.MyHandler"/>
    		-->
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>

```

在与spring整合时使用的sqlSessionFactory是org.mybatis.spring.SqlSessionFactoryBean，此时要注册自定义的TypeHandler，只需要把自定义的handler往这个bean里面丢（setTypeHandlers()/setTypeHandlersPackage()）



### 六.自定义插件(plugins):

MyBatis allows you to intercept calls to at certain points within the execution of a mapped statement. By default, MyBatis allows plug-ins to intercept method calls of:

- Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
- ParameterHandler (getParameterObject, setParameters)
- ResultSetHandler (handleResultSets, handleOutputParameters)
- StatementHandler (prepare, parameterize, batch, update, query)

How to do?

Using plug-ins is pretty simple given the power they provide. Simply implement the Interceptor interface, being sure to specify the signatures you want to intercept.
```java
    // ExamplePlugin.java
    @Intercepts({@Signature(
      type= Executor.class,
      method = "update",
      args = {MappedStatement.class,Object.class})})
    public class ExamplePlugin implements Interceptor {
      private Properties properties = new Properties();
      public Object intercept(Invocation invocation) throws Throwable {
        // implement pre processing if need
        Object returnObject = invocation.proceed();
        // implement post processing if need
        return returnObject;
      }
      public void setProperties(Properties properties) {
        this.properties = properties;
      }
    }
```
```xml
    <!-- mybatis-config.xml -->
    <plugins>
      <plugin interceptor="org.mybatis.example.ExamplePlugin">
        <property name="someProperty" value="100"/>
      </plugin>
    </plugins>
```
The plug-in above will intercept all calls to the "update" method on the Executor instance, which is an internal object responsible for the low level execution of mapped statements.

第二种方法:

除了用插件来修改 MyBatis 核心行为之外，还可以通过完全覆盖配置类来达到目的。只需继承后覆盖其中的每个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会严重影响 MyBatis 的行为，务请慎之又慎。



### 七.在关联查询里是怎么实现执行第二句select语句的

在使用了关联查询之后，会有这么一个问题，我们调用的mapper方法只是查询第一条select语句，其关联部分的select语句到底是怎么执行的？为什么会执行？什么时候执行？

下面直接使用源码解释上面的问题，注意：为了使演示明显，我们开启了lazyload，关于lazyload的信息也在上面的地址有
在mybatis里有这么一个类org.apache.ibatis.executor.resultset.DefaultResultSetHandler，我们来关注里面这么一个方法 getPropertyMappingValue() nested：嵌套
#### 在看getPropertyMappingValue()方法的源代码之前，我们有必要先模拟出一个mapper文件里的resultMap，如下：
```xml
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid" jdbcType="INTEGER"/>
    		<!--如果这里标签里面加入了jdbcType的话,MyHandle里面的@MappedJdbcTypes中的配置jdbc类型则忽略-->
    		<result column="cname" property="cname" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
    		<!-- 与上面的作用一样
    			<result column="cname" property="cname"  typeHandler="com.pan.handler.MyHandler"/>
    		-->
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>
```
#### 下面是我们getPropertyMappingValue()方法的源代码。我们将模拟运行情况：
```java
    private Object getPropertyMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)
          throws SQLException {
    	//判断是否存在嵌套查询ID（说白了就是判断上面resultMap的子标签里是否存在select="selectParentById"）
    	if (propertyMapping.getNestedQueryId() != null) {
    	//存在嵌套查询id：namespace.selectParentById
    	//当然，id，name并不存在nestedQueryId，只有到了parent才会进来这个方法
    	//我们来看看这个方法的实现，该代码框里下方的代码暂时不重要了，看下一个代码块
    	return getNestedQueryMappingValue(rs, metaResultObject, propertyMapping, lazyLoader, columnPrefix);
    	} else if (propertyMapping.getResultSet() != null) {
    		addPendingChildRelation(rs, metaResultObject, propertyMapping);   // TODO is that OK?
    		return DEFERRED;
    	} else {
    		final TypeHandler<?> typeHandler = propertyMapping.getTypeHandler();
    		final String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);
    		return typeHandler.getResult(rs, column);
    	}
    }
    private Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)
          throws SQLException {
        ...这些代码就省略了，暂时不重要
    	if (propertyMapping.isLazy()) {
    		//重要的是这一句！！
    		//往lazyLoader(ResultLoaderMap)里丢loader，包含了关联加载的各种信息
    		lazyLoader.addLoader(property, metaResultObject, resultLoader);
    		value = DEFERRED;
    	} else {
    		value = resultLoader.loadResult();
    	}
    	...这些代码就省略了，暂时不重要
    return value;
    }
```
到了这里我们可以推断出，mybatis关联查询的lazyload的是通过一个lazyLoader(Map)来实现的。大概流程如下，查询了第一个select语句后，把关联查询的语句暂时保存在一个map中。在真正需要的时候再来调用（这里默认将的是深度延迟加载，具体看上面的链接）。
接下来我们来验证上面的说法，思路很简单，既然mybatis向map中addLoader，那么在真正使用的时候肯定会取出来。所以我们来到这个map的实现类ResultLoaderMap来看一下他的方法  



分析如何执行延时加载的select语句:

当调用关联对象的get()方法时,会调用org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory的invoke方法:
```java
    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {
          final String methodName = method.getName();
          try {
            synchronized (lazyLoader) {
              if (WRITE_REPLACE_METHOD.equals(methodName)) {
                Object original;
                if (constructorArgTypes.isEmpty()) {
                  original = objectFactory.create(type);
                } else {
                  original = objectFactory.create(type, constructorArgTypes, constructorArgs);
                }
                PropertyCopier.copyBeanProperties(type, enhanced, original);
                if (lazyLoader.size() > 0) {
                  return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);
                } else {
                  return original;
                }
              } else {
                //lazyLoader是一个ResultLoaderMap
                //这里判断map中是否存在键值对
                if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
                  if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                    //到这里进行所有的map里面的键值对的load方法
                    lazyLoader.loadAll();
                  } else if (PropertyNamer.isSetter(methodName)) {
                    final String property = PropertyNamer.methodToProperty(methodName);
                    lazyLoader.remove(property);
                  } else if (PropertyNamer.isGetter(methodName)) {
                    final String property = PropertyNamer.methodToProperty(methodName);
                    if (lazyLoader.hasLoader(property)) {
                      lazyLoader.load(property);
                    }
                  }
                }
              }
            }
            return methodProxy.invoke(enhanced, args);
          } catch (Throwable t) {
            throw ExceptionUtil.unwrapThrowable(t);
          }
        }
      }
```


### loadAll():
```java
    public void loadAll() throws SQLException {
        final Set<String> methodNameSet = loaderMap.keySet();
        String[] methodNames = methodNameSet.toArray(new String[methodNameSet.size()]);
        for (String methodName : methodNames) {
          load(methodName);
        }
      }


      public boolean load(String property) throws SQLException {
        LoadPair pair = loaderMap.remove(property.toUpperCase(Locale.ENGLISH));
        if (pair != null) {
    	  //上面从map移除key，拿这里应该就是进行查询了，跟进去看看
          pair.load();
          return true;
        }
        return false;
      }
```
是一个方法调用，继续跟进
```java
    this.load(null);
```
进来后这个方法的底部有这么一句代码
```java
    //有setValue还有loadResult()
    //你懂的，进去进去
    this.metaResultObject.setValue(property, this.resultLoader.loadResult());
```
进来loadResult()方法，代码如下：selectList()，讲道理到这里就可以完了，但是还是进去瞅下
```java
      public Object loadResult() throws SQLException {
        List<Object> list = selectList();
        resultObject = resultExtractor.extractObjectFromList(list, targetType);
        return resultObject;
      }
```
### 进入selectList()
```java
      private <E> List<E> selectList() throws SQLException {
        Executor localExecutor = executor;
        if (Thread.currentThread().getId() != this.creatorThreadId || localExecutor.isClosed()) {
          localExecutor = newExecutor();
        }
        try {
    	  //return + query方法，到了这里就不再继续跟进了，已经够了
          return localExecutor.<E> query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
        } finally {
          if (localExecutor != executor) {
            localExecutor.close(false);
          }
        }
      }
```
从selectList()方法出来后就执行setValue方法，剩下的就不说了。这里主要是讲lazyload是如何实现的，到这里就已经完了。其他的以后再说', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@777038b4, {}]}
2019-10-31 14:49:16.290 DEBUG 10704 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 14:49:16.296 DEBUG 10704 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis回顾一(String), mybatis一些问题以及源码依据或官网根据,自定义typehandler，自定义plugin......(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 14:49:16.284(Timestamp), 2019-10-31 14:49:16.284(Timestamp), ## 一.xml和annotation同时使用哪个会生效

当xml和annotation同时作用于同一个接口的方法时,annotation会生效,原因看下面源码的分析:

#### 这里的关键类是:org.apache.ibatis.builder.annotation.MapperAnnotationBuilder,里面有一个方法

#### parse():用来解析dao的接口
```java
     public void parse() {
        //获取所有dao接口的全限定类名
        String resource = type.toString();
        if (!configuration.isResourceLoaded(resource)) {
          //解析xml配置文件
          loadXmlResource();
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //解析出方法注解上面的statement语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        parsePendingMethods();
      }
```


由此可见,在解析annotation的之前,已经有个loadXmlResource();方法去解析xml的mapper文件,也就是如果xml存在,后面解析annotation得到的sql会将其覆盖.



### 二.使用annotation时没有xml为什么不会报错?
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //获取当前<mapper/>标签下面扫描包的xml映射文件
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不在接口的包下面,则去找classpath下面的xml文件
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          //找到的话就去解析对应的sql语句
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            xmlParser.parse();
          }
        }
      }
```


这里没有报错的原因是,当xml文件不存在的时候,Resources.getResourceAsStream的方法抛出的异常被catch捕获到并且没有作任何处理,所以没有报错



三.接着上面的那个方法来说明一个坑:

当mybatis主配置文件使用如下方式来指定mapper文件位置时:

        <!-- 注册映射文件 -->
        <mappers>
            <package name="com.pan.dao"/>
        </mappers>



会出现一个严重的错误:无论你的mapper文件是放在同包下面,并且没有路径出错的问题时,mybatis依然会报错说没有绑定对应的sql语句,原因是使用maven建立mybatis项目时,maven工程会忽略掉src/main/java下面的所有资源,然后可以利用上面的loadXmlResource()方法进行解释出错的原因.
```java
      
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //程序来到这里时,会获取该包下面的xml文件的名称
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          //2.但是来到这里发现文件是不存在的,由于maven的原因
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不在接口的包下面,则去找classpath下面的xml文件
              //3.又来到classpath路径下找相同名称的xml文件,发现还是没有
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          //找到的话就去解析对应的sql语句
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            xmlParser.parse();
          }
        }
         //4.没有解析xml文件,sql都没有解析,方法就完成了,也就是没有进行sql的绑定.
      }
```
原因:没有解析xml文件,sql都没有解析,方法就完成了,也就是没有进行sql的绑定.



解决方案:
```pom
        <build>
            <resources>
                <resource>
                    <directory>src/main/java</directory>
                    <includes>
                        <include>**/*.properties</include>
                        <include>**/*.xml</include>
                    </includes>
                    <filtering>false</filtering>
                </resource>
                <!-- 如果不添加这个src/main/resources文件夹将消失,但没关系,看个人需要 -->
                <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                        <include>**/*.properties</include>
                        <include>**/*.xml</include>
                    </includes>
                    <filtering>false</filtering>
                </resource>
            </resources>
        </build>
```




### 四.解析 完的xml主配置文件到哪里去了?

在mybatis中有一个类用于存放主配置信息:org.apache.ibatis.session.Configuration,在主配置文件解析完以后,就会将信息存放到该对象中,成员变量就是标签对应的属性.
```java
    public class Configuration {
    
      protected Environment environment;
    
      protected boolean safeRowBoundsEnabled;
      protected boolean safeResultHandlerEnabled = true;
      protected boolean mapUnderscoreToCamelCase;
      protected boolean aggressiveLazyLoading;
      protected boolean multipleResultSetsEnabled = true;
      protected boolean useGeneratedKeys;
      protected boolean useColumnLabel = true;
      protected boolean cacheEnabled = true;
      protected boolean callSettersOnNulls;
      protected boolean useActualParamName = true;
      protected boolean returnInstanceForEmptyRow;
    
      protected String logPrefix;
      protected Class<? extends Log> logImpl;
      protected Class<? extends VFS> vfsImpl;
      protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;
      protected JdbcType jdbcTypeForNull = JdbcType.OTHER;
      protected Set<String> lazyLoadTriggerMethods = new HashSet<>(Arrays.asList("equals", "clone", "hashCode", "toString"));
      protected Integer defaultStatementTimeout;
      protected Integer defaultFetchSize;
      protected ResultSetType defaultResultSetType;
      protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;
      protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;
      protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;
    
      protected Properties variables = new Properties();
      protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();
      protected ObjectFactory objectFactory = new DefaultObjectFactory();
      protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();
    
      protected boolean lazyLoadingEnabled = false;
      protected ProxyFactory proxyFactory = new JavassistProxyFactory(); // #224 Using internal Javassist instead of OGNL
    
      protected String databaseId;
      /**
       * Configuration factory class.
       * Used to create Configuration for loading deserialized unread properties.
       *
       * @see <a href='https://code.google.com/p/mybatis/issues/detail?id=300'>Issue 300 (google code)</a>
       */
      protected Class<?> configurationFactory;
    
      protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
      protected final InterceptorChain interceptorChain = new InterceptorChain();
      protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();
      protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();
      protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();
    
      protected final Map<String, MappedStatement> mappedStatements = new StrictMap<MappedStatement>("Mapped Statements collection")
          .conflictMessageProducer((savedValue, targetValue) ->
              ". please check " + savedValue.getResource() + " and " + targetValue.getResource());
      protected final Map<String, Cache> caches = new StrictMap<>("Caches collection");
      protected final Map<String, ResultMap> resultMaps = new StrictMap<>("Result Maps collection");
      protected final Map<String, ParameterMap> parameterMaps = new StrictMap<>("Parameter Maps collection");
      protected final Map<String, KeyGenerator> keyGenerators = new StrictMap<>("Key Generators collection");
    
      protected final Set<String> loadedResources = new HashSet<>();
      protected final Map<String, XNode> sqlFragments = new StrictMap<>("XML fragments parsed from previous mappers");
    
      protected final Collection<XMLStatementBuilder> incompleteStatements = new LinkedList<>();
      protected final Collection<CacheRefResolver> incompleteCacheRefs = new LinkedList<>();
      protected final Collection<ResultMapResolver> incompleteResultMaps = new LinkedList<>();
      protected final Collection<MethodResolver> incompleteMethods = new LinkedList<>();
    }
```


### 五.自定义的typeHandle(类型处理器)

官方对typeHandle的定义:

Whenever MyBatis sets a parameter on a PreparedStatement or retrieves a value from a ResultSet, a TypeHandler is used to retrieve the value in a means appropriate to the Java type. The following table describes the default TypeHandlers.



自定义typeHandle的实现:

You can override the type handlers or create your own to deal with unsupported or non-standard types. To do so, implement the interface org.apache.ibatis.type.TypeHandler or extend the convenience class org.apache.ibatis.type.BaseTypeHandler and optionally map it to a JDBC type. 

继承BaseTypeHandler<T>:
```java
    // ExampleTypeHandler.java
    @MappedJdbcTypes(JdbcType.VARCHAR)
    public class ExampleTypeHandler extends BaseTypeHandler<String> {
    
      @Override
      public void setNonNullParameter(PreparedStatement ps, int i,
        String parameter, JdbcType jdbcType) throws SQLException {
        ps.setString(i, parameter);
      }
    
      @Override
      public String getNullableResult(ResultSet rs, String columnName)
        throws SQLException {
        return rs.getString(columnName);
      }
    
      @Override
      public String getNullableResult(ResultSet rs, int columnIndex)
        throws SQLException {
        return rs.getString(columnIndex);
      }
    
      @Override
      public String getNullableResult(CallableStatement cs, int columnIndex)
        throws SQLException {
        return cs.getString(columnIndex);
      }
    }
```


主配置文件中:
```xml
    	<!--导入自定义的typeHandle-->
    	<typeHandlers>
    		<typeHandler handler="com.pan.handler.MyHandler"/>
    	</typeHandlers>
```


同时也可以在resultMap中使用:
```xml
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid" jdbcType="INTEGER"/>
    		<!--如果这里标签里面加入了jdbcType的话,MyHandle里面的@MappedJdbcTypes中的配置jdbc类型则忽略-->
    		<result column="cname" property="cname" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
    		<!-- 与上面的作用一样
    			<result column="cname" property="cname"  typeHandler="com.pan.handler.MyHandler"/>
    		-->
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>

```

在与spring整合时使用的sqlSessionFactory是org.mybatis.spring.SqlSessionFactoryBean，此时要注册自定义的TypeHandler，只需要把自定义的handler往这个bean里面丢（setTypeHandlers()/setTypeHandlersPackage()）



### 六.自定义插件(plugins):

MyBatis allows you to intercept calls to at certain points within the execution of a mapped statement. By default, MyBatis allows plug-ins to intercept method calls of:

- Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
- ParameterHandler (getParameterObject, setParameters)
- ResultSetHandler (handleResultSets, handleOutputParameters)
- StatementHandler (prepare, parameterize, batch, update, query)

How to do?

Using plug-ins is pretty simple given the power they provide. Simply implement the Interceptor interface, being sure to specify the signatures you want to intercept.
```java
    // ExamplePlugin.java
    @Intercepts({@Signature(
      type= Executor.class,
      method = "update",
      args = {MappedStatement.class,Object.class})})
    public class ExamplePlugin implements Interceptor {
      private Properties properties = new Properties();
      public Object intercept(Invocation invocation) throws Throwable {
        // implement pre processing if need
        Object returnObject = invocation.proceed();
        // implement post processing if need
        return returnObject;
      }
      public void setProperties(Properties properties) {
        this.properties = properties;
      }
    }
```
```xml
    <!-- mybatis-config.xml -->
    <plugins>
      <plugin interceptor="org.mybatis.example.ExamplePlugin">
        <property name="someProperty" value="100"/>
      </plugin>
    </plugins>
```
The plug-in above will intercept all calls to the "update" method on the Executor instance, which is an internal object responsible for the low level execution of mapped statements.

第二种方法:

除了用插件来修改 MyBatis 核心行为之外，还可以通过完全覆盖配置类来达到目的。只需继承后覆盖其中的每个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会严重影响 MyBatis 的行为，务请慎之又慎。



### 七.在关联查询里是怎么实现执行第二句select语句的

在使用了关联查询之后，会有这么一个问题，我们调用的mapper方法只是查询第一条select语句，其关联部分的select语句到底是怎么执行的？为什么会执行？什么时候执行？

下面直接使用源码解释上面的问题，注意：为了使演示明显，我们开启了lazyload，关于lazyload的信息也在上面的地址有
在mybatis里有这么一个类org.apache.ibatis.executor.resultset.DefaultResultSetHandler，我们来关注里面这么一个方法 getPropertyMappingValue() nested：嵌套
#### 在看getPropertyMappingValue()方法的源代码之前，我们有必要先模拟出一个mapper文件里的resultMap，如下：
```xml
    	<resultMap type="Country" id="countryMap">
    		<id column="cid" property="cid" jdbcType="INTEGER"/>
    		<!--如果这里标签里面加入了jdbcType的话,MyHandle里面的@MappedJdbcTypes中的配置jdbc类型则忽略-->
    		<result column="cname" property="cname" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
    		<!-- 与上面的作用一样
    			<result column="cname" property="cname"  typeHandler="com.pan.handler.MyHandler"/>
    		-->
    		<!--property中放关联属性  ofType指封装的类型-->
    		<collection property="ministers" ofType="Minister" select="selectMinisterByCountry" column="cid"/>
    	</resultMap>
```
#### 下面是我们getPropertyMappingValue()方法的源代码。我们将模拟运行情况：
```java
    private Object getPropertyMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)
          throws SQLException {
    	//判断是否存在嵌套查询ID（说白了就是判断上面resultMap的子标签里是否存在select="selectParentById"）
    	if (propertyMapping.getNestedQueryId() != null) {
    	//存在嵌套查询id：namespace.selectParentById
    	//当然，id，name并不存在nestedQueryId，只有到了parent才会进来这个方法
    	//我们来看看这个方法的实现，该代码框里下方的代码暂时不重要了，看下一个代码块
    	return getNestedQueryMappingValue(rs, metaResultObject, propertyMapping, lazyLoader, columnPrefix);
    	} else if (propertyMapping.getResultSet() != null) {
    		addPendingChildRelation(rs, metaResultObject, propertyMapping);   // TODO is that OK?
    		return DEFERRED;
    	} else {
    		final TypeHandler<?> typeHandler = propertyMapping.getTypeHandler();
    		final String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);
    		return typeHandler.getResult(rs, column);
    	}
    }
    private Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)
          throws SQLException {
        ...这些代码就省略了，暂时不重要
    	if (propertyMapping.isLazy()) {
    		//重要的是这一句！！
    		//往lazyLoader(ResultLoaderMap)里丢loader，包含了关联加载的各种信息
    		lazyLoader.addLoader(property, metaResultObject, resultLoader);
    		value = DEFERRED;
    	} else {
    		value = resultLoader.loadResult();
    	}
    	...这些代码就省略了，暂时不重要
    return value;
    }
```
到了这里我们可以推断出，mybatis关联查询的lazyload的是通过一个lazyLoader(Map)来实现的。大概流程如下，查询了第一个select语句后，把关联查询的语句暂时保存在一个map中。在真正需要的时候再来调用（这里默认将的是深度延迟加载，具体看上面的链接）。
接下来我们来验证上面的说法，思路很简单，既然mybatis向map中addLoader，那么在真正使用的时候肯定会取出来。所以我们来到这个map的实现类ResultLoaderMap来看一下他的方法  



分析如何执行延时加载的select语句:

当调用关联对象的get()方法时,会调用org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory的invoke方法:
```java
    public Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {
          final String methodName = method.getName();
          try {
            synchronized (lazyLoader) {
              if (WRITE_REPLACE_METHOD.equals(methodName)) {
                Object original;
                if (constructorArgTypes.isEmpty()) {
                  original = objectFactory.create(type);
                } else {
                  original = objectFactory.create(type, constructorArgTypes, constructorArgs);
                }
                PropertyCopier.copyBeanProperties(type, enhanced, original);
                if (lazyLoader.size() > 0) {
                  return new JavassistSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);
                } else {
                  return original;
                }
              } else {
                //lazyLoader是一个ResultLoaderMap
                //这里判断map中是否存在键值对
                if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
                  if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                    //到这里进行所有的map里面的键值对的load方法
                    lazyLoader.loadAll();
                  } else if (PropertyNamer.isSetter(methodName)) {
                    final String property = PropertyNamer.methodToProperty(methodName);
                    lazyLoader.remove(property);
                  } else if (PropertyNamer.isGetter(methodName)) {
                    final String property = PropertyNamer.methodToProperty(methodName);
                    if (lazyLoader.hasLoader(property)) {
                      lazyLoader.load(property);
                    }
                  }
                }
              }
            }
            return methodProxy.invoke(enhanced, args);
          } catch (Throwable t) {
            throw ExceptionUtil.unwrapThrowable(t);
          }
        }
      }
```


### loadAll():
```java
    public void loadAll() throws SQLException {
        final Set<String> methodNameSet = loaderMap.keySet();
        String[] methodNames = methodNameSet.toArray(new String[methodNameSet.size()]);
        for (String methodName : methodNames) {
          load(methodName);
        }
      }


      public boolean load(String property) throws SQLException {
        LoadPair pair = loaderMap.remove(property.toUpperCase(Locale.ENGLISH));
        if (pair != null) {
    	  //上面从map移除key，拿这里应该就是进行查询了，跟进去看看
          pair.load();
          return true;
        }
        return false;
      }
```
是一个方法调用，继续跟进
```java
    this.load(null);
```
进来后这个方法的底部有这么一句代码
```java
    //有setValue还有loadResult()
    //你懂的，进去进去
    this.metaResultObject.setValue(property, this.resultLoader.loadResult());
```
进来loadResult()方法，代码如下：selectList()，讲道理到这里就可以完了，但是还是进去瞅下
```java
      public Object loadResult() throws SQLException {
        List<Object> list = selectList();
        resultObject = resultExtractor.extractObjectFromList(list, targetType);
        return resultObject;
      }
```
### 进入selectList()
```java
      private <E> List<E> selectList() throws SQLException {
        Executor localExecutor = executor;
        if (Thread.currentThread().getId() != this.creatorThreadId || localExecutor.isClosed()) {
          localExecutor = newExecutor();
        }
        try {
    	  //return + query方法，到了这里就不再继续跟进了，已经够了
          return localExecutor.<E> query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);
        } finally {
          if (localExecutor != executor) {
            localExecutor.close(false);
          }
        }
      }
```
从selectList()方法出来后就执行setValue方法，剩下的就不说了。这里主要是讲lazyload是如何实现的，到这里就已经完了。其他的以后再说(String)
2019-10-31 14:49:16.299 DEBUG 10704 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 14:49:16.303 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 14:49:16.303 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 14:49:16.304 DEBUG 10704 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 14:49:16.304 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 14:49:16.304 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 4(Integer), 14(Integer)
2019-10-31 14:49:16.322 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 14:49:16.324 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 14:49:16.324 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 14:49:16.325 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 14:49:16.326 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 14:49:16.328 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 2(Integer), 11(Integer)
2019-10-31 14:49:16.329 DEBUG 10704 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 14:49:16.654  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 14:49:16.654  INFO 10704 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 372
2019-10-31 14:49:16.666  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 14:49:16.668 DEBUG 10704 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:49:16.668 DEBUG 10704 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 14:49:16.669 DEBUG 10704 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 14:49:16.671 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 14:49:16.671 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:49:16.678 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 9
2019-10-31 14:49:16.680 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.680 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:49:16.682 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.684 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.684 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:49:16.685 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.688 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.688 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:49:16.689 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.691 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.692 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:49:16.693 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.694 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.694 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:49:16.695 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.696 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.696 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:49:16.696 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.698 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.698 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:49:16.698 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.699 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.700 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:49:16.700 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.702 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:49:16.702 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:49:16.703 DEBUG 10704 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:49:16.704 DEBUG 10704 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:49:16.704 DEBUG 10704 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:49:16.705 DEBUG 10704 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:49:16.705  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 14:49:16.705  INFO 10704 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 39
2019-10-31 14:49:57.083  INFO 19956 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 19956 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 14:49:57.083 DEBUG 19956 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 14:49:57.083  INFO 19956 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 14:49:58.086  INFO 19956 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 14:49:58.138  INFO 19956 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 37ms. Found 0 repository interfaces.
2019-10-31 14:49:58.637  INFO 19956 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bbbbdd5e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 14:49:59.004  INFO 19956 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 14:49:59.377  INFO 19956 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 14:50:01.898  INFO 19956 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 14:50:02.050  INFO 19956 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 14:50:02.801  INFO 19956 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.694 seconds (JVM running for 7.733)
2019-10-31 14:50:03.254 DEBUG 19956 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:50:03.292 DEBUG 19956 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 26(Integer)
2019-10-31 14:50:03.324 DEBUG 19956 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:03.742  INFO 19956 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 14:50:03.742  INFO 19956 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 14:50:03.754  INFO 19956 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 14:50:11.868  INFO 23372 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 23372 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 14:50:11.908 DEBUG 23372 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 14:50:11.908  INFO 23372 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 14:50:11.959  INFO 23372 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 14:50:11.959  INFO 23372 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 14:50:12.690  INFO 23372 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 14:50:12.732  INFO 23372 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 repository interfaces.
2019-10-31 14:50:13.099  INFO 23372 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$add062b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 14:50:13.541  INFO 23372 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 14:50:13.619  INFO 23372 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 14:50:13.619  INFO 23372 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 14:50:13.750  INFO 23372 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 14:50:13.750  INFO 23372 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1790 ms
2019-10-31 14:50:13.896  INFO 23372 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 14:50:14.138  INFO 23372 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 14:50:15.355  INFO 23372 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 14:50:15.452  INFO 23372 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 14:50:16.188  INFO 23372 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 14:50:16.249  INFO 23372 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 14:50:16.252  INFO 23372 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.067 seconds (JVM running for 6.138)
2019-10-31 14:50:17.773  INFO 23372 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 14:50:17.773  INFO 23372 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 14:50:17.788  INFO 23372 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2019-10-31 14:50:17.825  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 14:50:18.262 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.290 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.314 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.320 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.321 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.322 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.324 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.325 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.326 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.328 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.328 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:50:18.329 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.331 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.331 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.332 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.334 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.334 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:50:18.335 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.337 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.337 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.338 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.340 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.341 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:50:18.342 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.345 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.345 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.346 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.348 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.348 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:50:18.349 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.351 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.351 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.352 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.354 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.354 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.355 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.357 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:18.357 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.359 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.361 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:18.362 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:18.363 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:18.396 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:50:18.396 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:50:18.397 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:50:18.399 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:50:18.400 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:50:18.402 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:50:18.409 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:50:18.409 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:50:18.410 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:50:18.410 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:50:18.411 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:50:18.412 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:50:18.419 DEBUG 23372 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:50:18.419 DEBUG 23372 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:50:18.420 DEBUG 23372 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:50:18.420 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:50:18.421 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:50:18.423 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:50:18.424  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:50:18.424  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 600
2019-10-31 14:50:23.815  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 14:50:23.974 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:23.975 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:23.976 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:23.978 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:23.978 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:50:23.979 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:23.981 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:23.981 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:23.982 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:23.985 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:23.985 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:50:23.986 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:23.987 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:50:23.988 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:50:23.988 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:50:23.989 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:50:23.989 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:50:23.991 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:50:23.992 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:50:23.992 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:50:23.993 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:50:23.994 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:50:23.994 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:50:23.995 DEBUG 23372 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:50:23.996 DEBUG 23372 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:50:23.997 DEBUG 23372 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:50:23.997 DEBUG 23372 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:50:23.998 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:50:23.998 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:50:24.000 DEBUG 23372 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:50:24.001  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:50:24.001  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 186
2019-10-31 14:50:28.068  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/26', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[26, {}]}
2019-10-31 14:50:28.070 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:50:28.070 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 26(Integer)
2019-10-31 14:50:28.073 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:28.123 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:50:28.124 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:50:28.125 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:28.127 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:50:28.127 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:50:28.129 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:50:28.130 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 14:50:28.130 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 11(Integer)
2019-10-31 14:50:28.131 DEBUG 23372 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 14:50:28.132  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 14:50:28.132  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 64
2019-10-31 14:51:04.433  INFO 23372 --- [http-nio-8080-exec-7] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 14:51:04.438  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 14:51:04.442  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 14:51:04.442  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 4
2019-10-31 14:51:08.649  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@2a8ffb9b]}
2019-10-31 14:51:08.659 DEBUG 23372 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 14:51:08.660 DEBUG 23372 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 14:51:08.661 DEBUG 23372 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 14:51:08.664  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 14:51:08.664  INFO 23372 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 14:51:08.677  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 14:51:08.679  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 14:51:08.679  INFO 23372 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 14:51:10.141  INFO 23372 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 14:51:10.147 DEBUG 23372 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:51:10.148 DEBUG 23372 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 14:51:10.149 DEBUG 23372 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 14:51:10.150 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 14:51:10.151 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:51:10.157 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 9
2019-10-31 14:51:10.161 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.161 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:51:10.162 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.163 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.163 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:51:10.164 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.166 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.166 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:51:10.167 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.168 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.168 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:51:10.169 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.171 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.171 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:51:10.172 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.175 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.176 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:51:10.177 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.179 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.179 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:51:10.180 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.181 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.182 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:51:10.182 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.184 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:51:10.184 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:51:10.184 DEBUG 23372 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:51:10.186 DEBUG 23372 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:51:10.186 DEBUG 23372 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:51:10.187 DEBUG 23372 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:51:10.188  INFO 23372 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 14:51:10.188  INFO 23372 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 47
2019-10-31 14:51:11.308  INFO 23372 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 14:51:11.310 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 14:51:11.311 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 14:51:11.318 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 14:51:11.320 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:51:11.321 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:51:11.322 DEBUG 23372 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:51:11.323  INFO 23372 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 14:51:11.323  INFO 23372 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 14:54:56.153  INFO 23372 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/26', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[26, {}]}
2019-10-31 14:54:56.160 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:54:56.161 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 26(Integer)
2019-10-31 14:54:56.162 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:54:56.175 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:54:56.176 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:54:56.176 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:54:56.179 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:54:56.179 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:54:56.181 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:54:56.182 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 14:54:56.182 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 11(Integer)
2019-10-31 14:54:56.183 DEBUG 23372 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 14:54:56.183  INFO 23372 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 14:54:56.184  INFO 23372 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 31
2019-10-31 14:56:18.122  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mapper接口如何与mapper.xml进行映射', description='mapper接口如何与mapper.xml进行映射的源码分析...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='### 一.手动使用mybatis进行测试:
```java
         try {
             	//加载主配置文件
                InputStream is = Resources.getResourceAsStream("mybatis.xml");
                if(sqlSessionFactory == null) {
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
             }

```

### 进入SqlSessionFactoryBuilder().build(is)方法:
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //获取一个xml配置文件的解析器,利用这个解析器去解析
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```


### 进入XMLConfigBuilder的parse()方法: 解析mybatis的主配置文件
```java
    //返回将xml主配置文件包装成一个java类型的对象Configuration
    public Configuration parse() {
        //判断是否解析过
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取configuration标签下面所有的子标签,解析这些子标签
        parseConfiguration(parser.evalNode("/configuration"));
        return configuration;
      }
```


### 进入parseConfiguration(XNode root)的方法:
```java
     private void parseConfiguration(XNode root) {
        try {
    	 //......省略部分代码,暂时还不需要
         //获取mappers标签的信息,然后解析mapper.xml文件,完成xml到java类型的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```


### 进入进入mapperElement(root.evalNode("mappers"))方法:
```java
      private void mapperElement(XNode parent) throws Exception {
        //parent:mappers作为父节点一样
        if (parent != null) {
          //遍历所有的子标签
          for (XNode child : parent.getChildren()) {
            //如果使用了<package/>标签的话,就走这个代码
            if ("package".equals(child.getName())) {
              String mapperPackage = child.getStringAttribute("name");
              //进行mapper.xml的解析
              configuration.addMappers(mapperPackage);
            } else {
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              if (resource != null && url == null && mapperClass == null) {
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());
                //这里是使用<resource/>标签的解析mapper.xml
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                throw new BuilderException("A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


### 进入configuration.addMappers(mapperPackage)方法:

1.该方法是将Mapper文件注册到MapperRegistry中

2.然后再将mapper的接口添加到MapperRegistry中,进入addMapper(mapperClass)方法;
```java
      public <T> void addMapper(Class<T> type) {
        if (type.isInterface()) {
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          boolean loadCompleted = false;
          try {
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //这步进行真正的mapper.xml的解析
            parser.parse();
            loadCompleted = true;
          } finally {
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }
```


### 进入parse.parese()方法:
```java
      public void parse() {
        String resource = type.toString();
        if (!configuration.isResourceLoaded(resource)) {
          //加载xml文件并且解析
          loadXmlResource();
          //....忽略一下代码
        parsePendingMethods();
      }
```


### 进入loadXmlResource()方法:
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //从mapper接口下面对应的mapper接口的全限定类名加上.xml
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找这个文件
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse()方法:
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          configuration.addLoadedResource(resource);
          bindMapperForNamespace();
        }
    
       //这里的执行的方法是一些特殊情况的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```


### 进入configurationElement(XNode context)方法:

进行mapper下各种标签的解析
```java
      private void configurationElement(XNode context) {
        try {
          String namespace = context.getStringAttribute("namespace");
          if (namespace == null || namespace.equals("")) {
            throw new BuilderException("Mapper's namespace cannot be empty");
          }
          builderAssistant.setCurrentNamespace(namespace);
          cacheRefElement(context.evalNode("cache-ref"));
          cacheElement(context.evalNode("cache"));
          parameterMapElement(context.evalNodes("/mapper/parameterMap"));
          resultMapElements(context.evalNodes("/mapper/resultMap"));
          sqlElement(context.evalNodes("/mapper/sql"));
          buildStatementFromContext(context.evalNodes("select|insert|update|delete"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing Mapper XML. The XML location is '" + resource + "'. Cause: " + e, e);
        }
      }
```


### 总结:

1.mapper.xml解析:

org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XNode);

2.解析mybatis.xml的主配置文件:

org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XNode);

3.对xml文件的解析都对应着一个XMLxxxxBuilder.

原理时序图:
[![mybatis的mapper.xml映射流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12qnqaAC2VWAABx6ywtUgU838.png "mybatis的mapper.xml映射流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12qnqaAC2VWAABx6ywtUgU838.png "mybatis的mapper.xml映射流程")', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@2a8ffb9b, {}]}
2019-10-31 14:56:18.134 DEBUG 23372 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 14:56:18.137 DEBUG 23372 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mapper接口如何与mapper.xml进行映射(String), mapper接口如何与mapper.xml进行映射的源码分析...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 14:56:18.122(Timestamp), 2019-10-31 14:56:18.123(Timestamp), ### 一.手动使用mybatis进行测试:
```java
         try {
             	//加载主配置文件
                InputStream is = Resources.getResourceAsStream("mybatis.xml");
                if(sqlSessionFactory == null) {
                    sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
             }

```

### 进入SqlSessionFactoryBuilder().build(is)方法:
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //获取一个xml配置文件的解析器,利用这个解析器去解析
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```


### 进入XMLConfigBuilder的parse()方法: 解析mybatis的主配置文件
```java
    //返回将xml主配置文件包装成一个java类型的对象Configuration
    public Configuration parse() {
        //判断是否解析过
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取configuration标签下面所有的子标签,解析这些子标签
        parseConfiguration(parser.evalNode("/configuration"));
        return configuration;
      }
```


### 进入parseConfiguration(XNode root)的方法:
```java
     private void parseConfiguration(XNode root) {
        try {
    	 //......省略部分代码,暂时还不需要
         //获取mappers标签的信息,然后解析mapper.xml文件,完成xml到java类型的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```


### 进入进入mapperElement(root.evalNode("mappers"))方法:
```java
      private void mapperElement(XNode parent) throws Exception {
        //parent:mappers作为父节点一样
        if (parent != null) {
          //遍历所有的子标签
          for (XNode child : parent.getChildren()) {
            //如果使用了<package/>标签的话,就走这个代码
            if ("package".equals(child.getName())) {
              String mapperPackage = child.getStringAttribute("name");
              //进行mapper.xml的解析
              configuration.addMappers(mapperPackage);
            } else {
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              if (resource != null && url == null && mapperClass == null) {
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());
                //这里是使用<resource/>标签的解析mapper.xml
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                throw new BuilderException("A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


### 进入configuration.addMappers(mapperPackage)方法:

1.该方法是将Mapper文件注册到MapperRegistry中

2.然后再将mapper的接口添加到MapperRegistry中,进入addMapper(mapperClass)方法;
```java
      public <T> void addMapper(Class<T> type) {
        if (type.isInterface()) {
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          boolean loadCompleted = false;
          try {
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //这步进行真正的mapper.xml的解析
            parser.parse();
            loadCompleted = true;
          } finally {
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }
```


### 进入parse.parese()方法:
```java
      public void parse() {
        String resource = type.toString();
        if (!configuration.isResourceLoaded(resource)) {
          //加载xml文件并且解析
          loadXmlResource();
          //....忽略一下代码
        parsePendingMethods();
      }
```


### 进入loadXmlResource()方法:
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //从mapper接口下面对应的mapper接口的全限定类名加上.xml
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找这个文件
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse()方法:
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          configuration.addLoadedResource(resource);
          bindMapperForNamespace();
        }
    
       //这里的执行的方法是一些特殊情况的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```


### 进入configurationElement(XNode context)方法:

进行mapper下各种标签的解析
```java
      private void configurationElement(XNode context) {
        try {
          String namespace = context.getStringAttribute("namespace");
          if (namespace == null || namespace.equals("")) {
            throw new BuilderException("Mapper's namespace cannot be empty");
          }
          builderAssistant.setCurrentNamespace(namespace);
          cacheRefElement(context.evalNode("cache-ref"));
          cacheElement(context.evalNode("cache"));
          parameterMapElement(context.evalNodes("/mapper/parameterMap"));
          resultMapElements(context.evalNodes("/mapper/resultMap"));
          sqlElement(context.evalNodes("/mapper/sql"));
          buildStatementFromContext(context.evalNodes("select|insert|update|delete"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing Mapper XML. The XML location is '" + resource + "'. Cause: " + e, e);
        }
      }
```


### 总结:

1.mapper.xml解析:

org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XNode);

2.解析mybatis.xml的主配置文件:

org.apache.ibatis.builder.xml.XMLConfigBuilder.parseConfiguration(XNode);

3.对xml文件的解析都对应着一个XMLxxxxBuilder.

原理时序图:
[![mybatis的mapper.xml映射流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12qnqaAC2VWAABx6ywtUgU838.png "mybatis的mapper.xml映射流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12qnqaAC2VWAABx6ywtUgU838.png "mybatis的mapper.xml映射流程")(String)
2019-10-31 14:56:18.142 DEBUG 23372 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 14:56:18.147 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 14:56:18.147 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 14:56:18.149 DEBUG 23372 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 14:56:18.149 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 14:56:18.150 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 5(Integer), 14(Integer)
2019-10-31 14:56:18.150 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 14:56:18.152 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 14:56:18.153 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 14:56:18.154 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 14:56:18.154 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 14:56:18.155 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 3(Integer), 11(Integer)
2019-10-31 14:56:18.156 DEBUG 23372 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 14:56:18.465  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 14:56:18.466  INFO 23372 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 344
2019-10-31 14:56:18.480  INFO 23372 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 14:56:20.464 DEBUG 23372 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:56:20.464 DEBUG 23372 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 14:56:20.465 DEBUG 23372 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 14:56:20.466 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 14:56:20.466 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:56:20.473 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 14:56:20.475 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.475 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:56:20.476 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.477 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.478 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:56:20.478 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.480 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.481 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:56:20.481 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.483 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.483 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:56:20.484 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.485 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.485 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:56:20.486 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.488 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.488 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:56:20.489 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.491 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.491 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:56:20.492 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.494 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.494 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:56:20.495 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.497 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.497 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:56:20.498 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.499 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:56:20.499 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:56:20.500 DEBUG 23372 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:56:20.502 DEBUG 23372 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:56:20.502 DEBUG 23372 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:56:20.503 DEBUG 23372 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:56:20.504  INFO 23372 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 14:56:20.504  INFO 23372 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 2024
2019-10-31 14:57:07.338  INFO 10276 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 10276 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 14:57:07.338 DEBUG 10276 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 14:57:07.338  INFO 10276 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 14:57:08.361  INFO 10276 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 14:57:08.416  INFO 10276 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 39ms. Found 0 repository interfaces.
2019-10-31 14:57:09.009  INFO 10276 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$80a0d5e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 14:57:09.392  INFO 10276 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 14:57:09.821  INFO 10276 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 14:57:12.606  INFO 10276 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 14:57:12.762  INFO 10276 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 14:57:13.475  INFO 10276 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 7.233 seconds (JVM running for 8.38)
2019-10-31 14:57:14.049 DEBUG 10276 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:57:14.088 DEBUG 10276 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 27(Integer)
2019-10-31 14:57:14.119 DEBUG 10276 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:14.498  INFO 10276 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 14:57:14.501  INFO 10276 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 14:57:14.517  INFO 10276 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 14:57:21.019  INFO 40900 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 40900 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 14:57:21.019 DEBUG 40900 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 14:57:21.019  INFO 40900 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 14:57:21.183  INFO 40900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 14:57:21.183  INFO 40900 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 14:57:21.893  INFO 40900 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 14:57:21.930  INFO 40900 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2019-10-31 14:57:22.274  INFO 40900 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$abe099a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 14:57:22.725  INFO 40900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 14:57:22.800  INFO 40900 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 14:57:22.800  INFO 40900 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 14:57:22.910  INFO 40900 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 14:57:22.910  INFO 40900 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1727 ms
2019-10-31 14:57:23.050  INFO 40900 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 14:57:23.288  INFO 40900 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 14:57:24.494  INFO 40900 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 14:57:24.588  INFO 40900 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 14:57:25.312  INFO 40900 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 14:57:25.374  INFO 40900 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 14:57:25.374  INFO 40900 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.028 seconds (JVM running for 6.027)
2019-10-31 14:57:35.810  INFO 40900 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 14:57:35.810  INFO 40900 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 14:57:35.824  INFO 40900 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2019-10-31 14:57:35.859  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 14:57:36.244 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:57:36.267 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:57:36.289 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.295 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:57:36.295 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:57:36.296 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.299 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:57:36.299 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:57:36.299 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.301 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:57:36.302 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:57:36.303 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.305 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:57:36.305 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:57:36.307 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.309 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:57:36.310 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:57:36.311 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:36.348 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 14:57:36.348 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:57:36.349 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:57:36.351 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 14:57:36.351 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:57:36.354 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 14:57:36.358 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 14:57:36.359 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 14:57:36.360 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 14:57:36.360 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 14:57:36.361 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:57:36.363 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 14:57:36.369 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 14:57:36.370 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 14:57:36.371 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 14:57:36.371 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 14:57:36.372 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 14:57:36.374 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 14:57:36.375  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 14:57:36.375  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 518
2019-10-31 14:57:41.392  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/27', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[27, {}]}
2019-10-31 14:57:41.394 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 14:57:41.395 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 27(Integer)
2019-10-31 14:57:41.398 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:41.440 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:57:41.440 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:57:41.441 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:41.442 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 14:57:41.443 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:57:41.444 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:57:41.446 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 14:57:41.446 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 11(Integer)
2019-10-31 14:57:41.448 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 14:57:41.449  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 14:57:41.449  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 57
2019-10-31 14:58:28.059  INFO 40900 --- [http-nio-8080-exec-7] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 14:58:28.064  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 14:58:28.066  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 14:58:28.066  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 14:58:31.739  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@2f5e7da1]}
2019-10-31 14:58:31.751 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 14:58:31.752 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 14:58:31.752 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 14:58:31.755  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 14:58:31.755  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 16
2019-10-31 14:58:31.768  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 14:58:31.771  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 14:58:31.771  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 3
2019-10-31 14:58:33.253  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 14:58:33.258 DEBUG 40900 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 14:58:33.259 DEBUG 40900 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 14:58:33.260 DEBUG 40900 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 14:58:33.261 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 14:58:33.262 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 14:58:33.270 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 14:58:33.274 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.274 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:58:33.275 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.278 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.278 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:58:33.279 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.282 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.282 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:58:33.283 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.285 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.285 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:58:33.286 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.288 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.288 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:58:33.289 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.292 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.292 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:58:33.293 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.295 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.295 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 14:58:33.296 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.297 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.298 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 14:58:33.298 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.300 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.300 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:58:33.301 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.302 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 14:58:33.302 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 14:58:33.303 DEBUG 40900 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 14:58:33.306 DEBUG 40900 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:58:33.306 DEBUG 40900 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:58:33.308 DEBUG 40900 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:58:33.309  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 14:58:33.309  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 56
2019-10-31 14:58:34.911  INFO 40900 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 14:58:34.914 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 14:58:34.914 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 14:58:34.916 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 14:58:34.918 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 14:58:34.918 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 14:58:34.919 DEBUG 40900 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 14:58:34.921  INFO 40900 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 14:58:34.921  INFO 40900 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 10
2019-10-31 15:01:57.156  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis源码分析三-动态代理对象MapperProxy的获取', description='mybatis获取动态代理对象的源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='一开始,对方向你丢一张图,什么都不说,开始看图

流程图:
[![获取动态代理mapper对象的流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")


实验关键代码:
```java
    //该方法就是通过传入的接口类型获取一个jdk动态代理的MapperProxy对象
    IStudentDao mapperProxy = sqlSession.getMapper(IStudentDao.class);
```


### 进入sqlSession.getMapper(Class<T>):
```java
      //获取资源都是从Configuration这个类的实例对象中获取
      //从此可见其重要性
      @Override
      public <T> T getMapper(Class<T> type) {
        return configuration.getMapper(type, this);
      }
```


### 再进入configuration.getMapper(type, SqlSession):

这里使用了未委托模式,方法调用者虽然是Configuration对象,但是实质是调用Configuration对象里面成员变量的MapperRegistry的getMapper方法
```java
      public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        return mapperRegistry.getMapper(type, sqlSession);
      }
```


### mapperRegistry.getMapper(type, sqlSession):
```java
    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        //根据对应的接口类型获取mapperProxyFactory代理工厂
        //获取的方式就是根据之前在解析Mapper文件时,Mapper在Mapper注册中心时,将Class对象为key,value为代理工厂
        //put进去MapperRegistry里面的knownMappers的HashMap中
        //现在获取就肯定通过get(key)方法来获取mapperProxyFactory
        final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
        if (mapperProxyFactory == null) {
          throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
        }
        try {
          return mapperProxyFactory.newInstance(sqlSession);
        } catch (Exception e) {
          throw new BindingException("Error getting mapper instance. Cause: " + e, e);
        }
      }
```


### 真正获取MapperProxy的方法:
```java
      protected T newInstance(MapperProxy<T> mapperProxy) {
        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
      }
    
      public T newInstance(SqlSession sqlSession) {
        
        final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
        return newInstance(mapperProxy);
      }
    
```', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@2f5e7da1, {}]}
2019-10-31 15:01:57.165 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:01:57.168 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析三-动态代理对象MapperProxy的获取(String), mybatis获取动态代理对象的源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:01:57.157(Timestamp), 2019-10-31 15:01:57.157(Timestamp), 一开始,对方向你丢一张图,什么都不说,开始看图

流程图:
[![获取动态代理mapper对象的流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")


实验关键代码:
```java
    //该方法就是通过传入的接口类型获取一个jdk动态代理的MapperProxy对象
    IStudentDao mapperProxy = sqlSession.getMapper(IStudentDao.class);
```


### 进入sqlSession.getMapper(Class<T>):
```java
      //获取资源都是从Configuration这个类的实例对象中获取
      //从此可见其重要性
      @Override
      public <T> T getMapper(Class<T> type) {
        return configuration.getMapper(type, this);
      }
```


### 再进入configuration.getMapper(type, SqlSession):

这里使用了未委托模式,方法调用者虽然是Configuration对象,但是实质是调用Configuration对象里面成员变量的MapperRegistry的getMapper方法
```java
      public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        return mapperRegistry.getMapper(type, sqlSession);
      }
```


### mapperRegistry.getMapper(type, sqlSession):
```java
    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        //根据对应的接口类型获取mapperProxyFactory代理工厂
        //获取的方式就是根据之前在解析Mapper文件时,Mapper在Mapper注册中心时,将Class对象为key,value为代理工厂
        //put进去MapperRegistry里面的knownMappers的HashMap中
        //现在获取就肯定通过get(key)方法来获取mapperProxyFactory
        final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
        if (mapperProxyFactory == null) {
          throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
        }
        try {
          return mapperProxyFactory.newInstance(sqlSession);
        } catch (Exception e) {
          throw new BindingException("Error getting mapper instance. Cause: " + e, e);
        }
      }
```


### 真正获取MapperProxy的方法:
```java
      protected T newInstance(MapperProxy<T> mapperProxy) {
        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
      }
    
      public T newInstance(SqlSession sqlSession) {
        
        final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
        return newInstance(mapperProxy);
      }
    
```(String)
2019-10-31 15:01:57.320 ERROR 40900 --- [http-nio-8080-exec-6] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
### The error may exist in file [E:\javaworkspace\pan-blog\target\classes\mapping\BlogMapper.xml]
### The error may involve com.pan.dao.BlogMapper.insertSelective-Inline
### The error occurred while setting parameters
### SQL: insert into blog      ( uid,                       typeid,                       tagids,                       title,                       description,                       first_picture,                       views,                                            published,                       flag,                              create_time,                       update_time,                       content )       values ( ?,                       ?,                       ?,                       ?,                       ?,                       ?,                       ?,                                            ?,                       ?,                              ?,                       ?,                       ? )
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
; Data truncation: Data too long for column 'title' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:74)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy84.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:57)
	at com.sun.proxy.$Proxy85.insertSelective(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy86.insertSelective(Unknown Source)
	at com.pan.service.impl.BlogServiceImpl.saveBolg(BlogServiceImpl.java:80)
	at com.pan.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$6210959c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$87ca9c5f.saveBolg(<generated>)
	at com.pan.controller.BlogController.post(BlogController.java:130)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$a98a4956.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3409)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3407)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy119.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy117.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 98 common frames omitted

2019-10-31 15:01:57.336  WARN 40900 --- [http-nio-8080-exec-6] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
### The error may exist in file [E:\javaworkspace\pan-blog\target\classes\mapping\BlogMapper.xml]
### The error may involve com.pan.dao.BlogMapper.insertSelective-Inline
### The error occurred while setting parameters
### SQL: insert into blog      ( uid,                       typeid,                       tagids,                       title,                       description,                       first_picture,                       views,                                            published,                       flag,                              create_time,                       update_time,                       content )       values ( ?,                       ?,                       ?,                       ?,                       ?,                       ?,                       ?,                                            ?,                       ?,                              ?,                       ?,                       ? )
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
; Data truncation: Data too long for column 'title' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1]
2019-10-31 15:03:13.036  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis如何获取MapperProxy', description='mybatis获取动态代理对象的源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='一开始,对方向你丢一张图,什么都不说,开始看图

流程图:
[![获取动态代理mapper对象的流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")


实验关键代码:
```java
    //该方法就是通过传入的接口类型获取一个jdk动态代理的MapperProxy对象
    IStudentDao mapperProxy = sqlSession.getMapper(IStudentDao.class);
```


### 进入sqlSession.getMapper(Class<T>):
```java
      //获取资源都是从Configuration这个类的实例对象中获取
      //从此可见其重要性
      @Override
      public <T> T getMapper(Class<T> type) {
        return configuration.getMapper(type, this);
      }
```


### 再进入configuration.getMapper(type, SqlSession):

这里使用了未委托模式,方法调用者虽然是Configuration对象,但是实质是调用Configuration对象里面成员变量的MapperRegistry的getMapper方法
```java
      public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        return mapperRegistry.getMapper(type, sqlSession);
      }
```


### mapperRegistry.getMapper(type, sqlSession):
```java
    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        //根据对应的接口类型获取mapperProxyFactory代理工厂
        //获取的方式就是根据之前在解析Mapper文件时,Mapper在Mapper注册中心时,将Class对象为key,value为代理工厂
        //put进去MapperRegistry里面的knownMappers的HashMap中
        //现在获取就肯定通过get(key)方法来获取mapperProxyFactory
        final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
        if (mapperProxyFactory == null) {
          throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
        }
        try {
          return mapperProxyFactory.newInstance(sqlSession);
        } catch (Exception e) {
          throw new BindingException("Error getting mapper instance. Cause: " + e, e);
        }
      }
```


### 真正获取MapperProxy的方法:
```java
      protected T newInstance(MapperProxy<T> mapperProxy) {
        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
      }
    
      public T newInstance(SqlSession sqlSession) {
        
        final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
        return newInstance(mapperProxy);
      }
    
```', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@2f5e7da1, {}]}
2019-10-31 15:03:13.041 DEBUG 40900 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:03:13.042 DEBUG 40900 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis如何获取MapperProxy(String), mybatis获取动态代理对象的源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:03:13.036(Timestamp), 2019-10-31 15:03:13.036(Timestamp), 一开始,对方向你丢一张图,什么都不说,开始看图

流程图:
[![获取动态代理mapper对象的流程](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12r27-ARoqvAACz3Ym_DLo796.png "获取动态代理mapper对象的流程")


实验关键代码:
```java
    //该方法就是通过传入的接口类型获取一个jdk动态代理的MapperProxy对象
    IStudentDao mapperProxy = sqlSession.getMapper(IStudentDao.class);
```


### 进入sqlSession.getMapper(Class<T>):
```java
      //获取资源都是从Configuration这个类的实例对象中获取
      //从此可见其重要性
      @Override
      public <T> T getMapper(Class<T> type) {
        return configuration.getMapper(type, this);
      }
```


### 再进入configuration.getMapper(type, SqlSession):

这里使用了未委托模式,方法调用者虽然是Configuration对象,但是实质是调用Configuration对象里面成员变量的MapperRegistry的getMapper方法
```java
      public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        return mapperRegistry.getMapper(type, sqlSession);
      }
```


### mapperRegistry.getMapper(type, sqlSession):
```java
    public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
        //根据对应的接口类型获取mapperProxyFactory代理工厂
        //获取的方式就是根据之前在解析Mapper文件时,Mapper在Mapper注册中心时,将Class对象为key,value为代理工厂
        //put进去MapperRegistry里面的knownMappers的HashMap中
        //现在获取就肯定通过get(key)方法来获取mapperProxyFactory
        final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
        if (mapperProxyFactory == null) {
          throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
        }
        try {
          return mapperProxyFactory.newInstance(sqlSession);
        } catch (Exception e) {
          throw new BindingException("Error getting mapper instance. Cause: " + e, e);
        }
      }
```


### 真正获取MapperProxy的方法:
```java
      protected T newInstance(MapperProxy<T> mapperProxy) {
        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);
      }
    
      public T newInstance(SqlSession sqlSession) {
        
        final MapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface, methodCache);
        return newInstance(mapperProxy);
      }
    
```(String)
2019-10-31 15:03:13.043 DEBUG 40900 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:03:13.049 DEBUG 40900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:03:13.049 DEBUG 40900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.050 DEBUG 40900 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:03:13.051 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:03:13.051 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 6(Integer), 14(Integer)
2019-10-31 15:03:13.052 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:03:13.055 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:03:13.055 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:03:13.057 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:03:13.057 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:03:13.058 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 4(Integer), 11(Integer)
2019-10-31 15:03:13.059 DEBUG 40900 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:03:13.312  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:03:13.312  INFO 40900 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 276
2019-10-31 15:03:13.321  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:03:13.321 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:03:13.321 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:03:13.322 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:03:13.323 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:03:13.324 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:03:13.330 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:03:13.332 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.332 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:03:13.333 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.335 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.335 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.336 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.338 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.338 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:03:13.339 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.340 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.340 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.342 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.344 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.344 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.345 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.346 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.347 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:03:13.347 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.349 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.349 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:03:13.350 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.352 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.352 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:03:13.353 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.354 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.354 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.355 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.356 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:03:13.356 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:03:13.357 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:03:13.359 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:03:13.359 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:03:13.360 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:03:13.361  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:03:13.361  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 41
2019-10-31 15:03:37.263  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:03:37.264 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:03:37.264 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:03:37.267 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:03:37.269 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:03:37.269 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:03:37.270 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:03:37.271  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:03:37.271  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 15:04:15.247  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:04:15.491 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.492 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.492 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.494 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.495 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:04:15.496 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.498 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.498 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.499 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.500 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.501 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.501 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.503 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.504 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.505 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.506 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.506 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:04:15.507 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.509 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.509 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.510 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.512 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.512 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:04:15.513 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.515 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.515 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.516 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.518 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.518 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:04:15.519 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.521 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.521 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.522 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.524 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.524 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:04:15.525 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.527 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:04:15.527 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.530 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.532 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:04:15.533 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:04:15.534 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:04:15.535 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:04:15.535 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:04:15.536 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:04:15.537 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:04:15.537 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:04:15.538 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:04:15.538 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:04:15.539 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:04:15.539 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:04:15.540 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:04:15.540 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:04:15.541 DEBUG 40900 --- [http-nio-8080-exec-6] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:04:15.542 DEBUG 40900 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:04:15.542 DEBUG 40900 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:04:15.543 DEBUG 40900 --- [http-nio-8080-exec-6] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:04:15.543 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:04:15.543 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:04:15.544 DEBUG 40900 --- [http-nio-8080-exec-6] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:04:15.545  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:04:15.545  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 298
2019-10-31 15:04:20.461  INFO 40900 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.about', args=[]}
2019-10-31 15:04:20.462  INFO 40900 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : about
2019-10-31 15:04:20.462  INFO 40900 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 1
2019-10-31 15:11:21.190  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis1环境搭建', description='mybatis源码分析的环境基本搭建...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='### mybatis源码运行流程分析之搭建环境

本文分析用的是mybatis-3.5.0，jdk-1.8，maven-3.6.0
测试的源代码已经上传到github上面:[mybatis源码分析环境搭建](https://github.com/Homeofpan/mybatis-source-Analysis "mybatis源码分析环境搭建")

pom文件:
```pom
        <dependencies>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.5.2</version>
            </dependency>
    
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
            </dependency>
    
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.47</version>
            </dependency>
    
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.12</version>
            </dependency>
    
        </dependencies>
```


数据+建表:
```mysql
    CREATE TABLE `student1` (
      `id` int(5) NOT NULL AUTO_INCREMENT,
      `name` varchar(20) DEFAULT NULL,
      `age` int(3) DEFAULT NULL,
      `score` double DEFAULT NULL,
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8;
    
    -- ----------------------------
    -- Records of student
    -- ----------------------------
    INSERT INTO `student` VALUES ('1', 'a', '2', '3');
    INSERT INTO `student` VALUES ('2', 'b', '2', '3');
    INSERT INTO `student` VALUES ('3', '张三', '23', '93.5');
    INSERT INTO `student` VALUES ('4', '张三-1', '23', '93.5');
```


Pojo(java对象)
```java
    public class Student {
        private Integer id;
        private String name;
        private int age;
        private double score;
        
        //....get,set方法 toString
    }
```


#### dao接口:
```java
    public interface IStudentDao {
    
        void insertStudent(Student student);
    
        Student selectById(int id);
    }
```


#### dao的实现类:
```java
    package com.pan.dao;
    
    import com.pan.pojo.Student;
    import org.apache.ibatis.io.Resources;
    import org.apache.ibatis.session.SqlSession;
    import org.apache.ibatis.session.SqlSessionFactory;
    import org.apache.ibatis.session.SqlSessionFactoryBuilder;
    
    import java.io.IOException;
    import java.io.InputStream;
    
    /**
     * Created by pan tao on 2019/10/19
     **/
    public class IStudentDaoImpl implements IStudentDao {
    
        private SqlSession sqlSession;
    
        @Override
        public void insertStudent(Student student) {
    
            System.out.println("==========> 现在使用的是dao的手动实现类");
            try {
                //加载主配置文件
                InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
                //创建SqlSessionFactory对象
                SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                sqlSession = sqlSessionFactory.openSession();
                //相关操作
                sqlSession.insert("Pan.insertStudent", student);
    //			sqlSession.insert("insertStudent", student);
                sqlSession.commit();
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if(sqlSession != null) {
                    sqlSession.close();
                }
            }
        }
    
        @Override
        public Student selectById(int id) {
            System.out.println("==========> 现在使用的是dao的手动实现类");
            try {
                //加载主配置文件
                InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
                //创建SqlSessionFactory对象
                SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                sqlSession = sqlSessionFactory.openSession();
                //相关操作
                Student student = (Student) sqlSession.selectList("Pan.selectById", id).get(0);
    //			sqlSession.insert("insertStudent", student);
                return student;
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if(sqlSession != null) {
                    sqlSession.close();
                }
            }
            return null;
        }
    }
    
```




#### jdbc.properties
```properties
    jdbc.driver=com.mysql.jdbc.Driver
    jdbc.url=jdbc:mysql://127.0.0.1:3306/test
    jdbc.user=root
    jdbc.password=123456
```


log4j.properties:
```properties
    log4j.appender.stdout = org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.Target = System.out
    log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern = [%-5p] [%d{yyyy-MM-dd HH:mm:ss}] %c  %L %m%n
    log4j.logger.com.pan.dao.ICountryDao= debug,stdout
```


#### mybatisConfig.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-config.dtd">
    <configuration>
        <!--注册连接DB四要素的配置文件  -->
        <properties resource="jdbc.properties"/>
    
        <!--别名-->
        <typeAliases>
            <!--默认将这个包里的所有的简单类名当做别名  -->
            <package name="com.pan.pojo"/>
        </typeAliases>
    
        <!--类型处理器-->
        <typeHandlers>
            <!-- 当配置package的时候，mybatis会去配置的package扫描TypeHandler -->
            <!--<package name="con.pan.handle" />-->
    
            <!-- handler属性直接配置我们要指定的TypeHandler -->
            <!-- <typeHandler handler=""/> -->
    
            <!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 -->
            <!-- <typeHandler javaType="" handler=""/> -->
    
            <!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型 -->
            <!-- <typeHandler jdbcType="" handler=""/> -->
    
            <!-- 也可两者都配置 -->
            <!-- <typeHandler javaType="" jdbcType="" handler=""/> -->
    
            <typeHandler handler="com.pan.handler.MyHandler"/>
        </typeHandlers>
    
    
        <!--自定义插件-->
        <plugins>
            <plugin interceptor="com.pan.plugins.ExamplePlugin">
                <property name="someProperty" value="100"/>
            </plugin>
        </plugins>
    
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
    
        <!-- 注册映射文件 -->
        <mappers>
            <mapper resource="mapper/StudentMapper.xml"/>
            <mapper resource="mapper/StudentMapper2.xml"/>
        </mappers>
    </configuration>
```


#### StudentMapper.xml

#### 为了测试使用动态代理和不用动态代理的区别所以创建了两个不同命名空间的mapper.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="Pan">
    
        <insert id="insertStudent" parameterType="com.pan.pojo.Student">
            <!--放sql语句,?放属性名  -->
            insert into student1(name,age,score) values(#{name},#{age},#{score})
        </insert>
    
        <resultMap id="stuMap" type="Student">
            <id column="id" property="id" jdbcType="INTEGER" />
            <!-- <result column="name" property="name" jdbcType="VARCHAR" /> -->
            <result column="name" property="name" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
            <!--这句和上面的那句结果一样的<result column="name" property="name" typeHandler="com.pan.handler.MyHandler"/> -->
            <result column="age" property="age" jdbcType="INTEGER" />
            <result column="score" property="score" jdbcType="DOUBLE" />
        </resultMap>
    
        <select id="selectById" parameterType="int" resultMap="stuMap">
            select * from student1 where id = #{xxx}
        </select>
    </mapper>
```


#### StudentMapper2.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    
        <insert id="insertStudent" parameterType="com.pan.pojo.Student">
            <!--放sql语句,?放属性名  -->
            insert into student1(name,age,score) values(#{name},#{age},#{score})
        </insert>
    
        <resultMap id="stuMap" type="Student">
            <id column="id" property="id" jdbcType="INTEGER" />
            <!-- <result column="name" property="name" jdbcType="VARCHAR" /> -->
            <result column="name" property="name" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
            <!--这句和上面的那句结果一样的<result column="name" property="name" typeHandler="com.pan.handler.MyHandler"/> -->
            <result column="age" property="age" jdbcType="INTEGER" />
            <result column="score" property="score" jdbcType="DOUBLE" />
        </resultMap>
    
        <select id="selectById" parameterType="int" resultMap="stuMap">
            select * from student1 where id = #{xxx}
        </select>
    </mapper>
```


#### MyHandler(自定义类型处理器)
```java
    @MappedJdbcTypes(JdbcType.VARCHAR)
    public class MyHandler extends BaseTypeHandler<String> {
    
        @Override
        public void setNonNullParameter(PreparedStatement ps, int i,
                                        String parameter, JdbcType jdbcType) throws SQLException {
            ps.setString(i, parameter);
        }
    
        @Override
        public String getNullableResult(ResultSet rs, String columnName)
                throws SQLException {
            return rs.getString(columnName);
        }
    
        @Override
        public String getNullableResult(ResultSet rs, int columnIndex)
                throws SQLException {
            return rs.getString(columnIndex);
        }
    
        @Override
        public String getNullableResult(CallableStatement cs, int columnIndex)
                throws SQLException {
            return cs.getString(columnIndex);
        }
    }
```', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@2f5e7da1, {}]}
2019-10-31 15:11:21.196 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:11:21.198 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis1环境搭建(String), mybatis源码分析的环境基本搭建...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:11:21.191(Timestamp), 2019-10-31 15:11:21.191(Timestamp), ### mybatis源码运行流程分析之搭建环境

本文分析用的是mybatis-3.5.0，jdk-1.8，maven-3.6.0
测试的源代码已经上传到github上面:[mybatis源码分析环境搭建](https://github.com/Homeofpan/mybatis-source-Analysis "mybatis源码分析环境搭建")

pom文件:
```pom
        <dependencies>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.5.2</version>
            </dependency>
    
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
            </dependency>
    
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.47</version>
            </dependency>
    
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.12</version>
            </dependency>
    
        </dependencies>
```


数据+建表:
```mysql
    CREATE TABLE `student1` (
      `id` int(5) NOT NULL AUTO_INCREMENT,
      `name` varchar(20) DEFAULT NULL,
      `age` int(3) DEFAULT NULL,
      `score` double DEFAULT NULL,
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8;
    
    -- ----------------------------
    -- Records of student
    -- ----------------------------
    INSERT INTO `student` VALUES ('1', 'a', '2', '3');
    INSERT INTO `student` VALUES ('2', 'b', '2', '3');
    INSERT INTO `student` VALUES ('3', '张三', '23', '93.5');
    INSERT INTO `student` VALUES ('4', '张三-1', '23', '93.5');
```


Pojo(java对象)
```java
    public class Student {
        private Integer id;
        private String name;
        private int age;
        private double score;
        
        //....get,set方法 toString
    }
```


#### dao接口:
```java
    public interface IStudentDao {
    
        void insertStudent(Student student);
    
        Student selectById(int id);
    }
```


#### dao的实现类:
```java
    package com.pan.dao;
    
    import com.pan.pojo.Student;
    import org.apache.ibatis.io.Resources;
    import org.apache.ibatis.session.SqlSession;
    import org.apache.ibatis.session.SqlSessionFactory;
    import org.apache.ibatis.session.SqlSessionFactoryBuilder;
    
    import java.io.IOException;
    import java.io.InputStream;
    
    /**
     * Created by pan tao on 2019/10/19
     **/
    public class IStudentDaoImpl implements IStudentDao {
    
        private SqlSession sqlSession;
    
        @Override
        public void insertStudent(Student student) {
    
            System.out.println("==========> 现在使用的是dao的手动实现类");
            try {
                //加载主配置文件
                InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
                //创建SqlSessionFactory对象
                SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                sqlSession = sqlSessionFactory.openSession();
                //相关操作
                sqlSession.insert("Pan.insertStudent", student);
    //			sqlSession.insert("insertStudent", student);
                sqlSession.commit();
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if(sqlSession != null) {
                    sqlSession.close();
                }
            }
        }
    
        @Override
        public Student selectById(int id) {
            System.out.println("==========> 现在使用的是dao的手动实现类");
            try {
                //加载主配置文件
                InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
                //创建SqlSessionFactory对象
                SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
                sqlSession = sqlSessionFactory.openSession();
                //相关操作
                Student student = (Student) sqlSession.selectList("Pan.selectById", id).get(0);
    //			sqlSession.insert("insertStudent", student);
                return student;
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if(sqlSession != null) {
                    sqlSession.close();
                }
            }
            return null;
        }
    }
    
```




#### jdbc.properties
```properties
    jdbc.driver=com.mysql.jdbc.Driver
    jdbc.url=jdbc:mysql://127.0.0.1:3306/test
    jdbc.user=root
    jdbc.password=123456
```


log4j.properties:
```properties
    log4j.appender.stdout = org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.Target = System.out
    log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern = [%-5p] [%d{yyyy-MM-dd HH:mm:ss}] %c  %L %m%n
    log4j.logger.com.pan.dao.ICountryDao= debug,stdout
```


#### mybatisConfig.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-config.dtd">
    <configuration>
        <!--注册连接DB四要素的配置文件  -->
        <properties resource="jdbc.properties"/>
    
        <!--别名-->
        <typeAliases>
            <!--默认将这个包里的所有的简单类名当做别名  -->
            <package name="com.pan.pojo"/>
        </typeAliases>
    
        <!--类型处理器-->
        <typeHandlers>
            <!-- 当配置package的时候，mybatis会去配置的package扫描TypeHandler -->
            <!--<package name="con.pan.handle" />-->
    
            <!-- handler属性直接配置我们要指定的TypeHandler -->
            <!-- <typeHandler handler=""/> -->
    
            <!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 -->
            <!-- <typeHandler javaType="" handler=""/> -->
    
            <!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型 -->
            <!-- <typeHandler jdbcType="" handler=""/> -->
    
            <!-- 也可两者都配置 -->
            <!-- <typeHandler javaType="" jdbcType="" handler=""/> -->
    
            <typeHandler handler="com.pan.handler.MyHandler"/>
        </typeHandlers>
    
    
        <!--自定义插件-->
        <plugins>
            <plugin interceptor="com.pan.plugins.ExamplePlugin">
                <property name="someProperty" value="100"/>
            </plugin>
        </plugins>
    
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
    
        <!-- 注册映射文件 -->
        <mappers>
            <mapper resource="mapper/StudentMapper.xml"/>
            <mapper resource="mapper/StudentMapper2.xml"/>
        </mappers>
    </configuration>
```


#### StudentMapper.xml

#### 为了测试使用动态代理和不用动态代理的区别所以创建了两个不同命名空间的mapper.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="Pan">
    
        <insert id="insertStudent" parameterType="com.pan.pojo.Student">
            <!--放sql语句,?放属性名  -->
            insert into student1(name,age,score) values(#{name},#{age},#{score})
        </insert>
    
        <resultMap id="stuMap" type="Student">
            <id column="id" property="id" jdbcType="INTEGER" />
            <!-- <result column="name" property="name" jdbcType="VARCHAR" /> -->
            <result column="name" property="name" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
            <!--这句和上面的那句结果一样的<result column="name" property="name" typeHandler="com.pan.handler.MyHandler"/> -->
            <result column="age" property="age" jdbcType="INTEGER" />
            <result column="score" property="score" jdbcType="DOUBLE" />
        </resultMap>
    
        <select id="selectById" parameterType="int" resultMap="stuMap">
            select * from student1 where id = #{xxx}
        </select>
    </mapper>
```


#### StudentMapper2.xml
```xml
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <mapper namespace="com.pan.dao.IStudentDao">
    
        <insert id="insertStudent" parameterType="com.pan.pojo.Student">
            <!--放sql语句,?放属性名  -->
            insert into student1(name,age,score) values(#{name},#{age},#{score})
        </insert>
    
        <resultMap id="stuMap" type="Student">
            <id column="id" property="id" jdbcType="INTEGER" />
            <!-- <result column="name" property="name" jdbcType="VARCHAR" /> -->
            <result column="name" property="name" jdbcType="VARCHAR" typeHandler="com.pan.handler.MyHandler"/>
            <!--这句和上面的那句结果一样的<result column="name" property="name" typeHandler="com.pan.handler.MyHandler"/> -->
            <result column="age" property="age" jdbcType="INTEGER" />
            <result column="score" property="score" jdbcType="DOUBLE" />
        </resultMap>
    
        <select id="selectById" parameterType="int" resultMap="stuMap">
            select * from student1 where id = #{xxx}
        </select>
    </mapper>
```


#### MyHandler(自定义类型处理器)
```java
    @MappedJdbcTypes(JdbcType.VARCHAR)
    public class MyHandler extends BaseTypeHandler<String> {
    
        @Override
        public void setNonNullParameter(PreparedStatement ps, int i,
                                        String parameter, JdbcType jdbcType) throws SQLException {
            ps.setString(i, parameter);
        }
    
        @Override
        public String getNullableResult(ResultSet rs, String columnName)
                throws SQLException {
            return rs.getString(columnName);
        }
    
        @Override
        public String getNullableResult(ResultSet rs, int columnIndex)
                throws SQLException {
            return rs.getString(columnIndex);
        }
    
        @Override
        public String getNullableResult(CallableStatement cs, int columnIndex)
                throws SQLException {
            return cs.getString(columnIndex);
        }
    }
```(String)
2019-10-31 15:11:21.202 DEBUG 40900 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:11:21.205 DEBUG 40900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:11:21.205 DEBUG 40900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.206 DEBUG 40900 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:11:21.207 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:11:21.207 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 7(Integer), 14(Integer)
2019-10-31 15:11:21.208 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:11:21.211 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:11:21.211 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:11:21.217 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:11:21.218 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:11:21.218 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 5(Integer), 11(Integer)
2019-10-31 15:11:21.220 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:11:21.451  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:11:21.451  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 261
2019-10-31 15:11:21.457  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:11:21.458 DEBUG 40900 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:11:21.458 DEBUG 40900 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:11:21.459 DEBUG 40900 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:11:21.460 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:11:21.460 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:11:21.464 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:11:21.466 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.466 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:21.467 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.469 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.470 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.470 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.472 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.472 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:11:21.473 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.474 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.474 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.475 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.477 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.477 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.478 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.479 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.479 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:21.480 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.482 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.482 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:21.483 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.484 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.484 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:11:21.485 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.490 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.491 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.492 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.493 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:21.494 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:21.494 DEBUG 40900 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:21.496 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:11:21.496 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:11:21.497 DEBUG 40900 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:11:21.497  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:11:21.498  INFO 40900 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 41
2019-10-31 15:11:25.096  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.about', args=[]}
2019-10-31 15:11:25.096  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : about
2019-10-31 15:11:25.096  INFO 40900 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 0
2019-10-31 15:11:28.564  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:11:28.730 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.730 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.731 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.732 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.732 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:28.733 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.735 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.735 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.736 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.737 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.738 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:28.738 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.740 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.740 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.741 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.743 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.743 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.743 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.745 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.745 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.747 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.749 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.749 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:28.750 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.752 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.752 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.753 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.754 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.754 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:28.755 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.756 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.756 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.757 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.759 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.759 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:11:28.760 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.761 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:28.761 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:28.762 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.764 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:28.764 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:28.765 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:28.766 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:11:28.766 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:11:28.767 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:11:28.768 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:11:28.768 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:11:28.768 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:11:28.769 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:11:28.769 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:11:28.779 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:11:28.780 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:11:28.780 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:11:28.781 DEBUG 40900 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:11:28.782 DEBUG 40900 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:11:28.782 DEBUG 40900 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:11:28.783 DEBUG 40900 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:11:28.783 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:11:28.784 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:11:28.784 DEBUG 40900 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:11:28.786  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:11:28.786  INFO 40900 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 222
2019-10-31 15:11:30.661  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/29', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[29, {}]}
2019-10-31 15:11:30.662 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:11:30.663 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 29(Integer)
2019-10-31 15:11:30.664 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:30.669 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:11:30.669 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:11:30.670 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:30.671 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:11:30.671 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:11:30.672 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:11:30.673 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 15:11:30.674 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 11(Integer)
2019-10-31 15:11:30.674 DEBUG 40900 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 15:11:30.675  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 15:11:30.675  INFO 40900 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 14
2019-10-31 15:12:52.808  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:12:52.817 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:12:52.817 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:12:52.822 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:12:52.829 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:12:52.829 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:12:52.830 DEBUG 40900 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:12:52.830  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:12:52.830  INFO 40900 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 22
2019-10-31 15:21:15.190  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis源码分析2-获取sqlSession', description='mybatis的深入源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=1, createTime=null, updateTime=null, content='#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@2f5e7da1, {}]}
2019-10-31 15:21:15.201 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, recommend, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:21:15.204 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析2-获取sqlSession(String), mybatis的深入源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:21:15.191(Timestamp), 2019-10-31 15:21:15.191(Timestamp), #### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String)
2019-10-31 15:21:15.207 DEBUG 40900 --- [http-nio-8080-exec-2] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:21:15.209 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:21:15.210 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:21:15.210 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:21:15.211 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:21:15.211 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 8(Integer), 14(Integer)
2019-10-31 15:21:15.211 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:21:15.213 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:21:15.213 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:21:15.214 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:21:15.214 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:21:15.214 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 6(Integer), 11(Integer)
2019-10-31 15:21:15.215 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:21:15.432 ERROR 40900 --- [http-nio-8080-exec-2] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$a98a4956.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:21:15.432  WARN 40900 --- [http-nio-8080-exec-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:22:11.368  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:22:11.595 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.596 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.598 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.600 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.601 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:22:11.603 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.605 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.606 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.607 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.610 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.610 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:22:11.611 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.613 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.614 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.616 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.619 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.620 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.621 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.623 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.623 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.624 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.626 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.626 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:22:11.626 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.628 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.628 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.628 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.629 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.630 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:22:11.630 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.632 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.632 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.633 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.637 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.637 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:22:11.639 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.640 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:22:11.640 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:22:11.641 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.643 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:22:11.643 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:22:11.644 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:11.645 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:22:11.646 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:22:11.646 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:22:11.647 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:22:11.647 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:22:11.648 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:22:11.648 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:22:11.648 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:22:11.649 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:22:11.650 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:22:11.650 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:22:11.651 DEBUG 40900 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:22:11.651 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:22:11.652 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:22:11.652 DEBUG 40900 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:22:11.653 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:22:11.653 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:22:11.654 DEBUG 40900 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:22:11.655  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:22:11.655  INFO 40900 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 287
2019-10-31 15:22:29.659  INFO 42180 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 42180 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:22:29.659 DEBUG 42180 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:22:29.659  INFO 42180 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:22:30.705  INFO 42180 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:22:30.748  INFO 42180 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 32ms. Found 0 repository interfaces.
2019-10-31 15:22:31.247  INFO 42180 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4406730] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:22:31.605  INFO 42180 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:22:31.965  INFO 42180 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:22:34.436  INFO 42180 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:22:34.631  INFO 42180 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:22:35.287  INFO 42180 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.571 seconds (JVM running for 7.59)
2019-10-31 15:22:35.706 DEBUG 42180 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:22:35.737 DEBUG 42180 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:22:35.772 DEBUG 42180 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:22:36.049  INFO 42180 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:22:36.049  INFO 42180 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:22:36.065  INFO 42180 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:25:44.091  INFO 1308 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 1308 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:25:44.095 DEBUG 1308 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:25:44.095  INFO 1308 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:25:45.123  INFO 1308 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:25:45.175  INFO 1308 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 37ms. Found 0 repository interfaces.
2019-10-31 15:25:45.677  INFO 1308 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4406730] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:25:46.028  INFO 1308 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:25:46.391  INFO 1308 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:25:48.822  INFO 1308 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:25:48.963  INFO 1308 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:25:49.662  INFO 1308 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.651 seconds (JVM running for 7.704)
2019-10-31 15:25:50.050 DEBUG 1308 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:25:50.085 DEBUG 1308 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:25:50.117 DEBUG 1308 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:25:50.416  INFO 1308 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:25:50.416  INFO 1308 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:25:50.423  INFO 1308 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:26:23.869  INFO 37276 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 37276 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:26:23.871 DEBUG 37276 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:26:23.871  INFO 37276 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 15:26:23.908  INFO 37276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 15:26:23.908  INFO 37276 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 15:26:24.557  INFO 37276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:26:24.604  INFO 37276 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 repository interfaces.
2019-10-31 15:26:24.963  INFO 37276 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a3726636] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:26:25.426  INFO 37276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 15:26:25.504  INFO 37276 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 15:26:25.504  INFO 37276 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 15:26:25.610  INFO 37276 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 15:26:25.610  INFO 37276 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1702 ms
2019-10-31 15:26:25.761  INFO 37276 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:26:25.999  INFO 37276 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:26:27.214  INFO 37276 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:26:27.309  INFO 37276 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:26:28.048  INFO 37276 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 15:26:28.108  INFO 37276 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 15:26:28.112  INFO 37276 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 4.902 seconds (JVM running for 6.108)
2019-10-31 15:26:35.130  INFO 37276 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 15:26:35.131  INFO 37276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 15:26:35.148  INFO 37276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2019-10-31 15:26:35.182  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:26:35.587 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.615 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.640 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.647 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.647 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:35.649 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.650 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.651 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.652 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.654 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.654 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:35.655 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.657 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.658 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.659 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.661 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.661 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.662 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.664 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.664 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.665 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.666 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.668 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:35.669 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.670 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.670 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.672 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.673 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.674 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:35.674 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.676 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.676 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.677 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.679 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.679 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:26:35.680 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.682 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:35.682 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:35.683 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.685 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:35.685 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:35.686 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:35.720 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:26:35.721 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:35.722 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:35.724 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:26:35.725 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:35.728 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:26:35.733 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:26:35.733 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:35.734 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:35.736 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:26:35.736 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:26:35.738 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:26:35.745 DEBUG 37276 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:26:35.745 DEBUG 37276 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:26:35.746 DEBUG 37276 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:26:35.747 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:26:35.747 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:35.749 DEBUG 37276 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:26:35.750  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:26:35.750  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 570
2019-10-31 15:26:40.446  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 15:26:40.613 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:40.613 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.640 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.642 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:40.642 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.643 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.645 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:40.646 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.647 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.649 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:40.650 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.655 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.658 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:40.658 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.660 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.662 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:40.662 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:40.663 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.665 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:40.665 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.666 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.668 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:40.669 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:40.670 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.672 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:40.672 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:40.673 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.675 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:40.675 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:26:40.676 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:40.677 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:26:40.678 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:40.679 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:40.680 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:26:40.680 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:40.681 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:26:40.682 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:26:40.682 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:40.683 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:40.684 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:26:40.684 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:26:40.686 DEBUG 37276 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:26:40.687 DEBUG 37276 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:26:40.687 DEBUG 37276 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:26:40.688 DEBUG 37276 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:26:40.688 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:26:40.688 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:40.689 DEBUG 37276 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:26:40.690  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:26:40.690  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 244
2019-10-31 15:26:49.100  INFO 37276 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 15:26:49.268 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.269 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.270 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.271 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.272 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:49.273 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.281 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.281 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.282 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.283 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.284 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:49.284 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.286 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.286 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.287 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.288 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.288 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.289 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.291 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.291 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.294 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.296 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.296 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:49.297 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.298 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.298 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.299 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.300 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.300 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:49.301 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.303 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.303 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.304 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.306 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.306 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:26:49.307 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.308 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:49.309 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:49.309 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.311 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:49.312 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:49.313 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:49.314 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:26:49.314 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:49.315 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:49.316 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:26:49.316 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:49.317 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:26:49.317 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:26:49.318 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:26:49.318 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:26:49.319 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:26:49.319 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:26:49.321 DEBUG 37276 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:26:49.323 DEBUG 37276 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:26:49.323 DEBUG 37276 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:26:49.324 DEBUG 37276 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:26:49.324 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:26:49.324 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:26:49.326 DEBUG 37276 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:26:49.328  INFO 37276 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:26:49.328  INFO 37276 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 228
2019-10-31 15:26:51.524  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/29', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[29, {}]}
2019-10-31 15:26:51.526 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:26:51.526 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 29(Integer)
2019-10-31 15:26:51.530 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:51.572 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:26:51.572 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:26:51.573 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:51.575 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:26:51.575 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:26:51.576 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:26:51.577 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 15:26:51.577 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 11(Integer)
2019-10-31 15:26:51.578 DEBUG 37276 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 15:26:51.578  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 15:26:51.578  INFO 37276 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 54
2019-10-31 15:26:59.624  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 15:26:59.628  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 15:26:59.628  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 4
2019-10-31 15:27:05.300  INFO 37276 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@29eb1569]}
2019-10-31 15:27:05.312 DEBUG 37276 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 15:27:05.313 DEBUG 37276 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 15:27:05.314 DEBUG 37276 --- [http-nio-8080-exec-6] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 15:27:05.316  INFO 37276 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 15:27:05.316  INFO 37276 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 16
2019-10-31 15:27:05.331  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 15:27:05.333  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 15:27:05.333  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 15:27:06.709  INFO 37276 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:27:06.715 DEBUG 37276 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:27:06.715 DEBUG 37276 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:27:06.716 DEBUG 37276 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:27:06.717 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:27:06.718 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:27:06.724 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:27:06.726 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.727 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:27:06.728 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.730 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.730 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:06.730 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.732 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.732 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:27:06.733 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.735 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.735 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:06.736 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.737 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.737 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:06.738 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.740 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.740 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:27:06.741 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.742 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.743 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:27:06.743 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.745 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.745 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:27:06.746 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.747 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.748 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:06.748 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.749 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:06.749 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:06.750 DEBUG 37276 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:06.753 DEBUG 37276 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:27:06.753 DEBUG 37276 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:27:06.754 DEBUG 37276 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:27:06.755  INFO 37276 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:27:06.755  INFO 37276 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 46
2019-10-31 15:27:10.394  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:27:10.396 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:27:10.396 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:27:10.396 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:27:10.397 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:27:10.398 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:27:10.400 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 3
2019-10-31 15:27:10.401 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:10.402 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:10.402 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:10.404 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:10.404 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:10.405 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:10.407 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:10.408 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:10.408 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:10.410 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:27:10.410 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:27:10.411 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:27:10.411  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:27:10.411  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 17
2019-10-31 15:27:13.868  INFO 37276 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/30/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.toModifyPage', args=[30, {}]}
2019-10-31 15:27:13.870 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:27:13.870 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:27:13.871 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:27:13.874 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:27:13.874 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:27:13.875 DEBUG 37276 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:27:13.878 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:27:13.878 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:27:13.879 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:13.881 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:27:13.881 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:27:13.882 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:13.882  INFO 37276 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:27:13.882  INFO 37276 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 14
2019-10-31 15:27:28.202  INFO 37276 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=30, uid=null, typeid=null, tagids='11', title='mybatis源码分析2', description='mybatis的深入源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=1, createTime=null, updateTime=null, content='#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@29eb1569, {}]}
2019-10-31 15:27:28.204 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:27:28.204 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:27:28.208 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:28.210 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:27:28.211 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:27:28.212 DEBUG 37276 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:27:28.215 DEBUG 37276 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:27:28.218 DEBUG 37276 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析2(String), mybatis的深入源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:27:28.203(Timestamp), 2019-10-31 15:27:28.203(Timestamp), #### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 30(Integer)
2019-10-31 15:27:28.221 DEBUG 37276 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:27:28.439 ERROR 37276 --- [http-nio-8080-exec-1] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$72ebba83.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:27:28.440  WARN 37276 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:28:23.474  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:28:23.475 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:28:23.475 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:28:23.476 DEBUG 37276 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:28:23.478 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:28:23.478 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:28:23.481 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:28:23.483 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.484 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:28:23.484 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.486 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.486 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:28:23.487 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.488 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.488 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:28:23.489 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.490 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.490 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:28:23.491 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.493 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.493 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:28:23.494 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.496 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.496 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:28:23.497 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.498 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.499 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:28:23.499 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.500 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.501 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:28:23.502 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.503 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.503 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:28:23.504 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.505 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:28:23.506 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:28:23.506 DEBUG 37276 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:28:23.508 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:28:23.508 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:28:23.509 DEBUG 37276 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:28:23.509  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:28:23.509  INFO 37276 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 35
2019-10-31 15:28:26.780  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:28:26.782 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:28:26.782 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:28:26.783 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:28:26.785 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:28:26.785 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:28:26.786 DEBUG 37276 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:28:26.787  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:28:26.787  INFO 37276 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 7
2019-10-31 15:29:13.751  INFO 37276 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis源码分析二', description='myabtis源码分析如何获取sqlSessionfactory', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@29eb1569, {}]}
2019-10-31 15:29:13.754 DEBUG 37276 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:29:13.757 DEBUG 37276 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析二(String), myabtis源码分析如何获取sqlSessionfactory(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:29:13.752(Timestamp), 2019-10-31 15:29:13.752(Timestamp), #### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String)
2019-10-31 15:29:13.760 DEBUG 37276 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:29:13.765 DEBUG 37276 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:29:13.765 DEBUG 37276 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:29:13.767 DEBUG 37276 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:29:13.767 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:29:13.768 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 9(Integer), 14(Integer)
2019-10-31 15:29:13.768 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:29:13.771 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:29:13.771 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:29:13.772 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:29:13.772 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:29:13.773 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:29:13.774 DEBUG 37276 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:29:14.048 ERROR 37276 --- [http-nio-8080-exec-5] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$72ebba83.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:29:14.049  WARN 37276 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:36:31.289  INFO 36492 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 36492 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:36:31.289 DEBUG 36492 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:36:31.289  INFO 36492 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:36:32.370  INFO 36492 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:36:32.421  INFO 36492 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 0 repository interfaces.
2019-10-31 15:36:32.942  INFO 36492 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$15a9e122] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:36:33.295  INFO 36492 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:36:33.683  INFO 36492 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:36:36.091  INFO 36492 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:36:36.236  INFO 36492 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:36:36.979  INFO 36492 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.538 seconds (JVM running for 7.56)
2019-10-31 15:36:37.426 DEBUG 36492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:36:37.519 DEBUG 36492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:36:37.551 DEBUG 36492 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:36:38.800  INFO 36492 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:36:38.800  INFO 36492 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:36:38.812  INFO 36492 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:37:36.518  INFO 31580 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 31580 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:37:36.518 DEBUG 31580 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:37:36.518  INFO 31580 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:37:37.432  INFO 31580 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:37:37.483  INFO 31580 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 0 repository interfaces.
2019-10-31 15:37:38.039  INFO 31580 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8258eb25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:37:38.393  INFO 31580 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:37:38.757  INFO 31580 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:37:41.182  INFO 31580 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:37:41.321  INFO 31580 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:37:42.034  INFO 31580 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.468 seconds (JVM running for 7.607)
2019-10-31 15:37:42.428 DEBUG 31580 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:37:42.463 DEBUG 31580 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:37:42.490 DEBUG 31580 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:37:42.611  INFO 31580 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:37:42.611  INFO 31580 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:37:42.619  INFO 31580 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:38:26.085  INFO 6900 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 6900 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:38:26.085 DEBUG 6900 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:38:26.085  INFO 6900 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:38:27.337  INFO 6900 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:38:27.384  INFO 6900 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 33ms. Found 0 repository interfaces.
2019-10-31 15:38:27.899  INFO 6900 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$662e5627] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:38:28.268  INFO 6900 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:38:28.638  INFO 6900 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:38:31.066  INFO 6900 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:38:31.208  INFO 6900 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:38:31.883  INFO 6900 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.773 seconds (JVM running for 7.818)
2019-10-31 15:38:32.285 DEBUG 6900 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:38:32.318 DEBUG 6900 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 29(Integer)
2019-10-31 15:38:32.349 DEBUG 6900 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:38:32.860  INFO 6900 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:38:32.860  INFO 6900 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:38:32.872  INFO 6900 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:39:23.779  INFO 5944 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 5944 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:39:23.779 DEBUG 5944 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:39:23.779  INFO 5944 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 15:39:23.822  INFO 5944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 15:39:23.822  INFO 5944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 15:39:24.496  INFO 5944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:39:24.535  INFO 5944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24ms. Found 0 repository interfaces.
2019-10-31 15:39:24.902  INFO 5944 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9c871766] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:39:25.372  INFO 5944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 15:39:25.450  INFO 5944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 15:39:25.450  INFO 5944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 15:39:25.571  INFO 5944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 15:39:25.571  INFO 5944 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1749 ms
2019-10-31 15:39:25.722  INFO 5944 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:39:25.968  INFO 5944 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:39:27.276  INFO 5944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:39:27.382  INFO 5944 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:39:28.199  INFO 5944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 15:39:28.264  INFO 5944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 15:39:28.268  INFO 5944 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.231 seconds (JVM running for 6.368)
2019-10-31 15:39:34.404  INFO 5944 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 15:39:34.404  INFO 5944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 15:39:34.421  INFO 5944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
2019-10-31 15:39:34.444  INFO 5944 --- [http-nio-8080-exec-1] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 15:39:34.464  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 15:39:34.466  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 15:39:34.467  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 5
2019-10-31 15:39:39.122  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@6335b6b7]}
2019-10-31 15:39:39.290 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 15:39:39.313 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 15:39:39.338 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 15:39:39.341  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 15:39:39.342  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 220
2019-10-31 15:39:39.356  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 15:39:39.357  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 15:39:39.358  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 15:39:40.636  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:39:40.664 DEBUG 5944 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:39:40.664 DEBUG 5944 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:39:40.666 DEBUG 5944 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:39:40.668 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:39:40.669 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:39:40.678 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:39:40.682 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.683 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:40.687 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.688 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.689 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:40.690 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.691 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.692 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:39:40.692 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.695 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.695 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:40.696 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.698 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.698 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:40.699 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.701 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.702 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:40.703 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.706 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.706 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:40.707 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.709 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.709 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:39:40.710 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.711 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.711 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:40.712 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.714 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:40.714 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:40.715 DEBUG 5944 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:40.717 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:39:40.717 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:39:40.721 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:39:40.722  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:39:40.722  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 86
2019-10-31 15:39:42.017  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:39:42.024 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:39:42.024 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:39:42.026 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:39:42.029 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:39:42.030 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:39:42.033 DEBUG 5944 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:39:42.036  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:39:42.036  INFO 5944 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 19
2019-10-31 15:39:55.348  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='dsad', description='sadasd', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='sadas', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@6335b6b7, {}]}
2019-10-31 15:39:55.353 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:39:55.357 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), dsad(String), sadasd(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:39:55.349(Timestamp), 2019-10-31 15:39:55.349(Timestamp), sadas(String)
2019-10-31 15:39:55.358 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:39:55.365 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:39:55.365 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.366 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:39:55.367 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:39:55.368 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 10(Integer), 14(Integer)
2019-10-31 15:39:55.368 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:39:55.371 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:39:55.371 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:39:55.372 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:39:55.373 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:39:55.374 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 8(Integer), 11(Integer)
2019-10-31 15:39:55.376 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:39:55.717  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:39:55.718  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 369
2019-10-31 15:39:55.724  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:39:55.726 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:39:55.726 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:39:55.727 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:39:55.728 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:39:55.729 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:39:55.736 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:39:55.738 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.739 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:55.740 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.742 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.742 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.743 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.745 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.745 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:39:55.746 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.748 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.748 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.749 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.751 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.751 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.752 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.754 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.755 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:55.756 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.757 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.758 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:39:55.760 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.768 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.768 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:39:55.769 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.770 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.771 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.772 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.780 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:55.781 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:55.782 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:55.784 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:39:55.784 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:39:55.785 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:39:55.786  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:39:55.786  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 62
2019-10-31 15:39:59.082  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:39:59.083 DEBUG 5944 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:39:59.083 DEBUG 5944 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:39:59.084 DEBUG 5944 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:39:59.086 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:39:59.086 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:39:59.089 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:39:59.090 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:59.091 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:59.091 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:59.094 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:59.094 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:59.095 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:59.096 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:59.097 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:59.097 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:59.099 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:59.099 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:59.100 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:59.101 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:39:59.101 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:39:59.102 DEBUG 5944 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:39:59.102 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:39:59.102 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:39:59.102 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:39:59.102  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:39:59.102  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 20
2019-10-31 15:41:43.287  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 1, {}]}
2019-10-31 15:41:43.292 DEBUG 5944 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:41:43.293 DEBUG 5944 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:41:43.294 DEBUG 5944 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:41:43.295 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:41:43.296 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:41:43.299 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:41:43.303 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.303 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:41:43.304 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.312 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.312 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:43.313 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.315 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.315 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:41:43.316 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.317 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.318 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:43.319 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.320 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.321 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:43.321 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.323 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.323 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:41:43.324 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.325 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.325 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:41:43.326 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.327 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.328 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:41:43.329 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.330 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.330 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:43.331 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.332 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:43.332 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:43.333 DEBUG 5944 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:43.334 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:41:43.334 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:41:43.335 DEBUG 5944 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:41:43.336  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:41:43.336  INFO 5944 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 49
2019-10-31 15:41:49.192  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:41:49.192 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:41:49.193 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:41:49.193 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:41:49.194 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:41:49.195 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:41:49.197 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:41:49.198 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:49.199 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:49.199 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:49.201 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:49.201 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:49.202 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:49.204 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:49.204 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:49.212 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:49.214 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:49.214 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:49.214 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:49.216 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:49.216 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:49.216 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:49.218 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:41:49.218 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:41:49.220 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:41:49.221  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:41:49.221  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 29
2019-10-31 15:41:53.638  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/31/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.toModifyPage', args=[31, {}]}
2019-10-31 15:41:53.639 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:41:53.639 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:41:53.641 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:41:53.643 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:41:53.643 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:41:53.644 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:41:53.650 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:41:53.650 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 31(Integer)
2019-10-31 15:41:53.651 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:53.655 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:41:53.656 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:41:53.657 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:41:53.658  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:41:53.658  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 20
2019-10-31 15:42:04.576  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=31, uid=null, typeid=null, tagids='11', title='mybatis源码分析二', description='myabtis源码分析如何获取sqlSessionfactory', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=0, flag='原创', recommend=null, createTime=null, updateTime=null, content='#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@6335b6b7, {}]}
2019-10-31 15:42:04.580 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:42:04.580 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 31(Integer)
2019-10-31 15:42:04.582 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:04.583 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:42:04.584 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 31(Integer)
2019-10-31 15:42:04.585 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:04.586 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:42:04.589 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析二(String), myabtis源码分析如何获取sqlSessionfactory(String), /images/a(String), 0(Integer), 0(Integer), 原创(String), 2019-10-31 15:42:04.579(Timestamp), 2019-10-31 15:42:04.579(Timestamp), #### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 31(Integer)
2019-10-31 15:42:04.593 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:42:04.812 ERROR 5944 --- [http-nio-8080-exec-9] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$575b587b.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:42:04.813  WARN 5944 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:42:24.165  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:42:24.166 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:42:24.167 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:42:24.167 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:42:24.168 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:42:24.168 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:42:24.171 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:42:24.173 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.173 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:24.174 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.176 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.176 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:24.177 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.178 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.179 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:24.179 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.181 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.181 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:24.186 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.188 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.188 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:24.189 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.191 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.191 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:24.192 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.194 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.194 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:24.195 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.197 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.197 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:24.198 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.199 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.199 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:24.200 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.201 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:24.201 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:24.202 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:24.204 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:24.204 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:24.217 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:24.218  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:42:24.218  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 53
2019-10-31 15:42:30.449  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:42:30.450 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:42:30.450 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:42:30.451 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:42:30.453 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:42:30.453 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:42:30.455 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:42:30.456 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:30.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:30.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:30.459 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:30.459 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:30.460 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:30.461 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:30.462 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:30.462 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:30.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:30.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:30.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:30.466 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:30.466 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:30.467 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:30.468 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:30.468 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:30.469 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:30.470  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:42:30.470  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 21
2019-10-31 15:42:31.850  INFO 5944 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/30/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[30, {}]}
2019-10-31 15:42:31.851 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:42:31.851 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:42:31.852 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:31.854 DEBUG 5944 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:42:31.854 DEBUG 5944 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:42:31.855 DEBUG 5944 --- [http-nio-8080-exec-8] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:42:31.855 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:42:31.856 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 9(Integer), 14(Integer)
2019-10-31 15:42:31.856 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:42:31.860 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:42:31.860 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:42:31.861 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:42:31.861 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:42:31.862 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:42:31.863 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:42:31.864 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 15:42:31.865 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 30(Integer)
2019-10-31 15:42:31.865 DEBUG 5944 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 15:42:32.086  INFO 5944 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:42:32.086  INFO 5944 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 236
2019-10-31 15:42:32.090  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:42:32.091 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:42:32.091 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:42:32.091 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:42:32.092 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:42:32.093 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:42:32.095 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:42:32.097 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.097 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:32.098 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.099 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.100 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:32.100 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.102 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.102 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:32.103 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.104 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.105 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:32.105 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.106 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.107 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:32.107 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.109 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.109 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:32.110 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.111 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.111 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:32.112 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.113 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.113 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:32.114 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.115 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.115 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:32.116 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.117 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:32.117 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:32.118 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:32.119 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:32.119 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:32.120 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:32.121  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:42:32.121  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 31
2019-10-31 15:42:33.704  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:42:33.705 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:42:33.705 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:42:33.706 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:42:33.707 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:42:33.707 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:42:33.709 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 15:42:33.710 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:33.710 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:33.711 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:33.712 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:33.712 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:33.713 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:33.714 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:33.715 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:33.715 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:33.716 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:33.716 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:33.717 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:33.719 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:33.719 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:33.720 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:33.720  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:42:33.720  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 16
2019-10-31 15:42:35.433  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/31/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[31, {}]}
2019-10-31 15:42:35.434 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:42:35.434 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 31(Integer)
2019-10-31 15:42:35.436 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.437 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:42:35.437 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.438 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:42:35.439 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:42:35.439 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 8(Integer), 14(Integer)
2019-10-31 15:42:35.440 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:42:35.443 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:42:35.444 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:42:35.444 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:42:35.445 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:42:35.445 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 6(Integer), 11(Integer)
2019-10-31 15:42:35.446 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:42:35.447 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 15:42:35.447 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 31(Integer)
2019-10-31 15:42:35.447 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 15:42:35.571  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:42:35.571  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 138
2019-10-31 15:42:35.575  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:42:35.576 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:42:35.576 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:42:35.576 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:42:35.577 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:42:35.577 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:42:35.580 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:42:35.581 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.581 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:35.582 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.583 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.584 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.584 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.585 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.586 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:35.586 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.587 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.588 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.588 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.589 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.590 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.590 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.591 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.592 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:35.592 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.593 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.594 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:42:35.594 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.595 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.595 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:42:35.596 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.597 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.597 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.598 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.599 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:42:35.599 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:42:35.601 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:42:35.602 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:35.602 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:35.603 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:35.604  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:42:35.604  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 29
2019-10-31 15:42:37.084  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:42:37.086 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:42:37.086 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:42:37.088 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:42:37.089 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:42:37.090 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:42:37.091 DEBUG 5944 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:42:37.092  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:42:37.092  INFO 5944 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 15:43:38.556  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='myabtis源码分析2', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=1, createTime=null, updateTime=null, content='### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@6335b6b7, {}]}
2019-10-31 15:43:38.563 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, recommend, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:43:38.566 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), myabtis源码分析2(String), mybatis...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:43:38.558(Timestamp), 2019-10-31 15:43:38.558(Timestamp), ### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String)
2019-10-31 15:43:38.569 DEBUG 5944 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:43:38.572 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:43:38.573 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:43:38.574 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:43:38.574 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:43:38.575 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 9(Integer), 14(Integer)
2019-10-31 15:43:38.575 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:43:38.578 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:43:38.578 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:43:38.579 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:43:38.580 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:43:38.580 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:43:38.582 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:43:38.788 ERROR 5944 --- [http-nio-8080-exec-7] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$575b587b.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:43:38.789  WARN 5944 --- [http-nio-8080-exec-7] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:45:01.152  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='myabtis源码分析2', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=0, createTime=null, updateTime=null, content='jj', type=Type{id=15, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@6335b6b7, {}]}
2019-10-31 15:45:01.158 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, recommend, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:45:01.159 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 15(Integer), 11(String), myabtis源码分析2(String), mybatis...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 0(Integer), 2019-10-31 15:45:01.152(Timestamp), 2019-10-31 15:45:01.152(Timestamp), jj(String)
2019-10-31 15:45:01.159 DEBUG 5944 --- [http-nio-8080-exec-10] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:45:01.162 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:45:01.162 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 15(Integer)
2019-10-31 15:45:01.163 DEBUG 5944 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:45:01.163 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:45:01.164 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: ssm(String), 3(Integer), 15(Integer)
2019-10-31 15:45:01.164 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:45:01.178 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:45:01.178 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:45:01.179 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:45:01.179 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:45:01.179 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 8(Integer), 11(Integer)
2019-10-31 15:45:01.181 DEBUG 5944 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:45:01.415  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:45:01.415  INFO 5944 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 263
2019-10-31 15:45:01.420  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:45:01.422 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:45:01.422 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:45:01.423 DEBUG 5944 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:45:01.425 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:45:01.425 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:45:01.430 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:45:01.433 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.433 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:01.435 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.438 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.439 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:01.440 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.443 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.443 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:45:01.444 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.446 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.446 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:01.447 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.451 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.451 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:01.452 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.454 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.454 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:01.455 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.457 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.457 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:01.457 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.459 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.459 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:45:01.459 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.461 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.461 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:01.462 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.463 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:01.463 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:01.464 DEBUG 5944 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:01.465 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:45:01.465 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:45:01.466 DEBUG 5944 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:45:01.467  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:45:01.467  INFO 5944 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 47
2019-10-31 15:45:03.834  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:45:03.963 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:45:03.963 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:45:03.963 DEBUG 5944 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:45:03.964 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:45:03.964 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:45:03.966 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:45:03.968 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:03.968 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:03.969 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:03.969 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:03.969 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:03.969 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:03.973 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:03.973 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:03.973 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:03.975 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:03.975 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:03.975 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:03.976 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:03.976 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:45:03.976 DEBUG 5944 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:03.978 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:45:03.978 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:45:03.978 DEBUG 5944 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:45:03.979  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:45:03.979  INFO 5944 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 145
2019-10-31 15:45:11.451  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/34/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[34, {}]}
2019-10-31 15:45:11.452 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:45:11.452 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 34(Integer)
2019-10-31 15:45:11.454 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.456 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:45:11.456 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 15(Integer)
2019-10-31 15:45:11.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:45:11.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:45:11.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: ssm(String), 2(Integer), 15(Integer)
2019-10-31 15:45:11.457 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:45:11.461 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:45:11.461 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:45:11.461 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:45:11.462 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:45:11.462 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:45:11.463 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:45:11.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 15:45:11.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 34(Integer)
2019-10-31 15:45:11.464 DEBUG 5944 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 15:45:11.606  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:45:11.606  INFO 5944 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 155
2019-10-31 15:45:11.612  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:45:11.613 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:45:11.615 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:45:11.616 DEBUG 5944 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:45:11.618 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:45:11.618 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:45:11.622 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:45:11.624 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.625 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:11.626 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.628 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.628 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:11.629 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.631 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.632 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:45:11.633 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.635 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.635 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:11.636 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.638 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.638 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:11.639 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.642 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.642 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:11.643 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.645 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.645 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:45:11.646 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.648 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.649 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:45:11.649 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.651 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.652 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:11.652 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.653 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:11.654 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:11.654 DEBUG 5944 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:11.656 DEBUG 5944 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:45:11.656 DEBUG 5944 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:45:11.657 DEBUG 5944 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:45:11.658  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:45:11.658  INFO 5944 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 46
2019-10-31 15:45:13.553  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:45:13.554 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:45:13.554 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:45:13.555 DEBUG 5944 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:45:13.555 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:45:13.556 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:45:13.557 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 15:45:13.558 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:13.559 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:13.559 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:13.560 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:13.561 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:13.561 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:13.563 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:13.563 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:13.564 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:13.565 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:45:13.565 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:45:13.565 DEBUG 5944 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:45:13.567 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:45:13.567 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:45:13.567 DEBUG 5944 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:45:13.568  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:45:13.568  INFO 5944 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 15:48:51.874  INFO 12160 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 12160 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:48:51.919 DEBUG 12160 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:48:51.919  INFO 12160 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 15:48:52.874  INFO 12160 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:48:52.925  INFO 12160 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 37ms. Found 0 repository interfaces.
2019-10-31 15:48:53.442  INFO 12160 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$eb70431a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:48:53.804  INFO 12160 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:48:54.170  INFO 12160 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:48:56.635  INFO 12160 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:48:56.813  INFO 12160 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:48:57.505  INFO 12160 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.605 seconds (JVM running for 7.774)
2019-10-31 15:48:57.916 DEBUG 12160 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:48:57.950 DEBUG 12160 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:48:57.981 DEBUG 12160 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:48:59.226  INFO 12160 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 15:48:59.228  INFO 12160 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 15:48:59.237  INFO 12160 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 15:49:24.192  INFO 30816 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 30816 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 15:49:24.194 DEBUG 30816 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 15:49:24.194  INFO 30816 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 15:49:24.233  INFO 30816 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 15:49:24.233  INFO 30816 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 15:49:24.890  INFO 30816 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 15:49:24.927  INFO 30816 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 29ms. Found 0 repository interfaces.
2019-10-31 15:49:25.292  INFO 30816 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9961d10b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 15:49:25.750  INFO 30816 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 15:49:25.820  INFO 30816 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 15:49:25.820  INFO 30816 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 15:49:25.930  INFO 30816 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 15:49:25.933  INFO 30816 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1700 ms
2019-10-31 15:49:26.090  INFO 30816 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 15:49:26.329  INFO 30816 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 15:49:27.552  INFO 30816 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 15:49:27.649  INFO 30816 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 15:49:28.382  INFO 30816 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 15:49:28.444  INFO 30816 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 15:49:28.444  INFO 30816 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 4.859 seconds (JVM running for 5.889)
2019-10-31 15:49:34.730  INFO 30816 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 15:49:34.730  INFO 30816 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 15:49:34.746  INFO 30816 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2019-10-31 15:49:34.779  INFO 30816 --- [http-nio-8080-exec-1] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 15:49:34.802  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 15:49:34.806  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 15:49:34.806  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 15:49:38.636  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@498959a8]}
2019-10-31 15:49:38.790 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 15:49:38.816 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 15:49:38.840 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 15:49:38.845  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 15:49:38.845  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 209
2019-10-31 15:49:38.858  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 15:49:38.860  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 15:49:38.860  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 15:49:48.041  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:49:48.069 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:49:48.069 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:49:48.071 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:49:48.075 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:49:48.076 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:49:48.084 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:49:48.090 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.091 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:49:48.092 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.094 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.094 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:48.095 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.097 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.097 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:49:48.098 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.100 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.100 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:48.101 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.103 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.103 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:48.104 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.106 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.107 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:49:48.108 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.111 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.111 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:49:48.112 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.114 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.114 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:49:48.115 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.116 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.117 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:48.118 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.119 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:48.119 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:48.120 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:48.124 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:49:48.124 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:49:48.127 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:49:48.128  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:49:48.128  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 87
2019-10-31 15:49:50.860  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:49:50.862 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:49:50.862 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:49:50.863 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:49:50.865 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:49:50.866 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:49:50.869 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 15:49:50.872 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:50.872 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:50.873 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:50.874 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:50.875 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:50.876 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:50.878 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:50.878 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:50.879 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:50.880 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:49:50.880 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:49:50.882 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:49:50.884 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:49:50.884 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:49:50.886 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:49:50.887  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:49:50.887  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 28
2019-10-31 15:49:52.787  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:49:52.792 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:49:52.793 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:49:52.795 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:49:52.796 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:49:52.797 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:49:52.798 DEBUG 30816 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:49:52.799  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:49:52.799  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 12
2019-10-31 15:50:10.878  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:50:11.217 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.218 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.220 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.222 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.223 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:11.224 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.226 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.226 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.228 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.230 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.230 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:11.232 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.234 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.235 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.236 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.239 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.240 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:11.241 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.248 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.248 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.250 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.252 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.252 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.253 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.260 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.260 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.261 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.263 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.263 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:11.264 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.267 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.267 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.268 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.270 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.270 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:11.271 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.272 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:11.273 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:11.273 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.275 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:11.275 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:50:11.276 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:11.279 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:50:11.279 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:11.280 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:11.281 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:50:11.282 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:11.283 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:50:11.285 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:50:11.286 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:11.286 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:11.288 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:50:11.288 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:50:11.290 DEBUG 30816 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:50:11.295 DEBUG 30816 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:50:11.295 DEBUG 30816 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:50:11.296 DEBUG 30816 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:50:11.296 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:50:11.296 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:11.298 DEBUG 30816 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:50:11.299  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:50:11.299  INFO 30816 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 421
2019-10-31 15:50:28.682  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 15:50:28.854 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.855 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.856 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.857 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.857 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:28.858 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.860 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.860 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.861 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.863 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.863 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.864 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.865 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.865 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.866 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.868 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.868 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.869 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.871 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.872 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.873 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.874 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.875 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:28.875 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.877 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.877 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.878 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.879 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.880 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:28.881 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.882 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:28.882 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:28.883 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.884 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:28.885 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:50:28.885 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:28.887 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:50:28.887 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:28.887 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:28.888 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:50:28.889 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:28.890 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:50:28.890 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:50:28.891 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:28.891 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:28.892 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:50:28.893 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:50:28.894 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:50:28.895 DEBUG 30816 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:50:28.895 DEBUG 30816 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:50:28.896 DEBUG 30816 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:50:28.897 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:50:28.897 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:28.898 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:50:28.899  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:50:28.899  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 217
2019-10-31 15:50:34.425  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 15:50:34.583 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.583 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.584 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.586 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.586 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:34.587 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.588 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.588 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.591 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.592 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.592 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:34.593 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.595 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.595 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.596 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.598 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.598 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:34.599 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.600 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.601 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.601 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.603 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.603 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.604 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.605 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.605 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.606 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.608 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.608 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:34.609 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.611 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.612 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.612 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.614 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.615 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:50:34.615 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.616 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:50:34.617 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:50:34.617 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.619 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:50:34.619 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:50:34.620 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:50:34.622 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:50:34.622 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:34.623 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:34.624 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:50:34.624 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:34.625 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:50:34.625 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:50:34.625 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:50:34.626 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:50:34.626 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:50:34.627 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:50:34.628 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:50:34.629 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:50:34.629 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:50:34.630 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:50:34.630 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:50:34.630 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:50:34.631 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:50:34.632  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:50:34.633  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 208
2019-10-31 15:52:48.934  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis源码分析3', description='mybatis执行sql语句的过程源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=1, createTime=null, updateTime=null, content='[实验代码下载](https://github.com/Homeofpan/mybatis-source-Analysis "实验代码下载")
流程图:
[![流程图](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")


首先先说明一下大概的一个执行sql语句的原理:DefaultSqlSession内有一个Executor,真正执行sql语句的是这个执行器Executor,这是一个接口;

然后执行流程大概是:DaultSqlSession.xxx方法()--->MapperProxy.execute()----->MapperMethod.xxx方法---->SqlSession--->Executor

要分析sql的执行流程，还得从org.apache.ibatis.binding.MapperProxy这个类开始讲，因为上面获取到的是一个动态代理对象MapperProxy，里面就包含了我们的接口。现在我们来看看这个类,这里只放出重要的方法，其他的省略

    public class MapperProxy<T> implements InvocationHandler, Serializable {
    
      private static final long serialVersionUID = -6424540398559729838L;
      private final SqlSession sqlSession;
      private final Class<T> mapperInterface;
      private final Map<Method, MapperMethod> methodCache;
    
      //这是执行sql真正的方法
      //并且这是执行sql方法的第一步:
      /**
       * proxy:动态代理的对象
       * method:需要执行的方法
       * args:方法需要的参数,也就是执行方法传入的参数
      * */
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          //判断该方法的接口(或类)的Class对象是否与Object的Class对象一样
          if (Object.class.equals(method.getDeclaringClass())) {
            return method.invoke(this, args);
          } else if (method.isDefault()) {
            if (privateLookupInMethod == null) {
              return invokeDefaultMethodJava8(proxy, method, args);
            } else {
              return invokeDefaultMethodJava9(proxy, method, args);
            }
          }
        } catch (Throwable t) {
          throw ExceptionUtil.unwrapThrowable(t);
        }
        //获取mapper中与需要调用的方法相同的mapperMethod
        final MapperMethod mapperMethod = cachedMapperMethod(method);
        //此处真正调用sql语句
        return mapperMethod.execute(sqlSession, args);
      }
    }



执行Sql语句过程:

进入mapperMethod.execute(sqlSession, args)方法:

      //该方法根据sql语句的类型进行判断需要执行哪种方法
      public Object execute(SqlSession sqlSession, Object[] args) {
        Object result;
        switch (command.getType()) {
          //.....省略一些代码,本文针对select方法进行分析
          case SELECT:
            //判断方法是否有返回值和method是否存在ResultHandler
            if (method.returnsVoid() && method.hasResultHandler()) {
              //存在的话就以ResultHandler执行
              executeWithResultHandler(sqlSession, args);
              result = null;
              //判断返回值是否返回多个值
            } else if (method.returnsMany()) {
              result = executeForMany(sqlSession, args);
              //判断返回值是否返回一个Map
            } else if (method.returnsMap()) {
              result = executeForMap(sqlSession, args);
            } else if (method.returnsCursor()) {
              result = executeForCursor(sqlSession, args);
            } else {
              //将方法的传入参数转换为sql语句的参数
              Object param = method.convertArgsToSqlCommandParam(args);
              //该方法执行查询语句
              result = sqlSession.selectOne(command.getName(), param);
              if (method.returnsOptional()
                  && (result == null || !method.getReturnType().equals(result.getClass()))) {
                result = Optional.ofNullable(result);
              }
            }
            break;
    
         //返回执行结果
        return result;
      }



      /**
      * 方法参数:
      *       statement:命名空间+方法名称
      *       parameter:方法传入的参数
      * */
      @Override
      public <T> T selectOne(String statement, Object parameter) {
        // Popular vote was to return null on 0 results and throw exception on too many.
        //调用重载方法执行查询
        List<T> list = this.selectList(statement, parameter);
        //该方法是查询一个结果数据的,如果查询到的list大于1,就会抛出异常
        if (list.size() == 1) {
          return list.get(0);
        } else if (list.size() > 1) {
          throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());
        } else {
          //没有查到则返回null
          return null;
        }
      }



继续跟进this.selectList(statement, parameter):

      /**
       * 这里调用自己的重载方法:
       *              第三个参数:RowBounds.DEFAULT:是一个mybatis的自带的一个逻辑分页对象,使用该对象能实现分页
       * 这里的RowBounds对象默认是RowBounds类本身创建好的一个对象,没有设置过什么
      * */
      @Override
      public <E> List<E> selectList(String statement, Object parameter) {
        return this.selectList(statement, parameter, RowBounds.DEFAULT);
      }



继续进入this.selectList(statement, parameter, RowBounds.DEFAULT)

      @Override
      public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
        try {
          //根据statement在configuration中获取对应方法的那个子标签的所有内容,也就是sql对应的标签的所有内容
          MappedStatement ms = configuration.getMappedStatement(statement);
          //符合了流程的第四步了
          return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }

这里在执行executor.query方法之前,mybatis可以自定义一些plugin去对Executor进行拦截,原理就是拦截器,意味着在执行Executor方法前能做一些东西,在该实验中,我加上了一个简单的自定义插件,那么执行该方法时就会进入以下方法执行拦截器;

mybatis中有个org.apache.ibatis.plugin.Plugin类,用来存放自定义的plugin

      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          Set<Method> methods = signatureMap.get(method.getDeclaringClass());
          if (methods != null && methods.contains(method)) {
            //执行拦截器方法
            return interceptor.intercept(new Invocation(target, method, args));
          }
          return method.invoke(target, args);
        } catch (Exception e) {
          throw ExceptionUtil.unwrapThrowable(e);
        }
      }



interceptor.intercept(new Invocation(target, method, args)):

自定义的plugin中的intercept方法

        public Object intercept(Invocation invocation) throws Throwable {
            // implement pre processing if need
            System.out.println("============> before method");
            //这里才真正执行executor.query
            Object returnObject = invocation.proceed();
            // implement post processing if need
            System.out.println("============> after method");
            return returnObject;
        }







Executor执行sql的过程:

Executor.query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)

      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        //获取sql语句
        BoundSql boundSql = ms.getBoundSql(parameterObject);
        //为该select的sql语句设置一个缓存key,值为命名空间+方法名称+查询的完成sql语句带上参数的
        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
        //执行查询
        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }



执行重载方法:

      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)
          throws SQLException {
        //获取缓存该sql对应标签的cache标签值
        Cache cache = ms.getCache();
        //这里猜测:如果缓存存在的话就去找缓存
        if (cache != null) {
          flushCacheIfRequired(ms);
          if (ms.isUseCache() && resultHandler == null) {
            ensureNoOutParams(ms, boundSql);
            @SuppressWarnings("unchecked")
            List<E> list = (List<E>) tcm.getObject(cache, key);
            if (list == null) {
              list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
              tcm.putObject(cache, key, list); // issue #578 and #116
            }
            return list;
          }
        }
        //缓存不存在就执行这里
        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }



delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql):

这里是执行BaseExecutor的方法:

      @SuppressWarnings("unchecked")
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
        //判断executor是否已经关闭了
        if (closed) {
          throw new ExecutorException("Executor was closed.");
        }
        //判断localCache是否需要刷新,因为一级缓存的作用域在同一个sqlSession
        //所以如果新的sqlSession来使用的话需要刷新一下缓存
        if (queryStack == 0 && ms.isFlushCacheRequired()) {
          //刷新缓存,底层原理:hashMap的clear()方法将map中所有entry都清空
          clearLocalCache();
        }
        List<E> list;
        try {
          queryStack++;
          //判断resultHandler是否为null,不为空则直接从一级缓存localCache中以key拿出对应的查询结果
          //由此看出一级缓存PerpetualCache localCache里面存在一个hashMap的成员变量存放缓存
          //key:cacheKey:nameSpace+接口方法名+sql语句+传入的参数
          //value:查询的结果集
          list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
          if (list != null) {
            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
          } else {
            //从数据库中查询
            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
          }
        } finally {
          queryStack--;
        }
        if (queryStack == 0) {
          for (DeferredLoad deferredLoad : deferredLoads) {
            deferredLoad.load();
          }
          // issue #601
          deferredLoads.clear();
          if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
            // issue #482
            clearLocalCache();
          }
        }
        return list;
      }

queryFromDatabase(......):

      private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        List<E> list;
        //localCache是一个 PerpetualCache类型的对象,该对象里面存在一个HashMap
        //该方法就是hashMap.put方法.key为前面在CachingExecutor创建的cacheKey
        localCache.putObject(key, EXECUTION_PLACEHOLDER);
        try {
          list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
        } finally {
          //防止存在相同的key存在,所以先清空该位置
          localCache.removeObject(key);
        }
        //将新的key,value通过hashMap.put方法,put进localCache进行保存
        localCache.putObject(key, list);
        if (ms.getStatementType() == StatementType.CALLABLE) {
          localOutputParameterCache.putObject(key, parameter);
        }
        return list;
      }



      //这里就是底层jdbc的操作
      @Override
      public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
        Statement stmt = null;
        try {
          //获取主配置类
          Configuration configuration = ms.getConfiguration();
          StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
          stmt = prepareStatement(handler, ms.getStatementLog());
          //执行查询,并且返回结果
          return handler.query(stmt, resultHandler);
        } finally {
          //关闭资源
          closeStatement(stmt);
        }
      }



handler.query(stmt, resultHandler);

      public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        //执行sql语句
        ps.execute();
        //返回所有结果的一个ArrayList,这里还做了java对象的封装,根据字段一个一个将结果集
        return resultSetHandler.handleResultSets(ps);
      }', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:52:48.950 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, recommend, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:52:48.954 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析3(String), mybatis执行sql语句的过程源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:52:48.934(Timestamp), 2019-10-31 15:52:48.934(Timestamp), [实验代码下载](https://github.com/Homeofpan/mybatis-source-Analysis "实验代码下载")
流程图:
[![流程图](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")


首先先说明一下大概的一个执行sql语句的原理:DefaultSqlSession内有一个Executor,真正执行sql语句的是这个执行器Executor,这是一个接口;

然后执行流程大概是:DaultSqlSession.xxx方法()--->MapperProxy.execute()----->MapperMethod.xxx方法---->SqlSession--->Executor

要分析sql的执行流程，还得从org.apache.ibatis.binding.MapperProxy这个类开始讲，因为上面获取到的是一个动态代理对象MapperProxy，里面就包含了我们的接口。现在我们来看看这个类,这里只放出重要的方法，其他的省略

    public class MapperProxy<T> implements InvocationHandler, Serializable {
    
      private static final long serialVersionUID = -6424540398559729838L;
      private final SqlSession sqlSession;
      private final Class<T> mapperInterface;
      private final Map<Method, MapperMethod> methodCache;
    
      //这是执行sql真正的方法
      //并且这是执行sql方法的第一步:
      /**
       * proxy:动态代理的对象
       * method:需要执行的方法
       * args:方法需要的参数,也就是执行方法传入的参数
      * */
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          //判断该方法的接口(或类)的Class对象是否与Object的Class对象一样
          if (Object.class.equals(method.getDeclaringClass())) {
            return method.invoke(this, args);
          } else if (method.isDefault()) {
            if (privateLookupInMethod == null) {
              return invokeDefaultMethodJava8(proxy, method, args);
            } else {
              return invokeDefaultMethodJava9(proxy, method, args);
            }
          }
        } catch (Throwable t) {
          throw ExceptionUtil.unwrapThrowable(t);
        }
        //获取mapper中与需要调用的方法相同的mapperMethod
        final MapperMethod mapperMethod = cachedMapperMethod(method);
        //此处真正调用sql语句
        return mapperMethod.execute(sqlSession, args);
      }
    }



执行Sql语句过程:

进入mapperMethod.execute(sqlSession, args)方法:

      //该方法根据sql语句的类型进行判断需要执行哪种方法
      public Object execute(SqlSession sqlSession, Object[] args) {
        Object result;
        switch (command.getType()) {
          //.....省略一些代码,本文针对select方法进行分析
          case SELECT:
            //判断方法是否有返回值和method是否存在ResultHandler
            if (method.returnsVoid() && method.hasResultHandler()) {
              //存在的话就以ResultHandler执行
              executeWithResultHandler(sqlSession, args);
              result = null;
              //判断返回值是否返回多个值
            } else if (method.returnsMany()) {
              result = executeForMany(sqlSession, args);
              //判断返回值是否返回一个Map
            } else if (method.returnsMap()) {
              result = executeForMap(sqlSession, args);
            } else if (method.returnsCursor()) {
              result = executeForCursor(sqlSession, args);
            } else {
              //将方法的传入参数转换为sql语句的参数
              Object param = method.convertArgsToSqlCommandParam(args);
              //该方法执行查询语句
              result = sqlSession.selectOne(command.getName(), param);
              if (method.returnsOptional()
                  && (result == null || !method.getReturnType().equals(result.getClass()))) {
                result = Optional.ofNullable(result);
              }
            }
            break;
    
         //返回执行结果
        return result;
      }



      /**
      * 方法参数:
      *       statement:命名空间+方法名称
      *       parameter:方法传入的参数
      * */
      @Override
      public <T> T selectOne(String statement, Object parameter) {
        // Popular vote was to return null on 0 results and throw exception on too many.
        //调用重载方法执行查询
        List<T> list = this.selectList(statement, parameter);
        //该方法是查询一个结果数据的,如果查询到的list大于1,就会抛出异常
        if (list.size() == 1) {
          return list.get(0);
        } else if (list.size() > 1) {
          throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());
        } else {
          //没有查到则返回null
          return null;
        }
      }



继续跟进this.selectList(statement, parameter):

      /**
       * 这里调用自己的重载方法:
       *              第三个参数:RowBounds.DEFAULT:是一个mybatis的自带的一个逻辑分页对象,使用该对象能实现分页
       * 这里的RowBounds对象默认是RowBounds类本身创建好的一个对象,没有设置过什么
      * */
      @Override
      public <E> List<E> selectList(String statement, Object parameter) {
        return this.selectList(statement, parameter, RowBounds.DEFAULT);
      }



继续进入this.selectList(statement, parameter, RowBounds.DEFAULT)

      @Override
      public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
        try {
          //根据statement在configuration中获取对应方法的那个子标签的所有内容,也就是sql对应的标签的所有内容
          MappedStatement ms = configuration.getMappedStatement(statement);
          //符合了流程的第四步了
          return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }

这里在执行executor.query方法之前,mybatis可以自定义一些plugin去对Executor进行拦截,原理就是拦截器,意味着在执行Executor方法前能做一些东西,在该实验中,我加上了一个简单的自定义插件,那么执行该方法时就会进入以下方法执行拦截器;

mybatis中有个org.apache.ibatis.plugin.Plugin类,用来存放自定义的plugin

      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          Set<Method> methods = signatureMap.get(method.getDeclaringClass());
          if (methods != null && methods.contains(method)) {
            //执行拦截器方法
            return interceptor.intercept(new Invocation(target, method, args));
          }
          return method.invoke(target, args);
        } catch (Exception e) {
          throw ExceptionUtil.unwrapThrowable(e);
        }
      }



interceptor.intercept(new Invocation(target, method, args)):

自定义的plugin中的intercept方法

        public Object intercept(Invocation invocation) throws Throwable {
            // implement pre processing if need
            System.out.println("============> before method");
            //这里才真正执行executor.query
            Object returnObject = invocation.proceed();
            // implement post processing if need
            System.out.println("============> after method");
            return returnObject;
        }







Executor执行sql的过程:

Executor.query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)

      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        //获取sql语句
        BoundSql boundSql = ms.getBoundSql(parameterObject);
        //为该select的sql语句设置一个缓存key,值为命名空间+方法名称+查询的完成sql语句带上参数的
        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
        //执行查询
        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }



执行重载方法:

      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)
          throws SQLException {
        //获取缓存该sql对应标签的cache标签值
        Cache cache = ms.getCache();
        //这里猜测:如果缓存存在的话就去找缓存
        if (cache != null) {
          flushCacheIfRequired(ms);
          if (ms.isUseCache() && resultHandler == null) {
            ensureNoOutParams(ms, boundSql);
            @SuppressWarnings("unchecked")
            List<E> list = (List<E>) tcm.getObject(cache, key);
            if (list == null) {
              list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
              tcm.putObject(cache, key, list); // issue #578 and #116
            }
            return list;
          }
        }
        //缓存不存在就执行这里
        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }



delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql):

这里是执行BaseExecutor的方法:

      @SuppressWarnings("unchecked")
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
        //判断executor是否已经关闭了
        if (closed) {
          throw new ExecutorException("Executor was closed.");
        }
        //判断localCache是否需要刷新,因为一级缓存的作用域在同一个sqlSession
        //所以如果新的sqlSession来使用的话需要刷新一下缓存
        if (queryStack == 0 && ms.isFlushCacheRequired()) {
          //刷新缓存,底层原理:hashMap的clear()方法将map中所有entry都清空
          clearLocalCache();
        }
        List<E> list;
        try {
          queryStack++;
          //判断resultHandler是否为null,不为空则直接从一级缓存localCache中以key拿出对应的查询结果
          //由此看出一级缓存PerpetualCache localCache里面存在一个hashMap的成员变量存放缓存
          //key:cacheKey:nameSpace+接口方法名+sql语句+传入的参数
          //value:查询的结果集
          list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
          if (list != null) {
            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
          } else {
            //从数据库中查询
            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
          }
        } finally {
          queryStack--;
        }
        if (queryStack == 0) {
          for (DeferredLoad deferredLoad : deferredLoads) {
            deferredLoad.load();
          }
          // issue #601
          deferredLoads.clear();
          if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
            // issue #482
            clearLocalCache();
          }
        }
        return list;
      }

queryFromDatabase(......):

      private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        List<E> list;
        //localCache是一个 PerpetualCache类型的对象,该对象里面存在一个HashMap
        //该方法就是hashMap.put方法.key为前面在CachingExecutor创建的cacheKey
        localCache.putObject(key, EXECUTION_PLACEHOLDER);
        try {
          list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
        } finally {
          //防止存在相同的key存在,所以先清空该位置
          localCache.removeObject(key);
        }
        //将新的key,value通过hashMap.put方法,put进localCache进行保存
        localCache.putObject(key, list);
        if (ms.getStatementType() == StatementType.CALLABLE) {
          localOutputParameterCache.putObject(key, parameter);
        }
        return list;
      }



      //这里就是底层jdbc的操作
      @Override
      public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
        Statement stmt = null;
        try {
          //获取主配置类
          Configuration configuration = ms.getConfiguration();
          StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
          stmt = prepareStatement(handler, ms.getStatementLog());
          //执行查询,并且返回结果
          return handler.query(stmt, resultHandler);
        } finally {
          //关闭资源
          closeStatement(stmt);
        }
      }



handler.query(stmt, resultHandler);

      public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        //执行sql语句
        ps.execute();
        //返回所有结果的一个ArrayList,这里还做了java对象的封装,根据字段一个一个将结果集
        return resultSetHandler.handleResultSets(ps);
      }(String)
2019-10-31 15:52:48.956 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:52:48.960 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:52:48.960 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:52:48.961 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:52:48.961 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:52:48.961 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 10(Integer), 14(Integer)
2019-10-31 15:52:48.962 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:52:48.965 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:52:48.965 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:52:48.966 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:52:48.967 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:52:48.968 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 8(Integer), 11(Integer)
2019-10-31 15:52:48.969 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:52:49.340  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:52:49.340  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 406
2019-10-31 15:52:49.347  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:52:49.348 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:52:49.349 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:52:49.350 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:52:49.351 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:52:49.352 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:52:49.357 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:52:49.359 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.360 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:52:49.360 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.362 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.362 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:49.363 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.365 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.365 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:52:49.366 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.367 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.367 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:49.368 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.369 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.369 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:49.370 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.371 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.371 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:52:49.372 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.373 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.374 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:52:49.374 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.376 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.376 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:52:49.376 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.377 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.378 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:49.378 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.380 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:49.380 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:49.382 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:49.383 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:52:49.384 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:52:49.385 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:52:49.385  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:52:49.385  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 38
2019-10-31 15:52:53.113  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:52:53.115 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:52:53.115 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:52:53.115 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:52:53.116 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:52:53.117 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:52:53.119 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:52:53.120 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:53.120 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:53.121 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:53.122 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:53.122 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:53.123 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:53.124 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:53.124 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:53.125 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:53.126 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:53.126 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:53.127 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:53.128 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:53.129 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:53.129 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:53.131 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:52:53.131 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:52:53.132 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:52:53.132  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:52:53.132  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 19
2019-10-31 15:52:57.662  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/35/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.toModifyPage', args=[35, {}]}
2019-10-31 15:52:57.664 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:52:57.664 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:52:57.665 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:52:57.667 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:52:57.667 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:52:57.667 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:52:57.669 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:52:57.669 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 35(Integer)
2019-10-31 15:52:57.670 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:57.671 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:52:57.671 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:52:57.672 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:52:57.674  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:52:57.674  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 12
2019-10-31 15:55:31.682  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=35, uid=null, typeid=null, tagids='11', title='mybatis源码分析3', description='mybatis执行sql语句的过程源码分析', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=1, createTime=null, updateTime=null, content='[实验代码下载](https://github.com/Homeofpan/mybatis-source-Analysis "实验代码下载")
流程图:
[![流程图](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")


#### 首先先说明一下大概的一个执行sql语句的原理:DefaultSqlSession内有一个Executor,真正执行sql语句的是这个执行器Executor,这是一个接口;

### 然后执行流程大概是:DaultSqlSession.xxx方法()--->MapperProxy.execute()----->MapperMethod.xxx方法---->SqlSession--->Executor

要分析sql的执行流程，还得从org.apache.ibatis.binding.MapperProxy这个类开始讲，因为上面获取到的是一个动态代理对象MapperProxy，里面就包含了我们的接口。现在我们来看看这个类,这里只放出重要的方法，其他的省略
```java
    public class MapperProxy<T> implements InvocationHandler, Serializable {
    
      private static final long serialVersionUID = -6424540398559729838L;
      private final SqlSession sqlSession;
      private final Class<T> mapperInterface;
      private final Map<Method, MapperMethod> methodCache;
    
      //这是执行sql真正的方法
      //并且这是执行sql方法的第一步:
      /**
       * proxy:动态代理的对象
       * method:需要执行的方法
       * args:方法需要的参数,也就是执行方法传入的参数
      * */
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          //判断该方法的接口(或类)的Class对象是否与Object的Class对象一样
          if (Object.class.equals(method.getDeclaringClass())) {
            return method.invoke(this, args);
          } else if (method.isDefault()) {
            if (privateLookupInMethod == null) {
              return invokeDefaultMethodJava8(proxy, method, args);
            } else {
              return invokeDefaultMethodJava9(proxy, method, args);
            }
          }
        } catch (Throwable t) {
          throw ExceptionUtil.unwrapThrowable(t);
        }
        //获取mapper中与需要调用的方法相同的mapperMethod
        final MapperMethod mapperMethod = cachedMapperMethod(method);
        //此处真正调用sql语句
        return mapperMethod.execute(sqlSession, args);
      }
    }
```


### 执行Sql语句过程:

#### 进入mapperMethod.execute(sqlSession, args)方法:
```java
      //该方法根据sql语句的类型进行判断需要执行哪种方法
      public Object execute(SqlSession sqlSession, Object[] args) {
        Object result;
        switch (command.getType()) {
          //.....省略一些代码,本文针对select方法进行分析
          case SELECT:
            //判断方法是否有返回值和method是否存在ResultHandler
            if (method.returnsVoid() && method.hasResultHandler()) {
              //存在的话就以ResultHandler执行
              executeWithResultHandler(sqlSession, args);
              result = null;
              //判断返回值是否返回多个值
            } else if (method.returnsMany()) {
              result = executeForMany(sqlSession, args);
              //判断返回值是否返回一个Map
            } else if (method.returnsMap()) {
              result = executeForMap(sqlSession, args);
            } else if (method.returnsCursor()) {
              result = executeForCursor(sqlSession, args);
            } else {
              //将方法的传入参数转换为sql语句的参数
              Object param = method.convertArgsToSqlCommandParam(args);
              //该方法执行查询语句
              result = sqlSession.selectOne(command.getName(), param);
              if (method.returnsOptional()
                  && (result == null || !method.getReturnType().equals(result.getClass()))) {
                result = Optional.ofNullable(result);
              }
            }
            break;
    
         //返回执行结果
        return result;
      }



      /**
      * 方法参数:
      *       statement:命名空间+方法名称
      *       parameter:方法传入的参数
      * */
      @Override
      public <T> T selectOne(String statement, Object parameter) {
        // Popular vote was to return null on 0 results and throw exception on too many.
        //调用重载方法执行查询
        List<T> list = this.selectList(statement, parameter);
        //该方法是查询一个结果数据的,如果查询到的list大于1,就会抛出异常
        if (list.size() == 1) {
          return list.get(0);
        } else if (list.size() > 1) {
          throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());
        } else {
          //没有查到则返回null
          return null;
        }
      }
```


### 继续跟进this.selectList(statement, parameter):
```java
      /**
       * 这里调用自己的重载方法:
       *              第三个参数:RowBounds.DEFAULT:是一个mybatis的自带的一个逻辑分页对象,使用该对象能实现分页
       * 这里的RowBounds对象默认是RowBounds类本身创建好的一个对象,没有设置过什么
      * */
      @Override
      public <E> List<E> selectList(String statement, Object parameter) {
        return this.selectList(statement, parameter, RowBounds.DEFAULT);
      }
```


### 继续进入this.selectList(statement, parameter, RowBounds.DEFAULT)
```java
      @Override
      public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
        try {
          //根据statement在configuration中获取对应方法的那个子标签的所有内容,也就是sql对应的标签的所有内容
          MappedStatement ms = configuration.getMappedStatement(statement);
          //符合了流程的第四步了
          return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```
#### 这里在执行executor.query方法之前,mybatis可以自定义一些plugin去对Executor进行拦截,原理就是拦截器,意味着在执行Executor方法前能做一些东西,在该实验中,我加上了一个简单的自定义插件,那么执行该方法时就会进入以下方法执行拦截器;

mybatis中有个org.apache.ibatis.plugin.Plugin类,用来存放自定义的plugin
```java
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          Set<Method> methods = signatureMap.get(method.getDeclaringClass());
          if (methods != null && methods.contains(method)) {
            //执行拦截器方法
            return interceptor.intercept(new Invocation(target, method, args));
          }
          return method.invoke(target, args);
        } catch (Exception e) {
          throw ExceptionUtil.unwrapThrowable(e);
        }
      }
```


#### interceptor.intercept(new Invocation(target, method, args)):

自定义的plugin中的intercept方法
```java
        public Object intercept(Invocation invocation) throws Throwable {
            // implement pre processing if need
            System.out.println("============> before method");
            //这里才真正执行executor.query
            Object returnObject = invocation.proceed();
            // implement post processing if need
            System.out.println("============> after method");
            return returnObject;
        }
```






### Executor执行sql的过程:

#### Executor.query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)
```java
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        //获取sql语句
        BoundSql boundSql = ms.getBoundSql(parameterObject);
        //为该select的sql语句设置一个缓存key,值为命名空间+方法名称+查询的完成sql语句带上参数的
        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
        //执行查询
        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }
```


执行重载方法:
```java
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)
          throws SQLException {
        //获取缓存该sql对应标签的cache标签值
        Cache cache = ms.getCache();
        //这里猜测:如果缓存存在的话就去找缓存
        if (cache != null) {
          flushCacheIfRequired(ms);
          if (ms.isUseCache() && resultHandler == null) {
            ensureNoOutParams(ms, boundSql);
            @SuppressWarnings("unchecked")
            List<E> list = (List<E>) tcm.getObject(cache, key);
            if (list == null) {
              list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
              tcm.putObject(cache, key, list); // issue #578 and #116
            }
            return list;
          }
        }
        //缓存不存在就执行这里
        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }
```


#### delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql):

### 这里是执行BaseExecutor的方法:
```java
      @SuppressWarnings("unchecked")
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
        //判断executor是否已经关闭了
        if (closed) {
          throw new ExecutorException("Executor was closed.");
        }
        //判断localCache是否需要刷新,因为一级缓存的作用域在同一个sqlSession
        //所以如果新的sqlSession来使用的话需要刷新一下缓存
        if (queryStack == 0 && ms.isFlushCacheRequired()) {
          //刷新缓存,底层原理:hashMap的clear()方法将map中所有entry都清空
          clearLocalCache();
        }
        List<E> list;
        try {
          queryStack++;
          //判断resultHandler是否为null,不为空则直接从一级缓存localCache中以key拿出对应的查询结果
          //由此看出一级缓存PerpetualCache localCache里面存在一个hashMap的成员变量存放缓存
          //key:cacheKey:nameSpace+接口方法名+sql语句+传入的参数
          //value:查询的结果集
          list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
          if (list != null) {
            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
          } else {
            //从数据库中查询
            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
          }
        } finally {
          queryStack--;
        }
        if (queryStack == 0) {
          for (DeferredLoad deferredLoad : deferredLoads) {
            deferredLoad.load();
          }
          // issue #601
          deferredLoads.clear();
          if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
            // issue #482
            clearLocalCache();
          }
        }
        return list;
      }
```
### queryFromDatabase(......):
```java
      private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        List<E> list;
        //localCache是一个 PerpetualCache类型的对象,该对象里面存在一个HashMap
        //该方法就是hashMap.put方法.key为前面在CachingExecutor创建的cacheKey
        localCache.putObject(key, EXECUTION_PLACEHOLDER);
        try {
          list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
        } finally {
          //防止存在相同的key存在,所以先清空该位置
          localCache.removeObject(key);
        }
        //将新的key,value通过hashMap.put方法,put进localCache进行保存
        localCache.putObject(key, list);
        if (ms.getStatementType() == StatementType.CALLABLE) {
          localOutputParameterCache.putObject(key, parameter);
        }
        return list;
      }



      //这里就是底层jdbc的操作
      @Override
      public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
        Statement stmt = null;
        try {
          //获取主配置类
          Configuration configuration = ms.getConfiguration();
          StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
          stmt = prepareStatement(handler, ms.getStatementLog());
          //执行查询,并且返回结果
          return handler.query(stmt, resultHandler);
        } finally {
          //关闭资源
          closeStatement(stmt);
        }
      }
```


#### handler.query(stmt, resultHandler);
```java
      public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        //执行sql语句
        ps.execute();
        //返回所有结果的一个ArrayList,这里还做了java对象的封装,根据字段一个一个将结果集
        return resultSetHandler.handleResultSets(ps);
      }
```', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:55:31.686 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:55:31.687 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 35(Integer)
2019-10-31 15:55:31.689 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:31.691 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:55:31.691 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 35(Integer)
2019-10-31 15:55:31.692 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:31.693 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:55:31.694 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码分析3(String), mybatis执行sql语句的过程源码分析(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:55:31.682(Timestamp), 2019-10-31 15:55:31.682(Timestamp), [实验代码下载](https://github.com/Homeofpan/mybatis-source-Analysis "实验代码下载")
流程图:
[![流程图](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")](http://irats.cn:8888/group1/M00/00/00/rBECIl13pXGADHfHAAG9rgWuxkg243.png "流程图")


#### 首先先说明一下大概的一个执行sql语句的原理:DefaultSqlSession内有一个Executor,真正执行sql语句的是这个执行器Executor,这是一个接口;

### 然后执行流程大概是:DaultSqlSession.xxx方法()--->MapperProxy.execute()----->MapperMethod.xxx方法---->SqlSession--->Executor

要分析sql的执行流程，还得从org.apache.ibatis.binding.MapperProxy这个类开始讲，因为上面获取到的是一个动态代理对象MapperProxy，里面就包含了我们的接口。现在我们来看看这个类,这里只放出重要的方法，其他的省略
```java
    public class MapperProxy<T> implements InvocationHandler, Serializable {
    
      private static final long serialVersionUID = -6424540398559729838L;
      private final SqlSession sqlSession;
      private final Class<T> mapperInterface;
      private final Map<Method, MapperMethod> methodCache;
    
      //这是执行sql真正的方法
      //并且这是执行sql方法的第一步:
      /**
       * proxy:动态代理的对象
       * method:需要执行的方法
       * args:方法需要的参数,也就是执行方法传入的参数
      * */
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          //判断该方法的接口(或类)的Class对象是否与Object的Class对象一样
          if (Object.class.equals(method.getDeclaringClass())) {
            return method.invoke(this, args);
          } else if (method.isDefault()) {
            if (privateLookupInMethod == null) {
              return invokeDefaultMethodJava8(proxy, method, args);
            } else {
              return invokeDefaultMethodJava9(proxy, method, args);
            }
          }
        } catch (Throwable t) {
          throw ExceptionUtil.unwrapThrowable(t);
        }
        //获取mapper中与需要调用的方法相同的mapperMethod
        final MapperMethod mapperMethod = cachedMapperMethod(method);
        //此处真正调用sql语句
        return mapperMethod.execute(sqlSession, args);
      }
    }
```


### 执行Sql语句过程:

#### 进入mapperMethod.execute(sqlSession, args)方法:
```java
      //该方法根据sql语句的类型进行判断需要执行哪种方法
      public Object execute(SqlSession sqlSession, Object[] args) {
        Object result;
        switch (command.getType()) {
          //.....省略一些代码,本文针对select方法进行分析
          case SELECT:
            //判断方法是否有返回值和method是否存在ResultHandler
            if (method.returnsVoid() && method.hasResultHandler()) {
              //存在的话就以ResultHandler执行
              executeWithResultHandler(sqlSession, args);
              result = null;
              //判断返回值是否返回多个值
            } else if (method.returnsMany()) {
              result = executeForMany(sqlSession, args);
              //判断返回值是否返回一个Map
            } else if (method.returnsMap()) {
              result = executeForMap(sqlSession, args);
            } else if (method.returnsCursor()) {
              result = executeForCursor(sqlSession, args);
            } else {
              //将方法的传入参数转换为sql语句的参数
              Object param = method.convertArgsToSqlCommandParam(args);
              //该方法执行查询语句
              result = sqlSession.selectOne(command.getName(), param);
              if (method.returnsOptional()
                  && (result == null || !method.getReturnType().equals(result.getClass()))) {
                result = Optional.ofNullable(result);
              }
            }
            break;
    
         //返回执行结果
        return result;
      }



      /**
      * 方法参数:
      *       statement:命名空间+方法名称
      *       parameter:方法传入的参数
      * */
      @Override
      public <T> T selectOne(String statement, Object parameter) {
        // Popular vote was to return null on 0 results and throw exception on too many.
        //调用重载方法执行查询
        List<T> list = this.selectList(statement, parameter);
        //该方法是查询一个结果数据的,如果查询到的list大于1,就会抛出异常
        if (list.size() == 1) {
          return list.get(0);
        } else if (list.size() > 1) {
          throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());
        } else {
          //没有查到则返回null
          return null;
        }
      }
```


### 继续跟进this.selectList(statement, parameter):
```java
      /**
       * 这里调用自己的重载方法:
       *              第三个参数:RowBounds.DEFAULT:是一个mybatis的自带的一个逻辑分页对象,使用该对象能实现分页
       * 这里的RowBounds对象默认是RowBounds类本身创建好的一个对象,没有设置过什么
      * */
      @Override
      public <E> List<E> selectList(String statement, Object parameter) {
        return this.selectList(statement, parameter, RowBounds.DEFAULT);
      }
```


### 继续进入this.selectList(statement, parameter, RowBounds.DEFAULT)
```java
      @Override
      public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {
        try {
          //根据statement在configuration中获取对应方法的那个子标签的所有内容,也就是sql对应的标签的所有内容
          MappedStatement ms = configuration.getMappedStatement(statement);
          //符合了流程的第四步了
          return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```
#### 这里在执行executor.query方法之前,mybatis可以自定义一些plugin去对Executor进行拦截,原理就是拦截器,意味着在执行Executor方法前能做一些东西,在该实验中,我加上了一个简单的自定义插件,那么执行该方法时就会进入以下方法执行拦截器;

mybatis中有个org.apache.ibatis.plugin.Plugin类,用来存放自定义的plugin
```java
      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        try {
          Set<Method> methods = signatureMap.get(method.getDeclaringClass());
          if (methods != null && methods.contains(method)) {
            //执行拦截器方法
            return interceptor.intercept(new Invocation(target, method, args));
          }
          return method.invoke(target, args);
        } catch (Exception e) {
          throw ExceptionUtil.unwrapThrowable(e);
        }
      }
```


#### interceptor.intercept(new Invocation(target, method, args)):

自定义的plugin中的intercept方法
```java
        public Object intercept(Invocation invocation) throws Throwable {
            // implement pre processing if need
            System.out.println("============> before method");
            //这里才真正执行executor.query
            Object returnObject = invocation.proceed();
            // implement post processing if need
            System.out.println("============> after method");
            return returnObject;
        }
```






### Executor执行sql的过程:

#### Executor.query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)
```java
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {
        //获取sql语句
        BoundSql boundSql = ms.getBoundSql(parameterObject);
        //为该select的sql语句设置一个缓存key,值为命名空间+方法名称+查询的完成sql语句带上参数的
        CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);
        //执行查询
        return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }
```


执行重载方法:
```java
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)
          throws SQLException {
        //获取缓存该sql对应标签的cache标签值
        Cache cache = ms.getCache();
        //这里猜测:如果缓存存在的话就去找缓存
        if (cache != null) {
          flushCacheIfRequired(ms);
          if (ms.isUseCache() && resultHandler == null) {
            ensureNoOutParams(ms, boundSql);
            @SuppressWarnings("unchecked")
            List<E> list = (List<E>) tcm.getObject(cache, key);
            if (list == null) {
              list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
              tcm.putObject(cache, key, list); // issue #578 and #116
            }
            return list;
          }
        }
        //缓存不存在就执行这里
        return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
      }
```


#### delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql):

### 这里是执行BaseExecutor的方法:
```java
      @SuppressWarnings("unchecked")
      @Override
      public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
        //判断executor是否已经关闭了
        if (closed) {
          throw new ExecutorException("Executor was closed.");
        }
        //判断localCache是否需要刷新,因为一级缓存的作用域在同一个sqlSession
        //所以如果新的sqlSession来使用的话需要刷新一下缓存
        if (queryStack == 0 && ms.isFlushCacheRequired()) {
          //刷新缓存,底层原理:hashMap的clear()方法将map中所有entry都清空
          clearLocalCache();
        }
        List<E> list;
        try {
          queryStack++;
          //判断resultHandler是否为null,不为空则直接从一级缓存localCache中以key拿出对应的查询结果
          //由此看出一级缓存PerpetualCache localCache里面存在一个hashMap的成员变量存放缓存
          //key:cacheKey:nameSpace+接口方法名+sql语句+传入的参数
          //value:查询的结果集
          list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
          if (list != null) {
            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
          } else {
            //从数据库中查询
            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
          }
        } finally {
          queryStack--;
        }
        if (queryStack == 0) {
          for (DeferredLoad deferredLoad : deferredLoads) {
            deferredLoad.load();
          }
          // issue #601
          deferredLoads.clear();
          if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
            // issue #482
            clearLocalCache();
          }
        }
        return list;
      }
```
### queryFromDatabase(......):
```java
      private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {
        List<E> list;
        //localCache是一个 PerpetualCache类型的对象,该对象里面存在一个HashMap
        //该方法就是hashMap.put方法.key为前面在CachingExecutor创建的cacheKey
        localCache.putObject(key, EXECUTION_PLACEHOLDER);
        try {
          list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
        } finally {
          //防止存在相同的key存在,所以先清空该位置
          localCache.removeObject(key);
        }
        //将新的key,value通过hashMap.put方法,put进localCache进行保存
        localCache.putObject(key, list);
        if (ms.getStatementType() == StatementType.CALLABLE) {
          localOutputParameterCache.putObject(key, parameter);
        }
        return list;
      }



      //这里就是底层jdbc的操作
      @Override
      public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
        Statement stmt = null;
        try {
          //获取主配置类
          Configuration configuration = ms.getConfiguration();
          StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
          stmt = prepareStatement(handler, ms.getStatementLog());
          //执行查询,并且返回结果
          return handler.query(stmt, resultHandler);
        } finally {
          //关闭资源
          closeStatement(stmt);
        }
      }
```


#### handler.query(stmt, resultHandler);
```java
      public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
        PreparedStatement ps = (PreparedStatement) statement;
        //执行sql语句
        ps.execute();
        //返回所有结果的一个ArrayList,这里还做了java对象的封装,根据字段一个一个将结果集
        return resultSetHandler.handleResultSets(ps);
      }
```(String), 35(Integer)
2019-10-31 15:55:31.697 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:55:32.017  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:55:32.017  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 335
2019-10-31 15:55:32.021  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:55:32.021 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:32.022 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:32.022 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:32.023 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:32.024 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:55:32.027 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:55:32.028 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.028 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:32.029 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.031 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.031 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:32.032 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.033 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.034 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:32.034 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.035 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.036 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:32.036 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.037 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.037 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:32.038 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.039 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.039 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:32.040 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.041 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.042 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:32.042 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.043 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.044 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:32.044 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.045 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.045 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:32.045 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.046 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:32.046 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:32.047 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:32.048 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:32.048 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:32.049 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:32.050  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:55:32.050  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 29
2019-10-31 15:55:34.593  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:55:34.594 DEBUG 30816 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:34.594 DEBUG 30816 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:34.595 DEBUG 30816 --- [http-nio-8080-exec-6] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:34.597 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:34.597 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:55:34.599 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:55:34.600 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:34.600 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:34.601 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:34.603 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:34.603 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:34.603 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:34.605 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:34.605 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:34.606 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:34.607 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:34.607 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:34.608 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:34.609 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:34.609 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:34.609 DEBUG 30816 --- [http-nio-8080-exec-6] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:34.611 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:34.611 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:34.611 DEBUG 30816 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:34.612  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:55:34.612  INFO 30816 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 19
2019-10-31 15:55:37.126  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 1, {}]}
2019-10-31 15:55:37.127 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:37.127 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:37.128 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:37.129 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:37.129 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:55:37.131 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:55:37.133 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.133 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:37.134 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.135 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.136 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:37.136 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.137 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.138 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:37.138 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.140 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.140 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:37.141 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.142 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.142 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:37.143 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.144 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.144 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:37.145 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.146 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.146 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:37.147 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.148 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.148 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:37.149 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.151 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.151 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:37.152 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.153 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:37.154 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:37.154 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:37.156 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:37.156 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:37.157 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:37.158  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:55:37.158  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 32
2019-10-31 15:55:38.831  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:55:38.832 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:38.832 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:38.833 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:38.834 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:38.834 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:55:38.835 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 5
2019-10-31 15:55:38.837 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:38.837 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:38.837 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:38.839 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:38.839 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:38.840 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:38.841 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:38.841 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:38.842 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:38.843 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:38.843 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:38.844 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:38.845 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:38.845 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:38.846 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:38.847 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:38.848 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:38.848 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:38.849  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:55:38.849  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 18
2019-10-31 15:55:42.298  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/32/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[32, {}]}
2019-10-31 15:55:42.300 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:55:42.300 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 32(Integer)
2019-10-31 15:55:42.301 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.302 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:55:42.303 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.303 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:55:42.304 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:55:42.304 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 9(Integer), 14(Integer)
2019-10-31 15:55:42.305 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:55:42.308 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:55:42.308 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:55:42.309 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:55:42.310 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:55:42.310 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:55:42.311 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:55:42.312 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 15:55:42.313 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 32(Integer)
2019-10-31 15:55:42.313 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 15:55:42.470  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:55:42.470  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 172
2019-10-31 15:55:42.476  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:55:42.477 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:42.477 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:42.478 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:42.479 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:42.479 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:55:42.485 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:55:42.486 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.486 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:42.487 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.488 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.489 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.490 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.491 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.491 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:42.492 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.493 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.494 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.495 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.496 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.496 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.497 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.499 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.499 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:42.500 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.501 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.501 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:42.502 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.503 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.504 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:42.504 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.505 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.506 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.506 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.508 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:42.508 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:42.508 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:42.510 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:42.510 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:42.511 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:42.512  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:55:42.512  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 36
2019-10-31 15:55:43.954  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:55:43.955 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:55:43.955 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:55:43.956 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:55:43.957 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:55:43.957 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:55:43.958 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 15:55:43.960 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:43.960 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:43.961 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:43.962 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:43.962 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:43.963 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:43.964 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:43.964 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:43.964 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:43.965 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:43.966 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:43.966 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:43.967 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:55:43.967 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:55:43.968 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:55:43.969  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:55:43.969  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 15:55:46.762  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 15:55:46.942 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.942 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.944 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.945 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.945 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:46.945 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.947 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.947 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.948 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.949 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.949 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:46.950 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.951 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.951 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.952 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.953 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.953 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:46.953 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.955 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.955 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.955 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.956 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.957 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.957 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.958 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.959 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.959 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.960 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.960 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:46.961 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.962 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.963 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.963 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.965 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.965 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:55:46.965 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.967 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:55:46.967 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:55:46.967 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.969 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:55:46.969 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:55:46.970 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:55:46.971 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:55:46.971 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:55:46.971 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:55:46.972 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:55:46.972 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:55:46.973 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:55:46.973 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:55:46.974 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:55:46.974 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:55:46.975 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:55:46.975 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:55:46.976 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:55:46.977 DEBUG 30816 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:55:46.977 DEBUG 30816 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:55:46.977 DEBUG 30816 --- [http-nio-8080-exec-10] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:55:46.978 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:55:46.978 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:55:46.978 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:55:46.979  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:55:46.979  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 217
2019-10-31 15:56:02.346  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/33/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.toModifyPage', args=[33, {}]}
2019-10-31 15:56:02.347 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:56:02.347 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:56:02.348 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:56:02.350 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:56:02.350 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:56:02.351 DEBUG 30816 --- [http-nio-8080-exec-7] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:56:02.352 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:56:02.353 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:56:02.354 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:56:02.355 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:56:02.355 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:56:02.355 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:56:02.356  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:56:02.356  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 10
2019-10-31 15:56:19.571  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=33, uid=null, typeid=null, tagids='11,8', title='myabtis源码分析2', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=0, flag='原创', recommend=1, createTime=null, updateTime=null, content='### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11,8'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:56:19.573 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:56:19.573 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:56:19.576 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:56:19.577 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:56:19.578 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 8(Integer)
2019-10-31 15:56:19.578 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:56:19.579 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:56:19.579 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: ssm(String), 2(Integer), 8(Integer)
2019-10-31 15:56:19.587 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:56:19.588 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:56:19.588 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:56:19.589 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:56:19.591 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:56:19.593 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11,8(String), myabtis源码分析2(String), mybatis...(String), /images/a(String), 0(Integer), 0(Integer), 原创(String), 1(Integer), 2019-10-31 15:56:19.572(Timestamp), 2019-10-31 15:56:19.572(Timestamp), ### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```
#### 总结:以上是解析别名标签的过程,是以package子标签的过程,以另外一个子标签解析过程也是差不多的,只要基础知识打好,看懂是没问题的.记住:设置别名的底层原理是HashMap的put方法,key为别名,value为对应类的class对象.注解优先于子标签.



### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 33(Integer)
2019-10-31 15:56:19.596 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:56:19.816 ERROR 30816 --- [http-nio-8080-exec-1] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$dd0d5b91.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:56:19.817  WARN 30816 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:57:52.932  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=33, uid=null, typeid=null, tagids='11', title='myabtis2源码分析', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=1, createTime=null, updateTime=null, content='### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```




### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:57:52.939 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:57:52.939 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:57:52.940 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:57:52.942 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:57:52.942 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 8(Integer)
2019-10-31 15:57:52.943 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:57:52.943 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:57:52.943 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: ssm(String), 1(Integer), 8(Integer)
2019-10-31 15:57:52.944 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:57:52.946 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:57:52.946 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:57:52.947 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:57:52.948 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:57:52.950 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), myabtis2源码分析(String), mybatis...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:57:52.933(Timestamp), 2019-10-31 15:57:52.933(Timestamp), ### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```




### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 33(Integer)
2019-10-31 15:57:52.953 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:57:53.171 ERROR 30816 --- [http-nio-8080-exec-5] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$dd0d5b91.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:57:53.171  WARN 30816 --- [http-nio-8080-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:58:28.751  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=33, uid=null, typeid=null, tagids='11', title='mybatis源码运行流程2—获取SqlSession', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=1, createTime=null, updateTime=null, content='### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```




### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:58:28.753 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:58:28.753 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:58:28.754 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:58:28.756 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:58:28.757 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:58:28.758 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:58:28.759 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:58:28.760 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码运行流程2—获取SqlSession(String), mybatis...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:58:28.752(Timestamp), 2019-10-31 15:58:28.752(Timestamp), ### 分析流程如下:
#### 获取sqlSessionFactory的流程图:[![流程图](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")](http://106.15.204.187:8888/group1/M00/00/00/rBEKH12rDMuAQXQ-AADJ2HxnDTA060.png "流程图")
### 一.实验关键代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 二.创建SqlSessionFactory对象

#### 进入build()方法

				可以发现build()方法是一个重载方法.这个重载方式是拿来创建SqlSessionFactory对象,而我们重点关注的是build(parser.parse())方法;

parser.parse()方法是将mybatis的主配置文件解析并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 ,build(parser.parse())是用来创建SqlSessionFactory对象
```java
     public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
        try {
          //创建一个xml解析器parser
          XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
          //关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
    	 //build()方法就去创建DefaultSqlSessionFactory
          return build(parser.parse());
        } catch (Exception e) {
          throw ExceptionFactory.wrapException("Error building SqlSession.", e);
        } finally {
          ErrorContext.instance().reset();
          try {
            inputStream.close();
          } catch (IOException e) {
            // Intentionally ignore. Prefer previous error.
          }
        }
      }
```
#### 进入parse()方法:
```java
    //标志位:标志xml解析器是否已经解析过
    private boolean parsed;
    
      public Configuration parse() {
        if (parsed) {
          throw new BuilderException("Each XMLConfigBuilder can only be used once.");
        }
        parsed = true;
        //获取<configuration>标签的信息,并且解析该标签下面的所有子标签
        //private final XPathParser parser; 这个变量是在创建XMLConfigBuilder的xml解析器时,自动创建的
        parseConfiguration(parser.evalNode("/configuration"));
    
        return configuration;
      }
```


但是我们发现parser.evalNode("/configuration")这个方法只是获取到configuration标签的信息,并没有去解析子标签,所以我们继续进入parseConfiguration方法()
```java
    /*
    *该方法对configuration的子标签进行解析,并且由于方法的顺序性,导致了在写xml标签时一定要遵循这个顺序
    */
    private void parseConfiguration(XNode root) {
        try {
          //issue #117 read properties first
    
          //解析properties标签
          propertiesElement(root.evalNode("properties"));
          Properties settings = settingsAsProperties(root.evalNode("settings"));
          loadCustomVfs(settings);
          loadCustomLogImpl(settings);
    
          // 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
          // 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
          typeAliasesElement(root.evalNode("typeAliases"));
    
          //用来解析plugins标签的
          // plugins就是一个拦截器interceptor
          // 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
          // 的部分方法，处理我们自己的逻辑。
          // sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
          // 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
          // 在选择。
          // ResultSetHandler 就是处理返回结果的。
          // 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
          pluginElement(root.evalNode("plugins"));
          objectFactoryElement(root.evalNode("objectFactory"));
          objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
          reflectorFactoryElement(root.evalNode("reflectorFactory"));
          settingsElement(settings);
          // read it after objectFactory and objectWrapperFactory issue #631
    
          // 解析environments标签及其子标签
          environmentsElement(root.evalNode("environments"));
          databaseIdProviderElement(root.evalNode("databaseIdProvider"));
    
          //解析自定义的Handler
          typeHandlerElement(root.evalNode("typeHandlers"));
    
          //获取mappers标签的信息,并且解析mappers的子标签,这里很重要,实现了mapper接口与mapper.xml的映射
          mapperElement(root.evalNode("mappers"));
        } catch (Exception e) {
          throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
        }
      }
```
由此可见,parseConfiguration()方法就是对mybatis的标签进行解析,并且可以看到xml文件标签的编写顺序是按照解析标签方法的顺序而定的

先从简单的<properties resource="jdbc.properties"/>标签分析开始吧
```java
propertiesElement(XNode context)

      private void propertiesElement(XNode context) throws Exception {
        //判断该子标签是否存在
        if (context != null) {
          /**
          * 下面都是properties标签的一些属性值
          * */
    
          //获取子标签的name,value并且set进去properties对象中
          Properties defaults = context.getChildrenAsProperties();
          //获取properties上面的resource的值,代表是配置文件的位置
          String resource = context.getStringAttribute("resource");
          //获取properties上面的url的值,不能够同时设置resource和url的值
          String url = context.getStringAttribute("url");
          if (resource != null && url != null) {
            throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
          }
    
          //如果设置了resource属性
          if (resource != null) {
    
            //getResourceAsProperties通过resource的值获取对应的属性值并且封装成一个Properties对象,
            //原理是将配置文件中"="前面的作为key,后面的作为value,然后put进该对象
            //Properties extends Hashtable<Object,Object> 这个实际上是个Hashtable
            defaults.putAll(Resources.getResourceAsProperties(resource));
          } else if (url != null) {
            defaults.putAll(Resources.getUrlAsProperties(url));
          }
    
          // 将configuration对象中已配置的Properties属性与刚刚解析的融合
          // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
          // 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
          // 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
          // variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
          Properties vars = configuration.getVariables();
          if (vars != null) {
            defaults.putAll(vars);
          }
          //设置回XPathParser对象中,后面可能有用
          parser.setVariables(defaults);
    
          //将最后设置完的Properties对象通过set方法设置回Configuration类中
          configuration.setVariables(defaults);
        }
      }
```
解析properties标签实际就是将属性配置文件中的key,value存放在一个Properties对象中,底层就是Hashtable中,并且将该对象set进configuration对象中.



### 2.1.2 typeAliasesElement()解析typeAliases标签

作用:就是给你的实体类创建一个别名,那么在Mapper.xml中使用就不会这么复杂

进入typeAliasesElement(XNode parent)
```java
      private void typeAliasesElement(XNode parent) {
        //判断该标签是否存在
        if (parent != null) {
          //循环遍历子标签
          for (XNode child : parent.getChildren()) {
            //判断子标签中是否存在<package>标签
            if ("package".equals(child.getName())) {
              //获取<package>标签中的name的属性的值
              String typeAliasPackage = child.getStringAttribute("name");
              /**
               * 这个方法分为步:
               *      1.configuration.getTypeAliasRegistry()获取TypeAliasRegistry对象
               *      2.TypeAliasRegistry,用来存放某类注册的别名
               *  该类中有个typeAliases属性是一个HashMap,mybatis默认地注册了一些java中常用的基本类型,集合...
               *  的别名
               *      3.registerAliases(typeAliasPackage)该方法就是把对应包下面的类,以key为普通类名.value是该类的class对象就是调用HashMap的put()方法.
               *
               */
              configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
            } else {
              String alias = child.getStringAttribute("alias");
              String type = child.getStringAttribute("type");
              try {
                Class<?> clazz = Resources.classForName(type);
                if (alias == null) {
                  typeAliasRegistry.registerAlias(clazz);
                } else {
                  typeAliasRegistry.registerAlias(alias, clazz);
                }
              } catch (ClassNotFoundException e) {
                throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
              }
            }
          }
        }
      }
```


我要介绍的主要是

configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实就是有个属性是HashMap,用来存放别名与对应的class对象,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类
```java
    public class TypeAliasRegistry {
    	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
    	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
    	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
    	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
    	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
    	public TypeAliasRegistry() {
    		registerAlias("string", String.class);
    		registerAlias("byte", Byte.clas);
    		registerAlias("long", Long.class);
    		...
    	}
    ｝
```
进入重点方法:registerAliases(typeAliasPackage)这个方法不断地调用自己的重载方法
```java
      public void registerAliases(String packageName) {
        registerAliases(packageName, Object.class);
      }
    
      public void registerAliases(String packageName, Class<?> superType) {
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将该包名下的所有类和子包下面的以".class"结尾的文件,并且通过classloader的loader方法创建出对应的class对象
        //并且添加到Set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //由于同一个包下面的类时不可能相同的,所以这里获取得到的所有class对象的是一个set集合
        Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
        for (Class<?> type : typeSet) {
          // Ignore inner classes and interfaces (including package-info.java)
          // Skip also inner classes. See issue #6
          //如果该类是接口,是内部类,是成员属性时,就会被忽略
          if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
            //调用重载方法
            registerAlias(type);
          }
        }
      }
    
      public void registerAlias(Class<?> type) {
        //通过反射获取该类的简答类名,默认是类名首字母小写
        String alias = type.getSimpleName();
        //获取@Alias注解的类对象
        Alias aliasAnnotation = type.getAnnotation(Alias.class);
        //由此看出注解是优先于类的简单类名
        if (aliasAnnotation != null) {
          //以直接中的value属性的值为别名
          alias = aliasAnnotation.value();
        }
        //继续撸自己的重载方法
        registerAlias(alias, type);
      }
    
      //注册别名的实质,就是将key为别名,value为class对象put进去HashMap中
      public void registerAlias(String alias, Class<?> value) {
        if (alias == null) {
          throw new TypeException("The parameter alias cannot be null");
        }
        // issue #748
        String key = alias.toLowerCase(Locale.ENGLISH);
        if (typeAliases.containsKey(key) && typeAliases.get(key) != null && !typeAliases.get(key).equals(value)) {
          throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + typeAliases.get(key).getName() + "'.");
        }
        typeAliases.put(key, value);
      }
```




### 2.1.3 environmentsElement()解析environments标签
```java
    // 解析environments标签及其子标签
    environmentsElement(root.evalNode("environments"));
```


### 进入environmentsElement(Xnode)方法:
```xml
        <!-- 配置运行环境 -->
        <environments default="mysql">
            <environment id="mysql">
                <!--事务管理器  type="JDBC"表示使用JDBC默认的事务管理-->
                <transactionManager type="JDBC"/>
                <!--type="POOLED" mybatis默认的数据库连接池  -->
                <dataSource type="POOLED">
                    <!--连接DB资源的四要素  -->
                    <property name="driver" value="${jdbc.driver}"/>
                    <property name="url" value="${jdbc.url}"/>
                    <property name="username" value="${jdbc.user}"/>
                    <property name="password" value="${jdbc.password}"/>
                </dataSource>
            </environment>
        </environments>
```

```java
      //这里context的值为前面执行方法解析出来的节点environments
      private void environmentsElement(XNode context) throws Exception {
        if (context != null) {
          if (environment == null) {
            //获取根节点的default属性的值,并且设置当前的environment的值等于default的值,
            //也就是设置当前的默认环境是default的值
            environment = context.getStringAttribute("default");
          }
          //循环遍历子标签(子节点)
          for (XNode child : context.getChildren()) {
            //获取子标签的id属性值
            String id = child.getStringAttribute("id");
            //判断id的值与当前环境environment的变量是否相同
            //这个方法的目的:在实际开发中,可能使用不同的数据库进行开发,但是一次只能使用一种,但是子标签可以
            //配置多个,通过id这个属性来匹配当前是使用那个环境进行
            //为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
            if (isSpecifiedEnvironment(id)) {
              //获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
              // 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
              //获取transactionManager标签的type属性,并且获取该标签的所有子标签的name,value值,set进去Properties对象
              //并且以该type的属性值,作为别名的名称去别名注册中心找到对应的class对象,通过反射将该数据库事务工厂创建出来
              TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
              //与上面的原理一样
              DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
              //获取数据库连接池
              DataSource dataSource = dsFactory.getDataSource();
              //用上面获取的属性来初始化Environment的内部类Builder
              Environment.Builder environmentBuilder = new Environment.Builder(id)
                  .transactionFactory(txFactory)
                  .dataSource(dataSource);
              //用environmentBuilder.build()方法来创建Environment对象,并且set进去Configuration对象中
              configuration.setEnvironment(environmentBuilder.build());
            }
          }
        }
      }
```


上面解析environment中的前两个标签的方法原理都一样.下面就只分析第一个transactionManagerElement(XNode):
```java
      private TransactionFactory transactionManagerElement(XNode context) throws Exception {
        if (context != null) {
          //获取标签的type属性
          String type = context.getStringAttribute("type");
          //获取子标签的name,value的值,并且set进去Properties对象中
          Properties props = context.getChildrenAsProperties();
          //根据type获取对应的class对象,其实type就是作为别名去找hashMap中找class对象,然后根据class对象实例化出
          //TransactionFactory对象,type对应的数据库事务工厂
          TransactionFactory factory = (TransactionFactory) resolveClass(type).getDeclaredConstructor().newInstance();
          //将上面的properties对象set进去该工厂
          factory.setProperties(props);
          return factory;
        }
        throw new BuilderException("Environment declaration requires a TransactionFactory.");
      }
```


2.1.3 mapperElement()解析mappers标签

又再次说到这个标签的解析和映射
```java
      //解析mappers标签及其子标签
      // 在这里会完成interface与mapper的映射
    //	<mappers>
    //		<mapper resource="dao/mapper2.xml" />
    //		<mapper class="com.dy.dao.UserDao"/>
    //		<mapper url="file://........"/>
    //		<package name="dao"/>
    //	</mappers>
      //parent的节点就是上一个方法所得到的节点为mappers
      private void mapperElement(XNode parent) throws Exception {
        if (parent != null) {
          for (XNode child : parent.getChildren()) {
            if ("package".equals(child.getName())) {
              //如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
              //我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
              //获取标签里制定的包名（name字段的值）
              String mapperPackage = child.getStringAttribute("name");
              //看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
              configuration.addMappers(mapperPackage);
            } else {
              //如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
              String resource = child.getStringAttribute("resource");
              String url = child.getStringAttribute("url");
              String mapperClass = child.getStringAttribute("class");
              //三选一
              if (resource != null && url == null && mapperClass == null) {
                //这里是resource
                ErrorContext.instance().resource(resource);
                InputStream inputStream = Resources.getResourceAsStream(resource);
                //mapper映射文件都是通过XMLMapperBuilder解析
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url != null && mapperClass == null) {
                //这里是url
                ErrorContext.instance().resource(url);
                InputStream inputStream = Resources.getUrlAsStream(url);
                XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
                  configuration.getSqlFragments());
                mapperParser.parse();
              } else if (resource == null && url == null && mapperClass != null) {
                //这里是class
                Class<?> mapperInterface = Resources.classForName(mapperClass);
                configuration.addMapper(mapperInterface);
              } else {
                //选不到就丢错误
                throw new BuilderException(
                  "A mapper element may only specify a url, resource or class, but not more than one.");
              }
            }
          }
        }
      }
```


现在我们重点考虑package方式的解析mapper.xml的过程,因为这样就能节省多次写同样的标签的次数

### configuration.addMappers(mapperPackage)方法
```java
      public void addMappers(String packageName) {
        //调用mapperRegistry.addMappers方法
        mapperRegistry.addMappers(packageName);
      }
```
### 那么问题来了，mapperRegistry是什么，没错就是Map
```java
    跟进去看看MapperRegistry
    protected final MapperRegistry mapperRegistry = new MapperRegistry(this);
    
    public class MapperRegistry {
    	private final Configuration config;
    	// 这个map存放的是每一种接口对应的MapperProxyFactory
    	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
    	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
    	....
    }
```

### 继续跟进 mapperRegistry.addMappers(packageName)方法

又是一个重复调用的重载方法:
```java
      public void addMappers(String packageName) {
        addMappers(packageName, Object.class);
      }
    
    
      public void addMappers(String packageName, Class<?> superType) {
        //new 一个解析工具类
        ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
        //将packName包和子包的所有文件都进行搜索,如果发现文件以".class"结尾的文件,则以classloader的方式创建class对象并且存放到set集合中
        resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
        //获取Set集合中的所有class对象
        Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
        for (Class<?> mapperClass : mapperSet) {
          //将mapperClass注册到MapperRegister里面,并且进行了mapper.xml解析和与mapper接口的映射
          addMapper(mapperClass);
        }
      }



      public <T> void addMapper(Class<T> type) {
        //判断该类是否为interface
        if (type.isInterface()) {
          //如果该Mapper已经加载过则报错
          if (hasMapper(type)) {
            throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
          }
          //标记位: 标志是否加载完成,用于反正加载过程中出异常之后,没有把已经put进去的key,value及时地删除,防止占用内存
          boolean loadCompleted = false;
          try {
            //knownMappers是一个HashMap用来存放已经加载过的Mapper接口
            knownMappers.put(type, new MapperProxyFactory<>(type));
            // It's important that the type is added before the parser is run
            // otherwise the binding may automatically be attempted by the
            // mapper parser. If the type is already known, it won't try.
            //创建Mapper接口的注解解析器parser,先对xml解析之后再对注解进行解析,这样就实现了注解优于xml执行
            MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
            //解析sql语句
            parser.parse();
            //设置成功加载完的标志位
            loadCompleted = true;
          } finally {
            //保证无论是否异常都必须执行对加载结果的检查,防止异常的发生
            if (!loadCompleted) {
              knownMappers.remove(type);
            }
          }
        }
      }

```

### 进入parse方法:解析xml和注解的sql语句
```java
      //这是注解解析器的parse的方法
      public void parse() {
        //获取接口的全限定类名
        String resource = type.toString();
        //判断这个类是否已经加载过了,防止二次加载
        if (!configuration.isResourceLoaded(resource)) {
          //加载和解析mapper.xml文件
          loadXmlResource();
          //标志mapper接口已经成功加载
          configuration.addLoadedResource(resource);
          assistant.setCurrentNamespace(type.getName());
          parseCache();
          parseCacheRef();
          //获取mapper接口的所有方法
          Method[] methods = type.getMethods();
          for (Method method : methods) {
            try {
              // issue #237
              if (!method.isBridge()) {
                //根据方法名来解析sql语句
                parseStatement(method);
              }
            } catch (IncompleteElementException e) {
              configuration.addIncompleteMethod(new MethodResolver(this, method));
            }
          }
        }
        //处理一些出现异常的Method
        parsePendingMethods();
      }
```


#### 这里有个重要的方法loadXmlResource():说明了为什么要使用package的方式加载xml时文件名要和mapper的接口名一样
```java
      private void loadXmlResource() {
        // Spring may not know the real resource name so we check a flag
        // to prevent loading again a resource twice
        // this flag is set at XMLMapperBuilder#bindMapperForNamespace
        if (!configuration.isResourceLoaded("namespace:" + type.getName())) {
          //用mapper接口的全限定类名与".xml"拼接,获取mapper.xml的文件名
          //这就是为什么使用package的时候要求mapper.xml的名称要与mapper接口名称一样
          String xmlResource = type.getName().replace('.', '/') + ".xml";
          // #1347
          InputStream inputStream = type.getResourceAsStream("/" + xmlResource);
          if (inputStream == null) {
            // Search XML mapper that is not in the module but in the classpath.
            try {
              //如果不存在的话就去classpath下面找相同名称的文件进行加载
              inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);
            } catch (IOException e2) {
              // ignore, resource is not required
            }
          }
           //如果文件存在的话,就在这里进行解析
          if (inputStream != null) {
            XMLMapperBuilder xmlParser = new XMLMapperBuilder(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());
            //解析mapper.xml
            xmlParser.parse();
          }
        }
      }
```


### 进入xmlParser.parse():解析mapper.xml
```java
      public void parse() {
        if (!configuration.isResourceLoaded(resource)) {
          //先获取<mapper标签的所有信息>,然后再对mapper下面的子标签进行解析
          configurationElement(parser.evalNode("/mapper"));
          //将该mapper.xml加载到已经加载过的资源里面,标志该文件已经解析完成
          configuration.addLoadedResource(resource);
          //namespace处理
          bindMapperForNamespace();
        }
    
        //这里的执行的方法是一些特殊判处异常的resultMaps,statements,cacheRefs
        parsePendingResultMaps();
        parsePendingCacheRefs();
        parsePendingStatements();
      }
```
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。



### 2.2 创建SqlSessionFactory之build(parser.parse());方法

#### 虽然说上面的那个过程并不是我们最后想要的结果,但是知道了parser.parse()解析主配置文件的过程,并且最后一个结果封装成一个Configuration对象,这是发生在创建SqlSessionFactory的过程中,但是真正创建SqlSessionFactory的方法是build(parser.parse()),接下来我们要跟进去这个方法:
```java
      //生成一个SqlSessionFactory的实现类DefaultSqlSessionFactory并且将解析主配置文件生成的config传入
      public SqlSessionFactory build(Configuration config) {
        return new DefaultSqlSessionFactory(config);
      }
```
然后目的就达到了,成功获取到了SqlSessionFactory(DefaultSqlSessionFactory)



**3.回来到获取SqlSession

回到实验代码
```java
    //加载主配置文件
    InputStream inputStream = Resources.getResourceAsStream("mybatisConfig.xml");
    //创建SqlSessionFactory对象
    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    sqlSession = sqlSessionFactory.openSession();
```


### 跟进sqlSessionFactory.openSession()来获取sqlSession

这又是一个重载方法
```java
      @Override
      public SqlSession openSession() {
        //参数2:代表事务的隔离级别
        //参数3:代表是否自动提交事务
        return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
      }
```
configuration.getDefaultExecutorType()这是什么鬼东西??????点进去看一下,是一个ExecutorType类型的形参

 ExecutorType.SIMPLE又是一个不懂的东西?
```java
    public enum ExecutorType {
      SIMPLE, REUSE, BATCH
    }
```
这是一个简单的枚举,代表的是执行器种类,这个在下一个文章介绍如何执行sql的时候才能将到Executor,所以下篇文章再来探讨
```java
      //真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
    //executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
      private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
        //创建一个新事务
        Transaction tx = null;
        try {
          final Environment environment = configuration.getEnvironment();
          //从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
          //<transactionManager type="JDBC" />
          //<dataSource type="POOLED"> ... </dataSource>
          final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
          tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
          //获取sql语句的Executor(执行器),根据execType来获取对应类型的执行器
          //一共有三种Executor,并且都是继承BaseExecutor的
          final Executor executor = configuration.newExecutor(tx, execType);
          //返回DefaultSqlSession对象,SqlSession的实现类
          return new DefaultSqlSession(configuration, executor, autoCommit);
        } catch (Exception e) {
          //防止在已经获取了连接之后,执行过程中出现了异常,被捕获了,要将该连接给关闭,不然就会造成资源的浪费,影响程序的性能
          closeTransaction(tx); // may have fetched a connection so lets call close()
          throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
        } finally {
          ErrorContext.instance().reset();
        }
      }
```    

到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 33(Integer)
2019-10-31 15:58:28.762 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:58:28.970 ERROR 30816 --- [http-nio-8080-exec-3] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$dd0d5b91.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:58:28.971  WARN 30816 --- [http-nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:58:57.251  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=33, uid=null, typeid=null, tagids='11', title='mybatis源码运行流程2—获取SqlSession', description='mybatis...', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=1, createTime=null, updateTime=null, content='mybatis源码运行流程分析之SqlSession的获取
tips: 阅读本文建议搭建环境，不搭建的话建议把我所注释的mybatis源码down一份下来，因为在注释写得很清楚了，在这里懒得写。
本篇介绍的是下面流程图的第一个图。 
mybatis运行流程图

首先是SqlSessionFactory的创建
大致流程
首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

1.打开StudentDaoImpl.java
这是我们关注的代码

public void insertStu(Student student) {
	...
	//加载主配置文件
	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
	//创建SqlSessionFactory对象
	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	...
}
2.进入build方法
可以发现这里build调用了build的重载方法。这个重载方法中真正的创建SqlSessionFactory，而我们需要重点关注的代码为这句：return build(parser.parse());
parser.parse()该方法用来解析mybatis.xml文件并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 
build(parser.parse())方法用于创建SqlSessionFactory。

/**
 *  使用方式
 *	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
 *	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
 */
//InputStream读取myabtis主配置文件，除了该构造方法，上面还有Reader作为参数的
public SqlSessionFactory build(InputStream inputStream) {
	//跟进
	return build(inputStream, null, null);
}

//通过XMLConfigBuilder解析mybatis配置，然后创建SqlSessionFactory对象
public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
	try {
		//new一个xml解析器parser
		XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
		//关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
		//build()方法就去创建DefaultSqlSessionFactory
		return build(parser.parse());
	} catch (Exception e) {
		throw ExceptionFactory.wrapException("Error building SqlSession.", e);
	} finally {
		ErrorContext.instance().reset();
		try {
			inputStream.close();
		} catch (IOException e) {
			// Intentionally ignore. Prefer previous error.
		}
	}
}
上述方法的具体作用我都已经作了注释，就不重复说了

2.1 解析xml之parser.parse()方法
接下来我们来看看mybatis.xml是怎么被解析并包装为Configuration对象的
进入parse（）方法：

// 标志位:是否已经解析过
private boolean parsed;

// SqlSessionFactoryBuilder调用此方法对mybatis配置文件进行解析
public Configuration parse() {
	// parsed默认值为false，创建对象时并没有赋值，即默认为false
	if (parsed) {
		throw new BuilderException("Each XMLConfigBuilder can only be used once.");
	}
	parsed = true;
	// 从根节点configuration开始解析其所有子节点，configuration是mybatis.xml的根节点
	parseConfiguration(parser.evalNode("/configuration"));
	return configuration;
}
发现里面时方法的调用，这里需要关注的方法是：parseConfiguration(parser.evalNode("/configuration"));的外层方法即：parseConfiguration()，parser.evalNode("/configuration")方法只是获取到节点。所以我们进入parseConfiguration()方法：

// 解析root节点下所有子节点
	// 由此也可看出，我们在configuration下面能配置的节点为以下10个节点
	private void parseConfiguration(XNode root) {
		try {
			// issue #117 read properties first
			// 解析properties标签及其子标签
			propertiesElement(root.evalNode("properties"));
			Properties settings = settingsAsProperties(root.evalNode("settings"));
			loadCustomVfs(settings);
			loadCustomLogImpl(settings);
			// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
			// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
			typeAliasesElement(root.evalNode("typeAliases"));

			// plugins就是一个拦截器interceptor
			// 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
			// 的部分方法，处理我们自己的逻辑。
			// sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
			// 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
			// 在选择。
			// ResultSetHandler 就是处理返回结果的。
			// 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
			pluginElement(root.evalNode("plugins"));

			// 这个没用到过,就跳过了
			// 官网的链接http://www.mybatis.org/mybatis-3/configuration.html#objectFactory
			objectFactoryElement(root.evalNode("objectFactory"));
			objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
			reflectorFactoryElement(root.evalNode("reflectorFactory"));
			settingsElement(settings);

			// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
			databaseIdProviderElement(root.evalNode("databaseIdProvider"));

			// 解析typeHandlers标签及其子标签,这个标签用来往mybatis里丢自定义的typeHandler
			typeHandlerElement(root.evalNode("typeHandlers"));

			
//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			 
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
			
		} catch (Exception e) {
			throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
		}
	}
看到这里，就能发现在mybatis里能配置的configuration的字标签在这都有了，而且这些标签的解析是有先后顺序的，这也就说明了为什么配置mybatis.xml文件要按照标签的顺序来配置。
那么我们先从简单的标签入手，就这个了 <properties resource="db.properties"></properties> 刚好也是第一个标签哈哈。

2.1.1 propertiesElement()解析properties标签
用心看下注释，懒得再多打一次，其实mybatis的源码不难看懂。

// 解析properties标签及其子标签,XNode为properties标签
private void propertiesElement(XNode context) throws Exception {
	if (context != null) {
		// 获取子标签的name以及value属性set进properties对象
		Properties defaults = context.getChildrenAsProperties();
		// 获取properties节点上 resource属性的值
		String resource = context.getStringAttribute("resource");
		// 获取properties节点上 url属性的值, resource和url不能同时配置
		String url = context.getStringAttribute("url");
		if (resource != null && url != null) {
			throw new BuilderException(
					"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
		}
		// 把解析出的properties标签转成Properties类,然后put进Properties对象
		// Properties extends Hashtable<Object,Object>,Properties是继承于Hashtable的
		if (resource != null) {
			defaults.putAll(Resources.getResourceAsProperties(resource));
		} else if (url != null) {
			defaults.putAll(Resources.getUrlAsProperties(url));
		}
		// 将configuration对象中已配置的Properties属性与刚刚解析的融合
		// configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
		// 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
		// 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
		// variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
		Properties vars = configuration.getVariables();
		if (vars != null) {
			defaults.putAll(vars);
		}
		// 把装有解析配置propertis对象set进解析器， 因为后面可能会用到
		parser.setVariables(defaults);
		// 丢进configuration对象存起来
		configuration.setVariables(defaults);
	}
}
对于里面细致的方法实现，都是基础的东西了，这些就跳过。我们接着解析下一个标签。

2.1.2 typeAliasesElement()解析typeAliases标签
下面的代码在2.1parseConfiguration()中。忘了的话可以回去看看
别名，就是给你的实体类所弄一个别名，可以在mapper中用起来没那么麻烦。

// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
typeAliasesElement(root.evalNode("typeAliases"));
不扯了，进入typeAliasesElement()方法，先看注释和代码，后面说细节点

// 解析typeAliases标签,该标签里有两中类型的子标签:package和typeAlias
// 这两个子标签的区别就是一个会把整个包扫描然后直接去简单类名,另一个是自定义别名
// <package name="beans"/>
// <typeAlias alias="我乱写的名字" type="beans.Student"/>
private void typeAliasesElement(XNode parent) {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			// 如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package
			if ("package".equals(child.getName())) {
				// 这里获取到的typeAliasPackage = "beans",下面就用到了
				String typeAliasPackage = child.getStringAttribute("name");
				// TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册
				configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
			} else {
				// 如果子节点是typeAlias节点，那么就获取alias属性和type的属性值
				String alias = child.getStringAttribute("alias");
				String type = child.getStringAttribute("type");
				try {
					Class<?> clazz = Resources.classForName(type);
					if (alias == null) {
						typeAliasRegistry.registerAlias(clazz);
					} else {
						typeAliasRegistry.registerAlias(alias, clazz);
					}
				} catch (ClassNotFoundException e) {
					throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
				}
			}
		}
	}
}
我要介绍的主要是
configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage); 方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实底层就是个Map,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类

public class TypeAliasRegistry {
	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
	public TypeAliasRegistry() {
		registerAlias("string", String.class);
		registerAlias("byte", Byte.clas);
		registerAlias("long", Long.class);
		...
	}
｝
接下来是重点：registerAliases(typeAliasPackage)方法 这个方法里面通过不断的调用自己的重载方法完成注册

//这里就是把穿过来的报名丢给一个重载方法来注册
	//默认会把简单类名首字母小写作为别名,也可以在bean中加上annotation @Alias("别名")来操作
	public void registerAliases(String packageName) {
		registerAliases(packageName, Object.class);
	}

	//执行一系列的骚操作然后拿到具体的对象集合,就去遍历注册:默认会把简单类名首字母小写作为别名,然后调用registerAlias(type);
	public void registerAliases(String packageName, Class<?> superType) {
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//值得注意的是这个find方法，他会遍历packageName包下的所有文件，找出.class结尾的文件通过classload创建出对象
		//然后丢进HashSet里，下下面一句代码中getClasses其实就是拿到这个HashSet，find方法里面的具体实现自己看，本文点到为止，不会深入到最底层
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
		for (Class<?> type : typeSet) {
			// Ignore inner classes and interfaces (including package-info.java)
			// Skip also inner classes. See issue #6
			if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
				//名字不为空船+不是接口+简单类名未被注册就进来了
				registerAlias(type);
			}
		}
	}

	//在这里判断是否有注解,有的话就把原来的简单类名首字母小写那个覆盖掉,即注解优先
	public void registerAlias(Class<?> type) {
		String alias = type.getSimpleName();
		Alias aliasAnnotation = type.getAnnotation(Alias.class);
		if (aliasAnnotation != null) {
			//获取注解的值
			alias = aliasAnnotation.value();
		}
		registerAlias(alias, type);
	}

	//注册别名的本质方法:其实就是向保存别名的hashMap新增值而已
	public void registerAlias(String alias, Class<?> value) {
		if (alias == null) {
			throw new TypeException("The parameter alias cannot be null");
		}
		// issue #748
		String key = alias.toLowerCase(Locale.ENGLISH);
		if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
			throw new TypeException("The alias '" + alias + "' is already mapped to the value '"
					+ TYPE_ALIASES.get(key).getName() + "'.");
		}
		TYPE_ALIASES.put(key, value);
	}
如果认真的看了上面的注释，其他的也不用多说了，我觉得很几把清楚了。在深入的话就是基础的知识了，自己进去就能看得懂的。虽然上面只是对typeAliases的子标签package解释，如果看懂了，对于另一个标签typeAlias的分析，完全没压力。所以对于有typeAliases标签的分析到此为止。

2.1.3 environmentsElement()解析environments标签
对于其他的标签，我们先跳过直接来environments，毕竟这个肯定要用的。像那些plugins，objectFactory，typeHandlers毕竟用得少，晚点再说。

// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
老规矩，进入environmentsElement()方法，还是那句话，先看注释和代码，大概过一遍，不要在意细节。这个environments子标签相对有点麻烦，可以打开mybatis.xml来对照着看

<!-- 配置运行环境 -->
<environments default="mysql">
	<environment id="mysql">
		<transactionManager type="JDBC" />
		<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</dataSource>
	</environment>
</environments>
// 解析enviroments元素节点的方法XNode context的值为environments
private void environmentsElement(XNode context) throws Exception {
	if (context != null) {
		if (environment == null) {
			// 获取environments节点的default属性的值并存入成员变量environment中,这在下几句代码就用到了
			// 如:<environments default="mysql"> 	String environment;
			environment = context.getStringAttribute("default");
		}
		// 遍历解析environments子节点
		for (XNode child : context.getChildren()) {
			// 获取environment标签的id
			String id = child.getStringAttribute("id");
			// isSpecifiedEnvironment(id)判断id是否equals environment,如果是的话才去解析当前environment标签的子标签
			// 为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
			if (isSpecifiedEnvironment(id)) {
				// 获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
				// 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
				TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
				// 获取解析好的dataSource标签的DataSourceFactory对象,然后从DataSourceFactory中获取dataSource
				DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
				DataSource dataSource = dsFactory.getDataSource();

				// 这就是环境的设置了
				Environment.Builder environmentBuilder = new Environment.Builder(id).transactionFactory(txFactory)
						.dataSource(dataSource);
				// 同样,将解析后的xml转为具体对象后丢进configuration对象
				configuration.setEnvironment(environmentBuilder.build());
			}
		}
	}
}
发现没有，上面分析的三个标签，到最后都有同一个操作。往configuration丢进去解析玩的标签。这个configuration在之后的Sql执行等操作还都会用的上，贯穿始终。
对于面的代码，事务其实没啥好说的代码实现很简单，看下dataSourceElement()方法

//	  <dataSource type="POOLED"> 
//		  <property name="driver" value="${jdbc.driver}"/>
//		  <property name="url" value="${jdbc.url}"/> 
//		  <property name="username" value="${jdbc.username}"/> 
//		  <property name="password" value="${jdbc.password}"/> 
//	  </dataSource>
// 解析dataaSource标签的子标签,并包装为DatSourceFactory
private DataSourceFactory dataSourceElement(XNode context) throws Exception {
	if (context != null) {
		String type = context.getStringAttribute("type");
		// 获取dataSource标签下的properties标签的name和value,注意:Properties继承的Hashtable,这就是为什么他能放多个properties标签的原因
		Properties props = context.getChildrenAsProperties();
		// 获取一个DataSourceFactory工厂,然后把props里所有的属性都设置进去
		DataSourceFactory factory = (DataSourceFactory) resolveClass(type).newInstance();
		factory.setProperties(props);
		return factory;
	}
	throw new BuilderException("Environment declaration requires a DataSourceFactory.");
}
environments标签也就这样而已，跟着这个思路一个一个标签来看，没什么难的。而且在上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。>上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。 那么对于xml的解析就暂时到这了，懒得说了，什么时候闲着蛋疼再来补下吧，而且也真不到怎么说了，要说也是照着我的注释说。。还不如down份下来看看。

2.1.3 mapperElement()解析mappers标签
在写下一篇文章的时候想起这个标签的解析有必要说一下，又回来了，这个绝对是最后一个标签。屁话不多说

//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
跟进mapperElement()方法

	//解析mappers标签及其子标签
	//在这里会完成interface与mapper的映射
//	<mappers> 
//		<mapper resource="dao/mapper2.xml" /> 
//		<mapper class="com.dy.dao.UserDao"/> 
//		<mapper url="file://........"/> 
//		<package name="dao"/> 
//	</mappers>
private void mapperElement(XNode parent) throws Exception {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			if ("package".equals(child.getName())) {
				//如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
				//我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
				//获取标签里制定的包名（name字段的值）
				String mapperPackage = child.getStringAttribute("name");
				//看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
				configuration.addMappers(mapperPackage);
			} else {
				//如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
				String resource = child.getStringAttribute("resource");
				String url = child.getStringAttribute("url");
				String mapperClass = child.getStringAttribute("class");
				//三选一
				if (resource != null && url == null && mapperClass == null) {
					//这里是resource
					ErrorContext.instance().resource(resource);
					InputStream inputStream = Resources.getResourceAsStream(resource);
					//mapper映射文件都是通过XMLMapperBuilder解析
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url != null && mapperClass == null) {
					//这里是url
					ErrorContext.instance().resource(url);
					InputStream inputStream = Resources.getUrlAsStream(url);
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url == null && mapperClass != null) {
					//这里是class
					Class<?> mapperInterface = Resources.classForName(mapperClass);
					configuration.addMapper(mapperInterface);
				} else {
					//选不到就丢错误
					throw new BuilderException(
							"A mapper element may only specify a url, resource or class, but not more than one.");
				}
			}
		}
	}
}
毫无疑问，重要的是这个方法第一个if判断里的configuration.addMappers(mapperPackage);我们点进去，里面使用了委托模式，调用了注册器mapperRegistry的adddMappers()方法。

public void addMappers(String packageName) {
		//其实就是往mapperRegistry里注册mapper,mapperRegistry里面有一个(map)knownMappers
		//这个map里,key是mapper的namespace对应的类/接口,value就是这个类的BeanFactory
		mapperRegistry.addMappers(packageName);
	}
那么问题来了，mapperRegistry是什么，没错就是Map

跟进去看看MapperRegistry
protected final MapperRegistry mapperRegistry = new MapperRegistry(this);

public class MapperRegistry {
	private final Configuration config;
	// 这个map存放的是每一种接口对应的MapperProxyFactory
	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
	....
}
说了注册器的类型后我们回到主线。进入注册器的addMappers()方法，里面调用了重载方法

//注册mapper
public void addMappers(String packageName) {
	addMappers(packageName, Object.class);
}
我们来到这个重载方法,这个方法主要是扫描包把所有的.class后缀的文件都通过classload创建出实例对象，然后丢进一个Set里面，这个find()方法在上面注册别名有提过一下，同样，在深入的不说了。

	public void addMappers(String packageName, Class<?> superType) {
		//新建一个解析器用来解析packageName包下的所有类
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//找到packageName下所有.class文件并创建出相应的实例对象,再放入resolverUtil的matches(这是一个HashSet)里
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		//getClasses这个方法会返回resolverUtil里的matches,这个matches放着该包下所有的类和接口的实例
		Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
		//遍历mapperSet
		for (Class<?> mapperClass : mapperSet) {
			//该方法把实例对象作为key,然后new出相应的工厂作为value,丢进knownMappers里
			addMapper(mapperClass);
		}
	}
到这里我们仍未见到mapper与接口的映射，其实他们之间的映射在方法addMapper(mapperClass)里，我们可以继续深入

//这个方法主要是往knownMappers里注册接口/类和它们的工厂对象
//并且调用MapperAnnotationBuilder.parse()对接口与mapper完成映射
public <T> void addMapper(Class<T> type) {
	//判断是否为借口，是的话继续执行，否则直接返回
	if (type.isInterface()) {
		//判断当前type是否已经被注册过
		if (hasMapper(type)) {
			throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
		}
		boolean loadCompleted = false;
		try {
			//把Class<T> type这个实例作为key,这个实例的工厂作为value丢进knownMappers
			knownMappers.put(type, new MapperProxyFactory<>(type));
			// It's important that the type is added before the parser is run
			// otherwise the binding may automatically be attempted by the
			// mapper parser. If the type is already known, it won't try.
			//这里new出一个解析器，主要用来解析xml和注解里的Sql，为什么注解会覆盖掉mapper.xml的原因就在parser.parse()这个方法里
			MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
			//解析sql语句
			parser.parse();
			loadCompleted = true;
		} finally {
			if (!loadCompleted) {
				knownMappers.remove(type);
			}
		}
	}
}
在上面的奶妈中new出了一个MapperAnnotationBuilder parser，这个对象里面的parse()完成了方法与sql的映射。进去看看

//对当前的解析，完成接口与mapper的映射
public void parse() {
	String resource = type.toString();
	if (!configuration.isResourceLoaded(resource)) {
		//加载xml资源，也就是我们的mapper.xml文件，该方法会用到xml里的namespace
		loadXmlResource();
		//resource=dao.IStudentDao
		configuration.addLoadedResource(resource);
		//向assistant中set如currentNamespace，值为当前接口的名字
		assistant.setCurrentNamespace(type.getName());
		parseCache();
		parseCacheRef();
		//获取当前接口里的所有方法
		Method[] methods = type.getMethods();
		for (Method method : methods) {
			try {
				// issue #237
				if (!method.isBridge()) {
					//根据方法名解析SQL语句
					parseStatement(method);
				}
			} catch (IncompleteElementException e) {
				configuration.addIncompleteMethod(new MethodResolver(this, method));
			}
		}
	}
	parsePendingMethods();
}
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。

2.2 创建SqlSessionFactory之build(parser.parse());方法
虽说xml的解析不想说了，但是我们的目的还没达到，不知道你还记不记得上面说过的大致流程？

首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

xml的解析已经说了，现在到创建SqlSessionFactory的流程了
来，回到org.apache.ibatis.session.SqlSessionFactoryBuilder类，找到build的最终方法 return build(parser.parse()); 进去build(),又是一个调用重载方法~

//调用DefaultSqlSessionFactory的构造器方法创建对象
	public SqlSessionFactory build(Configuration config) {
		return new DefaultSqlSessionFactory(config);
	}
简单吧，里面我都不想看了，就是调用带参构造器方法，把Configuration丢进去DefaultSqlSessionFactory而已。到此为止，我们获取到了我们的SqlSessionFactory，现在，回去我们的最上方。看那个流程图，快要到达我们本篇的目的了。

3.回来StudentDaoImpl.java
//刚刚我们获取了sqlSessionFactory。现在我们要做的事openSession()，拿到SqlSession，那么这篇就完事了。刚写那篇忘了对着流程图来，现在我们对着那个图来。妈的讲道理我不想多传个图片上去，fdfs贼几把吃运存。所以把那个图片down下来吧，自己对着来看下面的分析

InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//上面是获取sqlSessionFactory的代码。现在我们关注的是下面这句openSession()
sqlSession = sqlSessionFactory.openSession();
点进openSession()方法，发现是接口方法，那么我们用的实现类是谁？忘了的话建议重新看上面的build()。下面开始分析了
点进openSession()方法，老规矩又是重载调用。我们来看看这个重载方法。

@Override	public SqlSession openSession() {
	return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
}
这个configuration.getDefaultExecutorType()是个什么鬼东西？？？？好吧，跟进去getDefaultExecutorType()，是一个ExecutorType，这个ExecutorType又是什么鬼东西？？？

public enum ExecutorType {
  SIMPLE, REUSE, BATCH
}
就只是个枚举而已，而且默认为ExecutorType.SIMPLE
protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE; 
行的吧，那我们据需我们的跟进，来到openSession()的最终方法。

//真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
//executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,
		boolean autoCommit) {
	Transaction tx = null;
	try {
		//从configuration中获取Environment,Environment对象包含了数据源和事务的配置
		final Environment environment = configuration.getEnvironment();
		//从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
		//<transactionManager type="JDBC" />
		//<dataSource type="POOLED"> ... </dataSource>
		final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
		tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
		//这里获取executor的原因是因为表面上是sqlSession执行sql,实际上是调用sqlSession的一个成员变量Executor执行的
		final Executor executor = configuration.newExecutor(tx, execType);
		//调用构造器创建SqlSession并返回
		return new DefaultSqlSession(configuration, executor, autoCommit);
	} catch (Exception e) {
		closeTransaction(tx); // may have fetched a connection so lets call close()
		throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
	} finally {
		ErrorContext.instance().reset();
	}
}
到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:58:57.253 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:58:57.253 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:58:57.254 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:58:57.255 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:58:57.255 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:58:57.256 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:58:57.257 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, recommend = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 15:58:57.257 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis源码运行流程2—获取SqlSession(String), mybatis...(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 1(Integer), 2019-10-31 15:58:57.252(Timestamp), 2019-10-31 15:58:57.252(Timestamp), mybatis源码运行流程分析之SqlSession的获取
tips: 阅读本文建议搭建环境，不搭建的话建议把我所注释的mybatis源码down一份下来，因为在注释写得很清楚了，在这里懒得写。
本篇介绍的是下面流程图的第一个图。 
mybatis运行流程图

首先是SqlSessionFactory的创建
大致流程
首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

1.打开StudentDaoImpl.java
这是我们关注的代码

public void insertStu(Student student) {
	...
	//加载主配置文件
	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
	//创建SqlSessionFactory对象
	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	...
}
2.进入build方法
可以发现这里build调用了build的重载方法。这个重载方法中真正的创建SqlSessionFactory，而我们需要重点关注的代码为这句：return build(parser.parse());
parser.parse()该方法用来解析mybatis.xml文件并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 
build(parser.parse())方法用于创建SqlSessionFactory。

/**
 *  使用方式
 *	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
 *	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
 */
//InputStream读取myabtis主配置文件，除了该构造方法，上面还有Reader作为参数的
public SqlSessionFactory build(InputStream inputStream) {
	//跟进
	return build(inputStream, null, null);
}

//通过XMLConfigBuilder解析mybatis配置，然后创建SqlSessionFactory对象
public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
	try {
		//new一个xml解析器parser
		XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
		//关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
		//build()方法就去创建DefaultSqlSessionFactory
		return build(parser.parse());
	} catch (Exception e) {
		throw ExceptionFactory.wrapException("Error building SqlSession.", e);
	} finally {
		ErrorContext.instance().reset();
		try {
			inputStream.close();
		} catch (IOException e) {
			// Intentionally ignore. Prefer previous error.
		}
	}
}
上述方法的具体作用我都已经作了注释，就不重复说了

2.1 解析xml之parser.parse()方法
接下来我们来看看mybatis.xml是怎么被解析并包装为Configuration对象的
进入parse（）方法：

// 标志位:是否已经解析过
private boolean parsed;

// SqlSessionFactoryBuilder调用此方法对mybatis配置文件进行解析
public Configuration parse() {
	// parsed默认值为false，创建对象时并没有赋值，即默认为false
	if (parsed) {
		throw new BuilderException("Each XMLConfigBuilder can only be used once.");
	}
	parsed = true;
	// 从根节点configuration开始解析其所有子节点，configuration是mybatis.xml的根节点
	parseConfiguration(parser.evalNode("/configuration"));
	return configuration;
}
发现里面时方法的调用，这里需要关注的方法是：parseConfiguration(parser.evalNode("/configuration"));的外层方法即：parseConfiguration()，parser.evalNode("/configuration")方法只是获取到节点。所以我们进入parseConfiguration()方法：

// 解析root节点下所有子节点
	// 由此也可看出，我们在configuration下面能配置的节点为以下10个节点
	private void parseConfiguration(XNode root) {
		try {
			// issue #117 read properties first
			// 解析properties标签及其子标签
			propertiesElement(root.evalNode("properties"));
			Properties settings = settingsAsProperties(root.evalNode("settings"));
			loadCustomVfs(settings);
			loadCustomLogImpl(settings);
			// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
			// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
			typeAliasesElement(root.evalNode("typeAliases"));

			// plugins就是一个拦截器interceptor
			// 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
			// 的部分方法，处理我们自己的逻辑。
			// sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
			// 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
			// 在选择。
			// ResultSetHandler 就是处理返回结果的。
			// 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
			pluginElement(root.evalNode("plugins"));

			// 这个没用到过,就跳过了
			// 官网的链接http://www.mybatis.org/mybatis-3/configuration.html#objectFactory
			objectFactoryElement(root.evalNode("objectFactory"));
			objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
			reflectorFactoryElement(root.evalNode("reflectorFactory"));
			settingsElement(settings);

			// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
			databaseIdProviderElement(root.evalNode("databaseIdProvider"));

			// 解析typeHandlers标签及其子标签,这个标签用来往mybatis里丢自定义的typeHandler
			typeHandlerElement(root.evalNode("typeHandlers"));

			
//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			 
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
			
		} catch (Exception e) {
			throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
		}
	}
看到这里，就能发现在mybatis里能配置的configuration的字标签在这都有了，而且这些标签的解析是有先后顺序的，这也就说明了为什么配置mybatis.xml文件要按照标签的顺序来配置。
那么我们先从简单的标签入手，就这个了 <properties resource="db.properties"></properties> 刚好也是第一个标签哈哈。

2.1.1 propertiesElement()解析properties标签
用心看下注释，懒得再多打一次，其实mybatis的源码不难看懂。

// 解析properties标签及其子标签,XNode为properties标签
private void propertiesElement(XNode context) throws Exception {
	if (context != null) {
		// 获取子标签的name以及value属性set进properties对象
		Properties defaults = context.getChildrenAsProperties();
		// 获取properties节点上 resource属性的值
		String resource = context.getStringAttribute("resource");
		// 获取properties节点上 url属性的值, resource和url不能同时配置
		String url = context.getStringAttribute("url");
		if (resource != null && url != null) {
			throw new BuilderException(
					"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
		}
		// 把解析出的properties标签转成Properties类,然后put进Properties对象
		// Properties extends Hashtable<Object,Object>,Properties是继承于Hashtable的
		if (resource != null) {
			defaults.putAll(Resources.getResourceAsProperties(resource));
		} else if (url != null) {
			defaults.putAll(Resources.getUrlAsProperties(url));
		}
		// 将configuration对象中已配置的Properties属性与刚刚解析的融合
		// configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
		// 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
		// 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
		// variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
		Properties vars = configuration.getVariables();
		if (vars != null) {
			defaults.putAll(vars);
		}
		// 把装有解析配置propertis对象set进解析器， 因为后面可能会用到
		parser.setVariables(defaults);
		// 丢进configuration对象存起来
		configuration.setVariables(defaults);
	}
}
对于里面细致的方法实现，都是基础的东西了，这些就跳过。我们接着解析下一个标签。

2.1.2 typeAliasesElement()解析typeAliases标签
下面的代码在2.1parseConfiguration()中。忘了的话可以回去看看
别名，就是给你的实体类所弄一个别名，可以在mapper中用起来没那么麻烦。

// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
typeAliasesElement(root.evalNode("typeAliases"));
不扯了，进入typeAliasesElement()方法，先看注释和代码，后面说细节点

// 解析typeAliases标签,该标签里有两中类型的子标签:package和typeAlias
// 这两个子标签的区别就是一个会把整个包扫描然后直接去简单类名,另一个是自定义别名
// <package name="beans"/>
// <typeAlias alias="我乱写的名字" type="beans.Student"/>
private void typeAliasesElement(XNode parent) {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			// 如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package
			if ("package".equals(child.getName())) {
				// 这里获取到的typeAliasPackage = "beans",下面就用到了
				String typeAliasPackage = child.getStringAttribute("name");
				// TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册
				configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
			} else {
				// 如果子节点是typeAlias节点，那么就获取alias属性和type的属性值
				String alias = child.getStringAttribute("alias");
				String type = child.getStringAttribute("type");
				try {
					Class<?> clazz = Resources.classForName(type);
					if (alias == null) {
						typeAliasRegistry.registerAlias(clazz);
					} else {
						typeAliasRegistry.registerAlias(alias, clazz);
					}
				} catch (ClassNotFoundException e) {
					throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
				}
			}
		}
	}
}
我要介绍的主要是
configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage); 方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实底层就是个Map,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类

public class TypeAliasRegistry {
	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
	public TypeAliasRegistry() {
		registerAlias("string", String.class);
		registerAlias("byte", Byte.clas);
		registerAlias("long", Long.class);
		...
	}
｝
接下来是重点：registerAliases(typeAliasPackage)方法 这个方法里面通过不断的调用自己的重载方法完成注册

//这里就是把穿过来的报名丢给一个重载方法来注册
	//默认会把简单类名首字母小写作为别名,也可以在bean中加上annotation @Alias("别名")来操作
	public void registerAliases(String packageName) {
		registerAliases(packageName, Object.class);
	}

	//执行一系列的骚操作然后拿到具体的对象集合,就去遍历注册:默认会把简单类名首字母小写作为别名,然后调用registerAlias(type);
	public void registerAliases(String packageName, Class<?> superType) {
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//值得注意的是这个find方法，他会遍历packageName包下的所有文件，找出.class结尾的文件通过classload创建出对象
		//然后丢进HashSet里，下下面一句代码中getClasses其实就是拿到这个HashSet，find方法里面的具体实现自己看，本文点到为止，不会深入到最底层
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
		for (Class<?> type : typeSet) {
			// Ignore inner classes and interfaces (including package-info.java)
			// Skip also inner classes. See issue #6
			if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
				//名字不为空船+不是接口+简单类名未被注册就进来了
				registerAlias(type);
			}
		}
	}

	//在这里判断是否有注解,有的话就把原来的简单类名首字母小写那个覆盖掉,即注解优先
	public void registerAlias(Class<?> type) {
		String alias = type.getSimpleName();
		Alias aliasAnnotation = type.getAnnotation(Alias.class);
		if (aliasAnnotation != null) {
			//获取注解的值
			alias = aliasAnnotation.value();
		}
		registerAlias(alias, type);
	}

	//注册别名的本质方法:其实就是向保存别名的hashMap新增值而已
	public void registerAlias(String alias, Class<?> value) {
		if (alias == null) {
			throw new TypeException("The parameter alias cannot be null");
		}
		// issue #748
		String key = alias.toLowerCase(Locale.ENGLISH);
		if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
			throw new TypeException("The alias '" + alias + "' is already mapped to the value '"
					+ TYPE_ALIASES.get(key).getName() + "'.");
		}
		TYPE_ALIASES.put(key, value);
	}
如果认真的看了上面的注释，其他的也不用多说了，我觉得很几把清楚了。在深入的话就是基础的知识了，自己进去就能看得懂的。虽然上面只是对typeAliases的子标签package解释，如果看懂了，对于另一个标签typeAlias的分析，完全没压力。所以对于有typeAliases标签的分析到此为止。

2.1.3 environmentsElement()解析environments标签
对于其他的标签，我们先跳过直接来environments，毕竟这个肯定要用的。像那些plugins，objectFactory，typeHandlers毕竟用得少，晚点再说。

// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
老规矩，进入environmentsElement()方法，还是那句话，先看注释和代码，大概过一遍，不要在意细节。这个environments子标签相对有点麻烦，可以打开mybatis.xml来对照着看

<!-- 配置运行环境 -->
<environments default="mysql">
	<environment id="mysql">
		<transactionManager type="JDBC" />
		<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</dataSource>
	</environment>
</environments>
// 解析enviroments元素节点的方法XNode context的值为environments
private void environmentsElement(XNode context) throws Exception {
	if (context != null) {
		if (environment == null) {
			// 获取environments节点的default属性的值并存入成员变量environment中,这在下几句代码就用到了
			// 如:<environments default="mysql"> 	String environment;
			environment = context.getStringAttribute("default");
		}
		// 遍历解析environments子节点
		for (XNode child : context.getChildren()) {
			// 获取environment标签的id
			String id = child.getStringAttribute("id");
			// isSpecifiedEnvironment(id)判断id是否equals environment,如果是的话才去解析当前environment标签的子标签
			// 为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
			if (isSpecifiedEnvironment(id)) {
				// 获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
				// 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
				TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
				// 获取解析好的dataSource标签的DataSourceFactory对象,然后从DataSourceFactory中获取dataSource
				DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
				DataSource dataSource = dsFactory.getDataSource();

				// 这就是环境的设置了
				Environment.Builder environmentBuilder = new Environment.Builder(id).transactionFactory(txFactory)
						.dataSource(dataSource);
				// 同样,将解析后的xml转为具体对象后丢进configuration对象
				configuration.setEnvironment(environmentBuilder.build());
			}
		}
	}
}
发现没有，上面分析的三个标签，到最后都有同一个操作。往configuration丢进去解析玩的标签。这个configuration在之后的Sql执行等操作还都会用的上，贯穿始终。
对于面的代码，事务其实没啥好说的代码实现很简单，看下dataSourceElement()方法

//	  <dataSource type="POOLED"> 
//		  <property name="driver" value="${jdbc.driver}"/>
//		  <property name="url" value="${jdbc.url}"/> 
//		  <property name="username" value="${jdbc.username}"/> 
//		  <property name="password" value="${jdbc.password}"/> 
//	  </dataSource>
// 解析dataaSource标签的子标签,并包装为DatSourceFactory
private DataSourceFactory dataSourceElement(XNode context) throws Exception {
	if (context != null) {
		String type = context.getStringAttribute("type");
		// 获取dataSource标签下的properties标签的name和value,注意:Properties继承的Hashtable,这就是为什么他能放多个properties标签的原因
		Properties props = context.getChildrenAsProperties();
		// 获取一个DataSourceFactory工厂,然后把props里所有的属性都设置进去
		DataSourceFactory factory = (DataSourceFactory) resolveClass(type).newInstance();
		factory.setProperties(props);
		return factory;
	}
	throw new BuilderException("Environment declaration requires a DataSourceFactory.");
}
environments标签也就这样而已，跟着这个思路一个一个标签来看，没什么难的。而且在上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。>上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。 那么对于xml的解析就暂时到这了，懒得说了，什么时候闲着蛋疼再来补下吧，而且也真不到怎么说了，要说也是照着我的注释说。。还不如down份下来看看。

2.1.3 mapperElement()解析mappers标签
在写下一篇文章的时候想起这个标签的解析有必要说一下，又回来了，这个绝对是最后一个标签。屁话不多说

//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
跟进mapperElement()方法

	//解析mappers标签及其子标签
	//在这里会完成interface与mapper的映射
//	<mappers> 
//		<mapper resource="dao/mapper2.xml" /> 
//		<mapper class="com.dy.dao.UserDao"/> 
//		<mapper url="file://........"/> 
//		<package name="dao"/> 
//	</mappers>
private void mapperElement(XNode parent) throws Exception {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			if ("package".equals(child.getName())) {
				//如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
				//我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
				//获取标签里制定的包名（name字段的值）
				String mapperPackage = child.getStringAttribute("name");
				//看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
				configuration.addMappers(mapperPackage);
			} else {
				//如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
				String resource = child.getStringAttribute("resource");
				String url = child.getStringAttribute("url");
				String mapperClass = child.getStringAttribute("class");
				//三选一
				if (resource != null && url == null && mapperClass == null) {
					//这里是resource
					ErrorContext.instance().resource(resource);
					InputStream inputStream = Resources.getResourceAsStream(resource);
					//mapper映射文件都是通过XMLMapperBuilder解析
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url != null && mapperClass == null) {
					//这里是url
					ErrorContext.instance().resource(url);
					InputStream inputStream = Resources.getUrlAsStream(url);
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url == null && mapperClass != null) {
					//这里是class
					Class<?> mapperInterface = Resources.classForName(mapperClass);
					configuration.addMapper(mapperInterface);
				} else {
					//选不到就丢错误
					throw new BuilderException(
							"A mapper element may only specify a url, resource or class, but not more than one.");
				}
			}
		}
	}
}
毫无疑问，重要的是这个方法第一个if判断里的configuration.addMappers(mapperPackage);我们点进去，里面使用了委托模式，调用了注册器mapperRegistry的adddMappers()方法。

public void addMappers(String packageName) {
		//其实就是往mapperRegistry里注册mapper,mapperRegistry里面有一个(map)knownMappers
		//这个map里,key是mapper的namespace对应的类/接口,value就是这个类的BeanFactory
		mapperRegistry.addMappers(packageName);
	}
那么问题来了，mapperRegistry是什么，没错就是Map

跟进去看看MapperRegistry
protected final MapperRegistry mapperRegistry = new MapperRegistry(this);

public class MapperRegistry {
	private final Configuration config;
	// 这个map存放的是每一种接口对应的MapperProxyFactory
	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
	....
}
说了注册器的类型后我们回到主线。进入注册器的addMappers()方法，里面调用了重载方法

//注册mapper
public void addMappers(String packageName) {
	addMappers(packageName, Object.class);
}
我们来到这个重载方法,这个方法主要是扫描包把所有的.class后缀的文件都通过classload创建出实例对象，然后丢进一个Set里面，这个find()方法在上面注册别名有提过一下，同样，在深入的不说了。

	public void addMappers(String packageName, Class<?> superType) {
		//新建一个解析器用来解析packageName包下的所有类
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//找到packageName下所有.class文件并创建出相应的实例对象,再放入resolverUtil的matches(这是一个HashSet)里
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		//getClasses这个方法会返回resolverUtil里的matches,这个matches放着该包下所有的类和接口的实例
		Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
		//遍历mapperSet
		for (Class<?> mapperClass : mapperSet) {
			//该方法把实例对象作为key,然后new出相应的工厂作为value,丢进knownMappers里
			addMapper(mapperClass);
		}
	}
到这里我们仍未见到mapper与接口的映射，其实他们之间的映射在方法addMapper(mapperClass)里，我们可以继续深入

//这个方法主要是往knownMappers里注册接口/类和它们的工厂对象
//并且调用MapperAnnotationBuilder.parse()对接口与mapper完成映射
public <T> void addMapper(Class<T> type) {
	//判断是否为借口，是的话继续执行，否则直接返回
	if (type.isInterface()) {
		//判断当前type是否已经被注册过
		if (hasMapper(type)) {
			throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
		}
		boolean loadCompleted = false;
		try {
			//把Class<T> type这个实例作为key,这个实例的工厂作为value丢进knownMappers
			knownMappers.put(type, new MapperProxyFactory<>(type));
			// It's important that the type is added before the parser is run
			// otherwise the binding may automatically be attempted by the
			// mapper parser. If the type is already known, it won't try.
			//这里new出一个解析器，主要用来解析xml和注解里的Sql，为什么注解会覆盖掉mapper.xml的原因就在parser.parse()这个方法里
			MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
			//解析sql语句
			parser.parse();
			loadCompleted = true;
		} finally {
			if (!loadCompleted) {
				knownMappers.remove(type);
			}
		}
	}
}
在上面的奶妈中new出了一个MapperAnnotationBuilder parser，这个对象里面的parse()完成了方法与sql的映射。进去看看

//对当前的解析，完成接口与mapper的映射
public void parse() {
	String resource = type.toString();
	if (!configuration.isResourceLoaded(resource)) {
		//加载xml资源，也就是我们的mapper.xml文件，该方法会用到xml里的namespace
		loadXmlResource();
		//resource=dao.IStudentDao
		configuration.addLoadedResource(resource);
		//向assistant中set如currentNamespace，值为当前接口的名字
		assistant.setCurrentNamespace(type.getName());
		parseCache();
		parseCacheRef();
		//获取当前接口里的所有方法
		Method[] methods = type.getMethods();
		for (Method method : methods) {
			try {
				// issue #237
				if (!method.isBridge()) {
					//根据方法名解析SQL语句
					parseStatement(method);
				}
			} catch (IncompleteElementException e) {
				configuration.addIncompleteMethod(new MethodResolver(this, method));
			}
		}
	}
	parsePendingMethods();
}
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。

2.2 创建SqlSessionFactory之build(parser.parse());方法
虽说xml的解析不想说了，但是我们的目的还没达到，不知道你还记不记得上面说过的大致流程？

首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

xml的解析已经说了，现在到创建SqlSessionFactory的流程了
来，回到org.apache.ibatis.session.SqlSessionFactoryBuilder类，找到build的最终方法 return build(parser.parse()); 进去build(),又是一个调用重载方法~

//调用DefaultSqlSessionFactory的构造器方法创建对象
	public SqlSessionFactory build(Configuration config) {
		return new DefaultSqlSessionFactory(config);
	}
简单吧，里面我都不想看了，就是调用带参构造器方法，把Configuration丢进去DefaultSqlSessionFactory而已。到此为止，我们获取到了我们的SqlSessionFactory，现在，回去我们的最上方。看那个流程图，快要到达我们本篇的目的了。

3.回来StudentDaoImpl.java
//刚刚我们获取了sqlSessionFactory。现在我们要做的事openSession()，拿到SqlSession，那么这篇就完事了。刚写那篇忘了对着流程图来，现在我们对着那个图来。妈的讲道理我不想多传个图片上去，fdfs贼几把吃运存。所以把那个图片down下来吧，自己对着来看下面的分析

InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//上面是获取sqlSessionFactory的代码。现在我们关注的是下面这句openSession()
sqlSession = sqlSessionFactory.openSession();
点进openSession()方法，发现是接口方法，那么我们用的实现类是谁？忘了的话建议重新看上面的build()。下面开始分析了
点进openSession()方法，老规矩又是重载调用。我们来看看这个重载方法。

@Override	public SqlSession openSession() {
	return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
}
这个configuration.getDefaultExecutorType()是个什么鬼东西？？？？好吧，跟进去getDefaultExecutorType()，是一个ExecutorType，这个ExecutorType又是什么鬼东西？？？

public enum ExecutorType {
  SIMPLE, REUSE, BATCH
}
就只是个枚举而已，而且默认为ExecutorType.SIMPLE
protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE; 
行的吧，那我们据需我们的跟进，来到openSession()的最终方法。

//真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
//executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,
		boolean autoCommit) {
	Transaction tx = null;
	try {
		//从configuration中获取Environment,Environment对象包含了数据源和事务的配置
		final Environment environment = configuration.getEnvironment();
		//从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
		//<transactionManager type="JDBC" />
		//<dataSource type="POOLED"> ... </dataSource>
		final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
		tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
		//这里获取executor的原因是因为表面上是sqlSession执行sql,实际上是调用sqlSession的一个成员变量Executor执行的
		final Executor executor = configuration.newExecutor(tx, execType);
		//调用构造器创建SqlSession并返回
		return new DefaultSqlSession(configuration, executor, autoCommit);
	} catch (Exception e) {
		closeTransaction(tx); // may have fetched a connection so lets call close()
		throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
	} finally {
		ErrorContext.instance().reset();
	}
}
到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String), 33(Integer)
2019-10-31 15:58:57.260 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 15:58:57.463 ERROR 30816 --- [http-nio-8080-exec-9] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$dd0d5b91.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:58:57.464  WARN 30816 --- [http-nio-8080-exec-9] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:59:10.016  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:59:10.017 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:59:10.017 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:59:10.017 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:59:10.018 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:59:10.018 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:59:10.020 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 15:59:10.021 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:10.021 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:10.021 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:10.023 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:10.023 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:10.023 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:10.025 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:10.025 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:10.025 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:10.026 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:10.026 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:10.027 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:10.028 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:59:10.028 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:59:10.028 DEBUG 30816 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:59:10.029  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:59:10.029  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 13
2019-10-31 15:59:15.618  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/33/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[33, {}]}
2019-10-31 15:59:15.619 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 15:59:15.619 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:59:15.620 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.621 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:59:15.621 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.622 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:59:15.622 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:59:15.622 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 8(Integer), 14(Integer)
2019-10-31 15:59:15.623 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:59:15.627 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:59:15.627 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:59:15.627 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:59:15.628 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:59:15.628 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 6(Integer), 11(Integer)
2019-10-31 15:59:15.629 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:59:15.630 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 15:59:15.630 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 33(Integer)
2019-10-31 15:59:15.631 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 15:59:15.831  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 15:59:15.831  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 213
2019-10-31 15:59:15.835  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 15:59:15.835 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:59:15.836 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:59:15.836 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:59:15.837 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:59:15.837 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:59:15.839 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 15:59:15.841 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.841 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:15.841 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.843 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.843 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.844 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.845 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.845 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:59:15.846 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.847 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.847 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.848 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.849 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.849 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.850 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.851 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.851 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:15.852 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.853 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.853 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:15.854 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.855 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.855 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:59:15.856 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.857 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.857 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.858 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.859 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:15.859 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:15.860 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:15.861 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:59:15.862 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:59:15.862 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:59:15.863  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 15:59:15.863  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 28
2019-10-31 15:59:17.432  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 15:59:17.433 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 15:59:17.433 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 15:59:17.433 DEBUG 30816 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 15:59:17.434 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 15:59:17.434 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 15:59:17.435 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 3
2019-10-31 15:59:17.437 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:17.437 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:17.437 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:17.438 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:17.439 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:17.439 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:17.440 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:17.441 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:17.441 DEBUG 30816 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:17.453 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:59:17.454 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:59:17.454 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:59:17.455  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 15:59:17.455  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 23
2019-10-31 15:59:18.887  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 15:59:18.888 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 15:59:18.888 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 15:59:18.890 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 15:59:18.892 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 15:59:18.892 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 15:59:18.892 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 15:59:18.893  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 15:59:18.894  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 7
2019-10-31 15:59:35.291  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='11', title='mybatis2', description='sss', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='mybatis源码运行流程分析之SqlSession的获取
tips: 阅读本文建议搭建环境，不搭建的话建议把我所注释的mybatis源码down一份下来，因为在注释写得很清楚了，在这里懒得写。
本篇介绍的是下面流程图的第一个图。 
mybatis运行流程图

首先是SqlSessionFactory的创建
大致流程
首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

1.打开StudentDaoImpl.java
这是我们关注的代码

public void insertStu(Student student) {
	...
	//加载主配置文件
	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
	//创建SqlSessionFactory对象
	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	...
}
2.进入build方法
可以发现这里build调用了build的重载方法。这个重载方法中真正的创建SqlSessionFactory，而我们需要重点关注的代码为这句：return build(parser.parse());
parser.parse()该方法用来解析mybatis.xml文件并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 
build(parser.parse())方法用于创建SqlSessionFactory。

/**
 *  使用方式
 *	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
 *	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
 */
//InputStream读取myabtis主配置文件，除了该构造方法，上面还有Reader作为参数的
public SqlSessionFactory build(InputStream inputStream) {
	//跟进
	return build(inputStream, null, null);
}

//通过XMLConfigBuilder解析mybatis配置，然后创建SqlSessionFactory对象
public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
	try {
		//new一个xml解析器parser
		XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
		//关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
		//build()方法就去创建DefaultSqlSessionFactory
		return build(parser.parse());
	} catch (Exception e) {
		throw ExceptionFactory.wrapException("Error building SqlSession.", e);
	} finally {
		ErrorContext.instance().reset();
		try {
			inputStream.close();
		} catch (IOException e) {
			// Intentionally ignore. Prefer previous error.
		}
	}
}
上述方法的具体作用我都已经作了注释，就不重复说了

2.1 解析xml之parser.parse()方法
接下来我们来看看mybatis.xml是怎么被解析并包装为Configuration对象的
进入parse（）方法：

// 标志位:是否已经解析过
private boolean parsed;

// SqlSessionFactoryBuilder调用此方法对mybatis配置文件进行解析
public Configuration parse() {
	// parsed默认值为false，创建对象时并没有赋值，即默认为false
	if (parsed) {
		throw new BuilderException("Each XMLConfigBuilder can only be used once.");
	}
	parsed = true;
	// 从根节点configuration开始解析其所有子节点，configuration是mybatis.xml的根节点
	parseConfiguration(parser.evalNode("/configuration"));
	return configuration;
}
发现里面时方法的调用，这里需要关注的方法是：parseConfiguration(parser.evalNode("/configuration"));的外层方法即：parseConfiguration()，parser.evalNode("/configuration")方法只是获取到节点。所以我们进入parseConfiguration()方法：

// 解析root节点下所有子节点
	// 由此也可看出，我们在configuration下面能配置的节点为以下10个节点
	private void parseConfiguration(XNode root) {
		try {
			// issue #117 read properties first
			// 解析properties标签及其子标签
			propertiesElement(root.evalNode("properties"));
			Properties settings = settingsAsProperties(root.evalNode("settings"));
			loadCustomVfs(settings);
			loadCustomLogImpl(settings);
			// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
			// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
			typeAliasesElement(root.evalNode("typeAliases"));

			// plugins就是一个拦截器interceptor
			// 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
			// 的部分方法，处理我们自己的逻辑。
			// sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
			// 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
			// 在选择。
			// ResultSetHandler 就是处理返回结果的。
			// 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
			pluginElement(root.evalNode("plugins"));

			// 这个没用到过,就跳过了
			// 官网的链接http://www.mybatis.org/mybatis-3/configuration.html#objectFactory
			objectFactoryElement(root.evalNode("objectFactory"));
			objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
			reflectorFactoryElement(root.evalNode("reflectorFactory"));
			settingsElement(settings);

			// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
			databaseIdProviderElement(root.evalNode("databaseIdProvider"));

			// 解析typeHandlers标签及其子标签,这个标签用来往mybatis里丢自定义的typeHandler
			typeHandlerElement(root.evalNode("typeHandlers"));

			
//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			 
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
			
		} catch (Exception e) {
			throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
		}
	}
看到这里，就能发现在mybatis里能配置的configuration的字标签在这都有了，而且这些标签的解析是有先后顺序的，这也就说明了为什么配置mybatis.xml文件要按照标签的顺序来配置。
那么我们先从简单的标签入手，就这个了 <properties resource="db.properties"></properties> 刚好也是第一个标签哈哈。

2.1.1 propertiesElement()解析properties标签
用心看下注释，懒得再多打一次，其实mybatis的源码不难看懂。

// 解析properties标签及其子标签,XNode为properties标签
private void propertiesElement(XNode context) throws Exception {
	if (context != null) {
		// 获取子标签的name以及value属性set进properties对象
		Properties defaults = context.getChildrenAsProperties();
		// 获取properties节点上 resource属性的值
		String resource = context.getStringAttribute("resource");
		// 获取properties节点上 url属性的值, resource和url不能同时配置
		String url = context.getStringAttribute("url");
		if (resource != null && url != null) {
			throw new BuilderException(
					"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
		}
		// 把解析出的properties标签转成Properties类,然后put进Properties对象
		// Properties extends Hashtable<Object,Object>,Properties是继承于Hashtable的
		if (resource != null) {
			defaults.putAll(Resources.getResourceAsProperties(resource));
		} else if (url != null) {
			defaults.putAll(Resources.getUrlAsProperties(url));
		}
		// 将configuration对象中已配置的Properties属性与刚刚解析的融合
		// configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
		// 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
		// 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
		// variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
		Properties vars = configuration.getVariables();
		if (vars != null) {
			defaults.putAll(vars);
		}
		// 把装有解析配置propertis对象set进解析器， 因为后面可能会用到
		parser.setVariables(defaults);
		// 丢进configuration对象存起来
		configuration.setVariables(defaults);
	}
}
对于里面细致的方法实现，都是基础的东西了，这些就跳过。我们接着解析下一个标签。

2.1.2 typeAliasesElement()解析typeAliases标签
下面的代码在2.1parseConfiguration()中。忘了的话可以回去看看
别名，就是给你的实体类所弄一个别名，可以在mapper中用起来没那么麻烦。

// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
typeAliasesElement(root.evalNode("typeAliases"));
不扯了，进入typeAliasesElement()方法，先看注释和代码，后面说细节点

// 解析typeAliases标签,该标签里有两中类型的子标签:package和typeAlias
// 这两个子标签的区别就是一个会把整个包扫描然后直接去简单类名,另一个是自定义别名
// <package name="beans"/>
// <typeAlias alias="我乱写的名字" type="beans.Student"/>
private void typeAliasesElement(XNode parent) {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			// 如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package
			if ("package".equals(child.getName())) {
				// 这里获取到的typeAliasPackage = "beans",下面就用到了
				String typeAliasPackage = child.getStringAttribute("name");
				// TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册
				configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
			} else {
				// 如果子节点是typeAlias节点，那么就获取alias属性和type的属性值
				String alias = child.getStringAttribute("alias");
				String type = child.getStringAttribute("type");
				try {
					Class<?> clazz = Resources.classForName(type);
					if (alias == null) {
						typeAliasRegistry.registerAlias(clazz);
					} else {
						typeAliasRegistry.registerAlias(alias, clazz);
					}
				} catch (ClassNotFoundException e) {
					throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
				}
			}
		}
	}
}
我要介绍的主要是
configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage); 方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实底层就是个Map,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类

public class TypeAliasRegistry {
	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
	public TypeAliasRegistry() {
		registerAlias("string", String.class);
		registerAlias("byte", Byte.clas);
		registerAlias("long", Long.class);
		...
	}
｝
接下来是重点：registerAliases(typeAliasPackage)方法 这个方法里面通过不断的调用自己的重载方法完成注册

//这里就是把穿过来的报名丢给一个重载方法来注册
	//默认会把简单类名首字母小写作为别名,也可以在bean中加上annotation @Alias("别名")来操作
	public void registerAliases(String packageName) {
		registerAliases(packageName, Object.class);
	}

	//执行一系列的骚操作然后拿到具体的对象集合,就去遍历注册:默认会把简单类名首字母小写作为别名,然后调用registerAlias(type);
	public void registerAliases(String packageName, Class<?> superType) {
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//值得注意的是这个find方法，他会遍历packageName包下的所有文件，找出.class结尾的文件通过classload创建出对象
		//然后丢进HashSet里，下下面一句代码中getClasses其实就是拿到这个HashSet，find方法里面的具体实现自己看，本文点到为止，不会深入到最底层
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
		for (Class<?> type : typeSet) {
			// Ignore inner classes and interfaces (including package-info.java)
			// Skip also inner classes. See issue #6
			if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
				//名字不为空船+不是接口+简单类名未被注册就进来了
				registerAlias(type);
			}
		}
	}

	//在这里判断是否有注解,有的话就把原来的简单类名首字母小写那个覆盖掉,即注解优先
	public void registerAlias(Class<?> type) {
		String alias = type.getSimpleName();
		Alias aliasAnnotation = type.getAnnotation(Alias.class);
		if (aliasAnnotation != null) {
			//获取注解的值
			alias = aliasAnnotation.value();
		}
		registerAlias(alias, type);
	}

	//注册别名的本质方法:其实就是向保存别名的hashMap新增值而已
	public void registerAlias(String alias, Class<?> value) {
		if (alias == null) {
			throw new TypeException("The parameter alias cannot be null");
		}
		// issue #748
		String key = alias.toLowerCase(Locale.ENGLISH);
		if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
			throw new TypeException("The alias '" + alias + "' is already mapped to the value '"
					+ TYPE_ALIASES.get(key).getName() + "'.");
		}
		TYPE_ALIASES.put(key, value);
	}
如果认真的看了上面的注释，其他的也不用多说了，我觉得很几把清楚了。在深入的话就是基础的知识了，自己进去就能看得懂的。虽然上面只是对typeAliases的子标签package解释，如果看懂了，对于另一个标签typeAlias的分析，完全没压力。所以对于有typeAliases标签的分析到此为止。

2.1.3 environmentsElement()解析environments标签
对于其他的标签，我们先跳过直接来environments，毕竟这个肯定要用的。像那些plugins，objectFactory，typeHandlers毕竟用得少，晚点再说。

// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
老规矩，进入environmentsElement()方法，还是那句话，先看注释和代码，大概过一遍，不要在意细节。这个environments子标签相对有点麻烦，可以打开mybatis.xml来对照着看

<!-- 配置运行环境 -->
<environments default="mysql">
	<environment id="mysql">
		<transactionManager type="JDBC" />
		<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</dataSource>
	</environment>
</environments>
// 解析enviroments元素节点的方法XNode context的值为environments
private void environmentsElement(XNode context) throws Exception {
	if (context != null) {
		if (environment == null) {
			// 获取environments节点的default属性的值并存入成员变量environment中,这在下几句代码就用到了
			// 如:<environments default="mysql"> 	String environment;
			environment = context.getStringAttribute("default");
		}
		// 遍历解析environments子节点
		for (XNode child : context.getChildren()) {
			// 获取environment标签的id
			String id = child.getStringAttribute("id");
			// isSpecifiedEnvironment(id)判断id是否equals environment,如果是的话才去解析当前environment标签的子标签
			// 为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
			if (isSpecifiedEnvironment(id)) {
				// 获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
				// 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
				TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
				// 获取解析好的dataSource标签的DataSourceFactory对象,然后从DataSourceFactory中获取dataSource
				DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
				DataSource dataSource = dsFactory.getDataSource();

				// 这就是环境的设置了
				Environment.Builder environmentBuilder = new Environment.Builder(id).transactionFactory(txFactory)
						.dataSource(dataSource);
				// 同样,将解析后的xml转为具体对象后丢进configuration对象
				configuration.setEnvironment(environmentBuilder.build());
			}
		}
	}
}
发现没有，上面分析的三个标签，到最后都有同一个操作。往configuration丢进去解析玩的标签。这个configuration在之后的Sql执行等操作还都会用的上，贯穿始终。
对于面的代码，事务其实没啥好说的代码实现很简单，看下dataSourceElement()方法

//	  <dataSource type="POOLED"> 
//		  <property name="driver" value="${jdbc.driver}"/>
//		  <property name="url" value="${jdbc.url}"/> 
//		  <property name="username" value="${jdbc.username}"/> 
//		  <property name="password" value="${jdbc.password}"/> 
//	  </dataSource>
// 解析dataaSource标签的子标签,并包装为DatSourceFactory
private DataSourceFactory dataSourceElement(XNode context) throws Exception {
	if (context != null) {
		String type = context.getStringAttribute("type");
		// 获取dataSource标签下的properties标签的name和value,注意:Properties继承的Hashtable,这就是为什么他能放多个properties标签的原因
		Properties props = context.getChildrenAsProperties();
		// 获取一个DataSourceFactory工厂,然后把props里所有的属性都设置进去
		DataSourceFactory factory = (DataSourceFactory) resolveClass(type).newInstance();
		factory.setProperties(props);
		return factory;
	}
	throw new BuilderException("Environment declaration requires a DataSourceFactory.");
}
environments标签也就这样而已，跟着这个思路一个一个标签来看，没什么难的。而且在上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。>上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。 那么对于xml的解析就暂时到这了，懒得说了，什么时候闲着蛋疼再来补下吧，而且也真不到怎么说了，要说也是照着我的注释说。。还不如down份下来看看。

2.1.3 mapperElement()解析mappers标签
在写下一篇文章的时候想起这个标签的解析有必要说一下，又回来了，这个绝对是最后一个标签。屁话不多说

//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
跟进mapperElement()方法

	//解析mappers标签及其子标签
	//在这里会完成interface与mapper的映射
//	<mappers> 
//		<mapper resource="dao/mapper2.xml" /> 
//		<mapper class="com.dy.dao.UserDao"/> 
//		<mapper url="file://........"/> 
//		<package name="dao"/> 
//	</mappers>
private void mapperElement(XNode parent) throws Exception {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			if ("package".equals(child.getName())) {
				//如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
				//我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
				//获取标签里制定的包名（name字段的值）
				String mapperPackage = child.getStringAttribute("name");
				//看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
				configuration.addMappers(mapperPackage);
			} else {
				//如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
				String resource = child.getStringAttribute("resource");
				String url = child.getStringAttribute("url");
				String mapperClass = child.getStringAttribute("class");
				//三选一
				if (resource != null && url == null && mapperClass == null) {
					//这里是resource
					ErrorContext.instance().resource(resource);
					InputStream inputStream = Resources.getResourceAsStream(resource);
					//mapper映射文件都是通过XMLMapperBuilder解析
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url != null && mapperClass == null) {
					//这里是url
					ErrorContext.instance().resource(url);
					InputStream inputStream = Resources.getUrlAsStream(url);
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url == null && mapperClass != null) {
					//这里是class
					Class<?> mapperInterface = Resources.classForName(mapperClass);
					configuration.addMapper(mapperInterface);
				} else {
					//选不到就丢错误
					throw new BuilderException(
							"A mapper element may only specify a url, resource or class, but not more than one.");
				}
			}
		}
	}
}
毫无疑问，重要的是这个方法第一个if判断里的configuration.addMappers(mapperPackage);我们点进去，里面使用了委托模式，调用了注册器mapperRegistry的adddMappers()方法。

public void addMappers(String packageName) {
		//其实就是往mapperRegistry里注册mapper,mapperRegistry里面有一个(map)knownMappers
		//这个map里,key是mapper的namespace对应的类/接口,value就是这个类的BeanFactory
		mapperRegistry.addMappers(packageName);
	}
那么问题来了，mapperRegistry是什么，没错就是Map

跟进去看看MapperRegistry
protected final MapperRegistry mapperRegistry = new MapperRegistry(this);

public class MapperRegistry {
	private final Configuration config;
	// 这个map存放的是每一种接口对应的MapperProxyFactory
	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
	....
}
说了注册器的类型后我们回到主线。进入注册器的addMappers()方法，里面调用了重载方法

//注册mapper
public void addMappers(String packageName) {
	addMappers(packageName, Object.class);
}
我们来到这个重载方法,这个方法主要是扫描包把所有的.class后缀的文件都通过classload创建出实例对象，然后丢进一个Set里面，这个find()方法在上面注册别名有提过一下，同样，在深入的不说了。

	public void addMappers(String packageName, Class<?> superType) {
		//新建一个解析器用来解析packageName包下的所有类
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//找到packageName下所有.class文件并创建出相应的实例对象,再放入resolverUtil的matches(这是一个HashSet)里
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		//getClasses这个方法会返回resolverUtil里的matches,这个matches放着该包下所有的类和接口的实例
		Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
		//遍历mapperSet
		for (Class<?> mapperClass : mapperSet) {
			//该方法把实例对象作为key,然后new出相应的工厂作为value,丢进knownMappers里
			addMapper(mapperClass);
		}
	}
到这里我们仍未见到mapper与接口的映射，其实他们之间的映射在方法addMapper(mapperClass)里，我们可以继续深入

//这个方法主要是往knownMappers里注册接口/类和它们的工厂对象
//并且调用MapperAnnotationBuilder.parse()对接口与mapper完成映射
public <T> void addMapper(Class<T> type) {
	//判断是否为借口，是的话继续执行，否则直接返回
	if (type.isInterface()) {
		//判断当前type是否已经被注册过
		if (hasMapper(type)) {
			throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
		}
		boolean loadCompleted = false;
		try {
			//把Class<T> type这个实例作为key,这个实例的工厂作为value丢进knownMappers
			knownMappers.put(type, new MapperProxyFactory<>(type));
			// It's important that the type is added before the parser is run
			// otherwise the binding may automatically be attempted by the
			// mapper parser. If the type is already known, it won't try.
			//这里new出一个解析器，主要用来解析xml和注解里的Sql，为什么注解会覆盖掉mapper.xml的原因就在parser.parse()这个方法里
			MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
			//解析sql语句
			parser.parse();
			loadCompleted = true;
		} finally {
			if (!loadCompleted) {
				knownMappers.remove(type);
			}
		}
	}
}
在上面的奶妈中new出了一个MapperAnnotationBuilder parser，这个对象里面的parse()完成了方法与sql的映射。进去看看

//对当前的解析，完成接口与mapper的映射
public void parse() {
	String resource = type.toString();
	if (!configuration.isResourceLoaded(resource)) {
		//加载xml资源，也就是我们的mapper.xml文件，该方法会用到xml里的namespace
		loadXmlResource();
		//resource=dao.IStudentDao
		configuration.addLoadedResource(resource);
		//向assistant中set如currentNamespace，值为当前接口的名字
		assistant.setCurrentNamespace(type.getName());
		parseCache();
		parseCacheRef();
		//获取当前接口里的所有方法
		Method[] methods = type.getMethods();
		for (Method method : methods) {
			try {
				// issue #237
				if (!method.isBridge()) {
					//根据方法名解析SQL语句
					parseStatement(method);
				}
			} catch (IncompleteElementException e) {
				configuration.addIncompleteMethod(new MethodResolver(this, method));
			}
		}
	}
	parsePendingMethods();
}
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。

2.2 创建SqlSessionFactory之build(parser.parse());方法
虽说xml的解析不想说了，但是我们的目的还没达到，不知道你还记不记得上面说过的大致流程？

首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

xml的解析已经说了，现在到创建SqlSessionFactory的流程了
来，回到org.apache.ibatis.session.SqlSessionFactoryBuilder类，找到build的最终方法 return build(parser.parse()); 进去build(),又是一个调用重载方法~

//调用DefaultSqlSessionFactory的构造器方法创建对象
	public SqlSessionFactory build(Configuration config) {
		return new DefaultSqlSessionFactory(config);
	}
简单吧，里面我都不想看了，就是调用带参构造器方法，把Configuration丢进去DefaultSqlSessionFactory而已。到此为止，我们获取到了我们的SqlSessionFactory，现在，回去我们的最上方。看那个流程图，快要到达我们本篇的目的了。

3.回来StudentDaoImpl.java
//刚刚我们获取了sqlSessionFactory。现在我们要做的事openSession()，拿到SqlSession，那么这篇就完事了。刚写那篇忘了对着流程图来，现在我们对着那个图来。妈的讲道理我不想多传个图片上去，fdfs贼几把吃运存。所以把那个图片down下来吧，自己对着来看下面的分析

InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//上面是获取sqlSessionFactory的代码。现在我们关注的是下面这句openSession()
sqlSession = sqlSessionFactory.openSession();
点进openSession()方法，发现是接口方法，那么我们用的实现类是谁？忘了的话建议重新看上面的build()。下面开始分析了
点进openSession()方法，老规矩又是重载调用。我们来看看这个重载方法。

@Override	public SqlSession openSession() {
	return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
}
这个configuration.getDefaultExecutorType()是个什么鬼东西？？？？好吧，跟进去getDefaultExecutorType()，是一个ExecutorType，这个ExecutorType又是什么鬼东西？？？

public enum ExecutorType {
  SIMPLE, REUSE, BATCH
}
就只是个枚举而已，而且默认为ExecutorType.SIMPLE
protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE; 
行的吧，那我们据需我们的跟进，来到openSession()的最终方法。

//真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
//executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,
		boolean autoCommit) {
	Transaction tx = null;
	try {
		//从configuration中获取Environment,Environment对象包含了数据源和事务的配置
		final Environment environment = configuration.getEnvironment();
		//从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
		//<transactionManager type="JDBC" />
		//<dataSource type="POOLED"> ... </dataSource>
		final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
		tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
		//这里获取executor的原因是因为表面上是sqlSession执行sql,实际上是调用sqlSession的一个成员变量Executor执行的
		final Executor executor = configuration.newExecutor(tx, execType);
		//调用构造器创建SqlSession并返回
		return new DefaultSqlSession(configuration, executor, autoCommit);
	} catch (Exception e) {
		closeTransaction(tx); // may have fetched a connection so lets call close()
		throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
	} finally {
		ErrorContext.instance().reset();
	}
}
到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。', type=Type{id=14, name='null', blogs=null}, tagIds='11'}, org.apache.catalina.session.StandardSessionFacade@498959a8, {}]}
2019-10-31 15:59:35.293 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 15:59:35.294 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 14(Integer), 11(String), mybatis2(String), sss(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 15:59:35.292(Timestamp), 2019-10-31 15:59:35.292(Timestamp), mybatis源码运行流程分析之SqlSession的获取
tips: 阅读本文建议搭建环境，不搭建的话建议把我所注释的mybatis源码down一份下来，因为在注释写得很清楚了，在这里懒得写。
本篇介绍的是下面流程图的第一个图。 
mybatis运行流程图

首先是SqlSessionFactory的创建
大致流程
首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

1.打开StudentDaoImpl.java
这是我们关注的代码

public void insertStu(Student student) {
	...
	//加载主配置文件
	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
	//创建SqlSessionFactory对象
	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	...
}
2.进入build方法
可以发现这里build调用了build的重载方法。这个重载方法中真正的创建SqlSessionFactory，而我们需要重点关注的代码为这句：return build(parser.parse());
parser.parse()该方法用来解析mybatis.xml文件并包装为Configuration对象， 注意：这个Configuration非常重要，会贯穿于整个mybatis的生命 
build(parser.parse())方法用于创建SqlSessionFactory。

/**
 *  使用方式
 *	InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
 *	SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
 */
//InputStream读取myabtis主配置文件，除了该构造方法，上面还有Reader作为参数的
public SqlSessionFactory build(InputStream inputStream) {
	//跟进
	return build(inputStream, null, null);
}

//通过XMLConfigBuilder解析mybatis配置，然后创建SqlSessionFactory对象
public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {
	try {
		//new一个xml解析器parser
		XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
		//关注这个parser.parse()方法,这个方法解析mybatis主配置文件,并包装为Configuration类,这个类会贯穿mybaits的各个流程
		//build()方法就去创建DefaultSqlSessionFactory
		return build(parser.parse());
	} catch (Exception e) {
		throw ExceptionFactory.wrapException("Error building SqlSession.", e);
	} finally {
		ErrorContext.instance().reset();
		try {
			inputStream.close();
		} catch (IOException e) {
			// Intentionally ignore. Prefer previous error.
		}
	}
}
上述方法的具体作用我都已经作了注释，就不重复说了

2.1 解析xml之parser.parse()方法
接下来我们来看看mybatis.xml是怎么被解析并包装为Configuration对象的
进入parse（）方法：

// 标志位:是否已经解析过
private boolean parsed;

// SqlSessionFactoryBuilder调用此方法对mybatis配置文件进行解析
public Configuration parse() {
	// parsed默认值为false，创建对象时并没有赋值，即默认为false
	if (parsed) {
		throw new BuilderException("Each XMLConfigBuilder can only be used once.");
	}
	parsed = true;
	// 从根节点configuration开始解析其所有子节点，configuration是mybatis.xml的根节点
	parseConfiguration(parser.evalNode("/configuration"));
	return configuration;
}
发现里面时方法的调用，这里需要关注的方法是：parseConfiguration(parser.evalNode("/configuration"));的外层方法即：parseConfiguration()，parser.evalNode("/configuration")方法只是获取到节点。所以我们进入parseConfiguration()方法：

// 解析root节点下所有子节点
	// 由此也可看出，我们在configuration下面能配置的节点为以下10个节点
	private void parseConfiguration(XNode root) {
		try {
			// issue #117 read properties first
			// 解析properties标签及其子标签
			propertiesElement(root.evalNode("properties"));
			Properties settings = settingsAsProperties(root.evalNode("settings"));
			loadCustomVfs(settings);
			loadCustomLogImpl(settings);
			// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
			// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
			typeAliasesElement(root.evalNode("typeAliases"));

			// plugins就是一个拦截器interceptor
			// 可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler
			// 的部分方法，处理我们自己的逻辑。
			// sql真正执行的地方是executor，ParameterHandler 是处理我们传入参数的，mybatis默认帮我们实现了不少的typeHandler
			// 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler
			// 在选择。
			// ResultSetHandler 就是处理返回结果的。
			// 这里是官网的介绍和使用 http://www.mybatis.org/mybatis-3/configuration.html#plugins
			pluginElement(root.evalNode("plugins"));

			// 这个没用到过,就跳过了
			// 官网的链接http://www.mybatis.org/mybatis-3/configuration.html#objectFactory
			objectFactoryElement(root.evalNode("objectFactory"));
			objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
			reflectorFactoryElement(root.evalNode("reflectorFactory"));
			settingsElement(settings);

			// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
			databaseIdProviderElement(root.evalNode("databaseIdProvider"));

			// 解析typeHandlers标签及其子标签,这个标签用来往mybatis里丢自定义的typeHandler
			typeHandlerElement(root.evalNode("typeHandlers"));

			
//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			 
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
			
		} catch (Exception e) {
			throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);
		}
	}
看到这里，就能发现在mybatis里能配置的configuration的字标签在这都有了，而且这些标签的解析是有先后顺序的，这也就说明了为什么配置mybatis.xml文件要按照标签的顺序来配置。
那么我们先从简单的标签入手，就这个了 <properties resource="db.properties"></properties> 刚好也是第一个标签哈哈。

2.1.1 propertiesElement()解析properties标签
用心看下注释，懒得再多打一次，其实mybatis的源码不难看懂。

// 解析properties标签及其子标签,XNode为properties标签
private void propertiesElement(XNode context) throws Exception {
	if (context != null) {
		// 获取子标签的name以及value属性set进properties对象
		Properties defaults = context.getChildrenAsProperties();
		// 获取properties节点上 resource属性的值
		String resource = context.getStringAttribute("resource");
		// 获取properties节点上 url属性的值, resource和url不能同时配置
		String url = context.getStringAttribute("url");
		if (resource != null && url != null) {
			throw new BuilderException(
					"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");
		}
		// 把解析出的properties标签转成Properties类,然后put进Properties对象
		// Properties extends Hashtable<Object,Object>,Properties是继承于Hashtable的
		if (resource != null) {
			defaults.putAll(Resources.getResourceAsProperties(resource));
		} else if (url != null) {
			defaults.putAll(Resources.getUrlAsProperties(url));
		}
		// 将configuration对象中已配置的Properties属性与刚刚解析的融合
		// configuration这个对象会装载所解析mybatis配置文件的所有节点元素，这个对象很重要，一定要记着！！
		// 既然configuration对象用有一系列的get/set方法， 标志着我们可以使用java代码直接配置
		// 需要注意的是,getVariables()在第一次调用的时候,返回的是对象里面什么都没有(并不是null)
		// variables变量在configuration创建时是这么创建的:protected Properties variables = new Properties();
		Properties vars = configuration.getVariables();
		if (vars != null) {
			defaults.putAll(vars);
		}
		// 把装有解析配置propertis对象set进解析器， 因为后面可能会用到
		parser.setVariables(defaults);
		// 丢进configuration对象存起来
		configuration.setVariables(defaults);
	}
}
对于里面细致的方法实现，都是基础的东西了，这些就跳过。我们接着解析下一个标签。

2.1.2 typeAliasesElement()解析typeAliases标签
下面的代码在2.1parseConfiguration()中。忘了的话可以回去看看
别名，就是给你的实体类所弄一个别名，可以在mapper中用起来没那么麻烦。

// 解析typeAliases标签及其子标签,typeAliases这个标签是用来起别名的
// 别名是用在那个叫啥mapper.xml文件里的resultType啊这些之类的,细的不说
typeAliasesElement(root.evalNode("typeAliases"));
不扯了，进入typeAliasesElement()方法，先看注释和代码，后面说细节点

// 解析typeAliases标签,该标签里有两中类型的子标签:package和typeAlias
// 这两个子标签的区别就是一个会把整个包扫描然后直接去简单类名,另一个是自定义别名
// <package name="beans"/>
// <typeAlias alias="我乱写的名字" type="beans.Student"/>
private void typeAliasesElement(XNode parent) {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			// 如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package
			if ("package".equals(child.getName())) {
				// 这里获取到的typeAliasPackage = "beans",下面就用到了
				String typeAliasPackage = child.getStringAttribute("name");
				// TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册
				configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);
			} else {
				// 如果子节点是typeAlias节点，那么就获取alias属性和type的属性值
				String alias = child.getStringAttribute("alias");
				String type = child.getStringAttribute("type");
				try {
					Class<?> clazz = Resources.classForName(type);
					if (alias == null) {
						typeAliasRegistry.registerAlias(clazz);
					} else {
						typeAliasRegistry.registerAlias(alias, clazz);
					}
				} catch (ClassNotFoundException e) {
					throw new BuilderException("Error registering typeAlias for '" + alias + "'. Cause: " + e, e);
				}
			}
		}
	}
}
我要介绍的主要是
configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage); 方法。这个方法首先getTypeAliasRegistry()获取注册中心，这个注册中心其实底层就是个Map,获取到TypeAliasRegistry后就执行他的registerAliases(typeAliasPackage)方法
下面是TypeAliasRegistry这个类的结构： protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry(); 点进去TypeAliasRegistry看看这个类

public class TypeAliasRegistry {
	//这个就是存放别名和具体类映射关系的地方,是一个HashMap
	private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<>();
	//这里创建时默认注册了一堆包名,这里就是在mapper.xml里可以使用的那些别名
	//这里的别名可以对应上官网上介绍的别名了,以后就不用苦逼的去官网找mybatis默认的java类型别名了,来这儿
	//这是官网地址: http://www.mybatis.org/mybatis-3/configuration.html#typeAliases
	public TypeAliasRegistry() {
		registerAlias("string", String.class);
		registerAlias("byte", Byte.clas);
		registerAlias("long", Long.class);
		...
	}
｝
接下来是重点：registerAliases(typeAliasPackage)方法 这个方法里面通过不断的调用自己的重载方法完成注册

//这里就是把穿过来的报名丢给一个重载方法来注册
	//默认会把简单类名首字母小写作为别名,也可以在bean中加上annotation @Alias("别名")来操作
	public void registerAliases(String packageName) {
		registerAliases(packageName, Object.class);
	}

	//执行一系列的骚操作然后拿到具体的对象集合,就去遍历注册:默认会把简单类名首字母小写作为别名,然后调用registerAlias(type);
	public void registerAliases(String packageName, Class<?> superType) {
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//值得注意的是这个find方法，他会遍历packageName包下的所有文件，找出.class结尾的文件通过classload创建出对象
		//然后丢进HashSet里，下下面一句代码中getClasses其实就是拿到这个HashSet，find方法里面的具体实现自己看，本文点到为止，不会深入到最底层
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
		for (Class<?> type : typeSet) {
			// Ignore inner classes and interfaces (including package-info.java)
			// Skip also inner classes. See issue #6
			if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
				//名字不为空船+不是接口+简单类名未被注册就进来了
				registerAlias(type);
			}
		}
	}

	//在这里判断是否有注解,有的话就把原来的简单类名首字母小写那个覆盖掉,即注解优先
	public void registerAlias(Class<?> type) {
		String alias = type.getSimpleName();
		Alias aliasAnnotation = type.getAnnotation(Alias.class);
		if (aliasAnnotation != null) {
			//获取注解的值
			alias = aliasAnnotation.value();
		}
		registerAlias(alias, type);
	}

	//注册别名的本质方法:其实就是向保存别名的hashMap新增值而已
	public void registerAlias(String alias, Class<?> value) {
		if (alias == null) {
			throw new TypeException("The parameter alias cannot be null");
		}
		// issue #748
		String key = alias.toLowerCase(Locale.ENGLISH);
		if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
			throw new TypeException("The alias '" + alias + "' is already mapped to the value '"
					+ TYPE_ALIASES.get(key).getName() + "'.");
		}
		TYPE_ALIASES.put(key, value);
	}
如果认真的看了上面的注释，其他的也不用多说了，我觉得很几把清楚了。在深入的话就是基础的知识了，自己进去就能看得懂的。虽然上面只是对typeAliases的子标签package解释，如果看懂了，对于另一个标签typeAlias的分析，完全没压力。所以对于有typeAliases标签的分析到此为止。

2.1.3 environmentsElement()解析environments标签
对于其他的标签，我们先跳过直接来environments，毕竟这个肯定要用的。像那些plugins，objectFactory，typeHandlers毕竟用得少，晚点再说。

// read it after objectFactory and objectWrapperFactory issue #631
			// 解析environments标签及其子标签
			environmentsElement(root.evalNode("environments"));
老规矩，进入environmentsElement()方法，还是那句话，先看注释和代码，大概过一遍，不要在意细节。这个environments子标签相对有点麻烦，可以打开mybatis.xml来对照着看

<!-- 配置运行环境 -->
<environments default="mysql">
	<environment id="mysql">
		<transactionManager type="JDBC" />
		<dataSource type="POOLED">
			<property name="driver" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</dataSource>
	</environment>
</environments>
// 解析enviroments元素节点的方法XNode context的值为environments
private void environmentsElement(XNode context) throws Exception {
	if (context != null) {
		if (environment == null) {
			// 获取environments节点的default属性的值并存入成员变量environment中,这在下几句代码就用到了
			// 如:<environments default="mysql"> 	String environment;
			environment = context.getStringAttribute("default");
		}
		// 遍历解析environments子节点
		for (XNode child : context.getChildren()) {
			// 获取environment标签的id
			String id = child.getStringAttribute("id");
			// isSpecifiedEnvironment(id)判断id是否equals environment,如果是的话才去解析当前environment标签的子标签
			// 为什么不去解析其他的标签?因为用不到啊~用不到的也加载那不是浪费了?
			if (isSpecifiedEnvironment(id)) {
				// 获取解析好transactionManager标签;事务mybatis有两种：JDBC 和 MANAGED,
				// 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器
				TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
				// 获取解析好的dataSource标签的DataSourceFactory对象,然后从DataSourceFactory中获取dataSource
				DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
				DataSource dataSource = dsFactory.getDataSource();

				// 这就是环境的设置了
				Environment.Builder environmentBuilder = new Environment.Builder(id).transactionFactory(txFactory)
						.dataSource(dataSource);
				// 同样,将解析后的xml转为具体对象后丢进configuration对象
				configuration.setEnvironment(environmentBuilder.build());
			}
		}
	}
}
发现没有，上面分析的三个标签，到最后都有同一个操作。往configuration丢进去解析玩的标签。这个configuration在之后的Sql执行等操作还都会用的上，贯穿始终。
对于面的代码，事务其实没啥好说的代码实现很简单，看下dataSourceElement()方法

//	  <dataSource type="POOLED"> 
//		  <property name="driver" value="${jdbc.driver}"/>
//		  <property name="url" value="${jdbc.url}"/> 
//		  <property name="username" value="${jdbc.username}"/> 
//		  <property name="password" value="${jdbc.password}"/> 
//	  </dataSource>
// 解析dataaSource标签的子标签,并包装为DatSourceFactory
private DataSourceFactory dataSourceElement(XNode context) throws Exception {
	if (context != null) {
		String type = context.getStringAttribute("type");
		// 获取dataSource标签下的properties标签的name和value,注意:Properties继承的Hashtable,这就是为什么他能放多个properties标签的原因
		Properties props = context.getChildrenAsProperties();
		// 获取一个DataSourceFactory工厂,然后把props里所有的属性都设置进去
		DataSourceFactory factory = (DataSourceFactory) resolveClass(type).newInstance();
		factory.setProperties(props);
		return factory;
	}
	throw new BuilderException("Environment declaration requires a DataSourceFactory.");
}
environments标签也就这样而已，跟着这个思路一个一个标签来看，没什么难的。而且在上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。>上一篇文章中，我已经把mybatis-3.5.0我注释了的代码下载地址发了出来，只要fork下来跟着他的执行流程走，底层的东西好好看看，就能弄懂。 那么对于xml的解析就暂时到这了，懒得说了，什么时候闲着蛋疼再来补下吧，而且也真不到怎么说了，要说也是照着我的注释说。。还不如down份下来看看。

2.1.3 mapperElement()解析mappers标签
在写下一篇文章的时候想起这个标签的解析有必要说一下，又回来了，这个绝对是最后一个标签。屁话不多说

//			<mappers> 
//				<mapper resource="dao/mapper2.xml" /> 
//				<mapper class="com.dy.dao.UserDao"/> 
//				<mapper url="file://........"/> 
//				<package name="dao"/> 
//			</mappers>
			// 解析mappers标签及其子标签，这个就很重要了，这里完成了我们dao的interface与mapper.xml的映射
			mapperElement(root.evalNode("mappers"));
跟进mapperElement()方法

	//解析mappers标签及其子标签
	//在这里会完成interface与mapper的映射
//	<mappers> 
//		<mapper resource="dao/mapper2.xml" /> 
//		<mapper class="com.dy.dao.UserDao"/> 
//		<mapper url="file://........"/> 
//		<package name="dao"/> 
//	</mappers>
private void mapperElement(XNode parent) throws Exception {
	if (parent != null) {
		for (XNode child : parent.getChildren()) {
			if ("package".equals(child.getName())) {
				//如果mappers节点的子节点是package, 那么就扫描package下的文件, 丢进configuration
				//我们主要讲这种情况,其他三种情况其实都是一个鸟样,一通百通
				//获取标签里制定的包名（name字段的值）
				String mapperPackage = child.getStringAttribute("name");
				//看吧，又是一个往configuration丢东西的方法。此方法就是用来添加mapper的
				configuration.addMappers(mapperPackage);
			} else {
				//如果是mapper标签就获取它域的值,域的可能有三种:resource,url,class
				String resource = child.getStringAttribute("resource");
				String url = child.getStringAttribute("url");
				String mapperClass = child.getStringAttribute("class");
				//三选一
				if (resource != null && url == null && mapperClass == null) {
					//这里是resource
					ErrorContext.instance().resource(resource);
					InputStream inputStream = Resources.getResourceAsStream(resource);
					//mapper映射文件都是通过XMLMapperBuilder解析
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url != null && mapperClass == null) {
					//这里是url
					ErrorContext.instance().resource(url);
					InputStream inputStream = Resources.getUrlAsStream(url);
					XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url,
							configuration.getSqlFragments());
					mapperParser.parse();
				} else if (resource == null && url == null && mapperClass != null) {
					//这里是class
					Class<?> mapperInterface = Resources.classForName(mapperClass);
					configuration.addMapper(mapperInterface);
				} else {
					//选不到就丢错误
					throw new BuilderException(
							"A mapper element may only specify a url, resource or class, but not more than one.");
				}
			}
		}
	}
}
毫无疑问，重要的是这个方法第一个if判断里的configuration.addMappers(mapperPackage);我们点进去，里面使用了委托模式，调用了注册器mapperRegistry的adddMappers()方法。

public void addMappers(String packageName) {
		//其实就是往mapperRegistry里注册mapper,mapperRegistry里面有一个(map)knownMappers
		//这个map里,key是mapper的namespace对应的类/接口,value就是这个类的BeanFactory
		mapperRegistry.addMappers(packageName);
	}
那么问题来了，mapperRegistry是什么，没错就是Map

跟进去看看MapperRegistry
protected final MapperRegistry mapperRegistry = new MapperRegistry(this);

public class MapperRegistry {
	private final Configuration config;
	// 这个map存放的是每一种接口对应的MapperProxyFactory
	//key:interface(当然也可以是类,但是按规定来的话应该是接口); value:MapperProxyFactory
	private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<>();
	....
}
说了注册器的类型后我们回到主线。进入注册器的addMappers()方法，里面调用了重载方法

//注册mapper
public void addMappers(String packageName) {
	addMappers(packageName, Object.class);
}
我们来到这个重载方法,这个方法主要是扫描包把所有的.class后缀的文件都通过classload创建出实例对象，然后丢进一个Set里面，这个find()方法在上面注册别名有提过一下，同样，在深入的不说了。

	public void addMappers(String packageName, Class<?> superType) {
		//新建一个解析器用来解析packageName包下的所有类
		ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<>();
		//找到packageName下所有.class文件并创建出相应的实例对象,再放入resolverUtil的matches(这是一个HashSet)里
		resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
		//getClasses这个方法会返回resolverUtil里的matches,这个matches放着该包下所有的类和接口的实例
		Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();
		//遍历mapperSet
		for (Class<?> mapperClass : mapperSet) {
			//该方法把实例对象作为key,然后new出相应的工厂作为value,丢进knownMappers里
			addMapper(mapperClass);
		}
	}
到这里我们仍未见到mapper与接口的映射，其实他们之间的映射在方法addMapper(mapperClass)里，我们可以继续深入

//这个方法主要是往knownMappers里注册接口/类和它们的工厂对象
//并且调用MapperAnnotationBuilder.parse()对接口与mapper完成映射
public <T> void addMapper(Class<T> type) {
	//判断是否为借口，是的话继续执行，否则直接返回
	if (type.isInterface()) {
		//判断当前type是否已经被注册过
		if (hasMapper(type)) {
			throw new BindingException("Type " + type + " is already known to the MapperRegistry.");
		}
		boolean loadCompleted = false;
		try {
			//把Class<T> type这个实例作为key,这个实例的工厂作为value丢进knownMappers
			knownMappers.put(type, new MapperProxyFactory<>(type));
			// It's important that the type is added before the parser is run
			// otherwise the binding may automatically be attempted by the
			// mapper parser. If the type is already known, it won't try.
			//这里new出一个解析器，主要用来解析xml和注解里的Sql，为什么注解会覆盖掉mapper.xml的原因就在parser.parse()这个方法里
			MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);
			//解析sql语句
			parser.parse();
			loadCompleted = true;
		} finally {
			if (!loadCompleted) {
				knownMappers.remove(type);
			}
		}
	}
}
在上面的奶妈中new出了一个MapperAnnotationBuilder parser，这个对象里面的parse()完成了方法与sql的映射。进去看看

//对当前的解析，完成接口与mapper的映射
public void parse() {
	String resource = type.toString();
	if (!configuration.isResourceLoaded(resource)) {
		//加载xml资源，也就是我们的mapper.xml文件，该方法会用到xml里的namespace
		loadXmlResource();
		//resource=dao.IStudentDao
		configuration.addLoadedResource(resource);
		//向assistant中set如currentNamespace，值为当前接口的名字
		assistant.setCurrentNamespace(type.getName());
		parseCache();
		parseCacheRef();
		//获取当前接口里的所有方法
		Method[] methods = type.getMethods();
		for (Method method : methods) {
			try {
				// issue #237
				if (!method.isBridge()) {
					//根据方法名解析SQL语句
					parseStatement(method);
				}
			} catch (IncompleteElementException e) {
				configuration.addIncompleteMethod(new MethodResolver(this, method));
			}
		}
	}
	parsePendingMethods();
}
再深入的方法这里就不放了，差不多就得了。需要注意的一点就是，如果使用的是package标签来扫描mapper文件，那么mapper文件的文件名必须要和接口名相同，并且放在同一个包下（或者直接放在classpath下）。而另三种扫描mapper的方式只需要命名空间与接口全限定名相同。为什么呢？在上面代码中的loadXmlResource()方法里面会给你一个满意的解释，看懂了package为什么要相同，那么另外三种也不在话下，猜也猜得出。注释我也打上了，看就得了。

2.2 创建SqlSessionFactory之build(parser.parse());方法
虽说xml的解析不想说了，但是我们的目的还没达到，不知道你还记不记得上面说过的大致流程？

首先我们会使用SqlSessionFactoryBuilder.build()创建一个SqlSessionFactory，在创建这个SqlSessionFactory的过程中会对mybatis.xml进行解析。

xml的解析已经说了，现在到创建SqlSessionFactory的流程了
来，回到org.apache.ibatis.session.SqlSessionFactoryBuilder类，找到build的最终方法 return build(parser.parse()); 进去build(),又是一个调用重载方法~

//调用DefaultSqlSessionFactory的构造器方法创建对象
	public SqlSessionFactory build(Configuration config) {
		return new DefaultSqlSessionFactory(config);
	}
简单吧，里面我都不想看了，就是调用带参构造器方法，把Configuration丢进去DefaultSqlSessionFactory而已。到此为止，我们获取到了我们的SqlSessionFactory，现在，回去我们的最上方。看那个流程图，快要到达我们本篇的目的了。

3.回来StudentDaoImpl.java
//刚刚我们获取了sqlSessionFactory。现在我们要做的事openSession()，拿到SqlSession，那么这篇就完事了。刚写那篇忘了对着流程图来，现在我们对着那个图来。妈的讲道理我不想多传个图片上去，fdfs贼几把吃运存。所以把那个图片down下来吧，自己对着来看下面的分析

InputStream inputStream = Resources.getResourceAsStream("mybatis.xml");
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
//上面是获取sqlSessionFactory的代码。现在我们关注的是下面这句openSession()
sqlSession = sqlSessionFactory.openSession();
点进openSession()方法，发现是接口方法，那么我们用的实现类是谁？忘了的话建议重新看上面的build()。下面开始分析了
点进openSession()方法，老规矩又是重载调用。我们来看看这个重载方法。

@Override	public SqlSession openSession() {
	return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);
}
这个configuration.getDefaultExecutorType()是个什么鬼东西？？？？好吧，跟进去getDefaultExecutorType()，是一个ExecutorType，这个ExecutorType又是什么鬼东西？？？

public enum ExecutorType {
  SIMPLE, REUSE, BATCH
}
就只是个枚举而已，而且默认为ExecutorType.SIMPLE
protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE; 
行的吧，那我们据需我们的跟进，来到openSession()的最终方法。

//真正的获取sqlSession，这个SqlSession里面需要配置类configuration，执行器executor，是否提交标志autoCommit
//executor里面需要事务tx，执行器类型execType，默认为ExecutorType.SIMPLE
private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level,
		boolean autoCommit) {
	Transaction tx = null;
	try {
		//从configuration中获取Environment,Environment对象包含了数据源和事务的配置
		final Environment environment = configuration.getEnvironment();
		//从environment里获取事务，这个没毛病吧？environment标签里有什么来着？
		//<transactionManager type="JDBC" />
		//<dataSource type="POOLED"> ... </dataSource>
		final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);
		tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);
		//这里获取executor的原因是因为表面上是sqlSession执行sql,实际上是调用sqlSession的一个成员变量Executor执行的
		final Executor executor = configuration.newExecutor(tx, execType);
		//调用构造器创建SqlSession并返回
		return new DefaultSqlSession(configuration, executor, autoCommit);
	} catch (Exception e) {
		closeTransaction(tx); // may have fetched a connection so lets call close()
		throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
	} finally {
		ErrorContext.instance().reset();
	}
}
到此为止，SqlSession获取完成。获取SqlSession过程比创建SqlSessionFactory简单多了，只要从configuration中获取到要用的东西就行了。
说到这里不得不再次提一下，Configuration非常非常重要！对于mybatis的所有配置和属性，几乎都在这里了。(String)
2019-10-31 15:59:35.297 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 15:59:35.305 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 15:59:35.305 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 15:59:35.305 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 15:59:35.306 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 15:59:35.306 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 9(Integer), 14(Integer)
2019-10-31 15:59:35.306 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 15:59:35.314 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 15:59:35.314 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 15:59:35.315 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 15:59:35.315 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 15:59:35.315 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 7(Integer), 11(Integer)
2019-10-31 15:59:35.322 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 15:59:35.471 ERROR 30816 --- [http-nio-8080-exec-1] c.pan.interceptor.ExceptionInterceptor   : Request URL : http://localhost:8080/admin/blogs Exception : {}

java.lang.RuntimeException: solr更新失败
	at com.pan.service.impl.SolrServiceImpl.saveBlogToSolr(SolrServiceImpl.java:103)
	at com.pan.controller.BlogController.post(BlogController.java:173)
	at com.pan.controller.BlogController$$FastClassBySpringCGLIB$$1c3687d2.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.pan.controller.BlogController$$EnhancerBySpringCGLIB$$dd0d5b91.post(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2019-10-31 15:59:35.472  WARN 30816 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: solr更新失败]
2019-10-31 15:59:55.462  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 15:59:55.678 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.678 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.679 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.680 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.680 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:55.680 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.681 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.681 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.682 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.683 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.683 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:55.683 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.684 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.684 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.685 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.686 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.686 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:55.687 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.688 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.688 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.689 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.690 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.690 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.691 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.692 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.692 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.692 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.693 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.694 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:55.694 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.695 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.695 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.696 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.697 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.697 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 15:59:55.698 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.699 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 15:59:55.699 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 15:59:55.699 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.701 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 15:59:55.701 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 15:59:55.701 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 15:59:55.703 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 15:59:55.703 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:59:55.704 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:59:55.704 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 15:59:55.704 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:59:55.705 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 15:59:55.705 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 15:59:55.705 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 15:59:55.706 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 15:59:55.706 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 15:59:55.706 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 15:59:55.707 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 15:59:55.707 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 15:59:55.708 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 15:59:55.708 DEBUG 30816 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 15:59:55.708 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 15:59:55.708 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 15:59:55.709 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 15:59:55.710  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 15:59:55.710  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 248
2019-10-31 16:00:06.509  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 16:00:06.509  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 16:00:06.509  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 0
2019-10-31 16:00:10.086  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@498959a8]}
2019-10-31 16:00:10.087 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 16:00:10.087 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 16:00:10.088 DEBUG 30816 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 16:00:10.089  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 16:00:10.089  INFO 30816 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 3
2019-10-31 16:00:10.092  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 16:00:10.092  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 16:00:10.092  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 0
2019-10-31 16:00:11.585  INFO 30816 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:00:11.586 DEBUG 30816 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:00:11.586 DEBUG 30816 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:00:11.586 DEBUG 30816 --- [http-nio-8080-exec-8] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:00:11.587 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:00:11.587 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:00:11.589 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:00:11.590 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.590 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:11.591 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.592 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.592 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:11.593 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.595 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.595 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:00:11.607 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.608 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.609 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:11.609 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.611 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.611 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:11.612 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.613 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.614 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:11.614 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.616 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.616 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:11.617 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.618 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.618 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:00:11.618 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.619 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.620 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:11.620 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.621 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:11.621 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:11.622 DEBUG 30816 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:11.623 DEBUG 30816 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:00:11.623 DEBUG 30816 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:00:11.623 DEBUG 30816 --- [http-nio-8080-exec-8] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:00:11.624  INFO 30816 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:00:11.624  INFO 30816 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 39
2019-10-31 16:00:13.798  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 16:00:13.799 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:00:13.799 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:00:13.799 DEBUG 30816 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:00:13.800 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:00:13.800 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 16:00:13.802 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 16:00:13.803 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:13.803 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:13.804 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:13.805 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:13.805 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:13.806 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:13.807 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:13.807 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:13.807 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:13.809 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:13.809 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:13.809 DEBUG 30816 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:13.811 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:00:13.811 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:00:13.812 DEBUG 30816 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:00:13.812  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 16:00:13.812  INFO 30816 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 14
2019-10-31 16:00:18.983  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/36/delete', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.delete', args=[36, {}]}
2019-10-31 16:00:18.983 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:00:18.984 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 36(Integer)
2019-10-31 16:00:18.984 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:18.985 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 16:00:18.986 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 14(Integer)
2019-10-31 16:00:18.986 DEBUG 30816 --- [http-nio-8080-exec-10] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 16:00:18.987 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 16:00:18.988 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 源码分析(String), 8(Integer), 14(Integer)
2019-10-31 16:00:18.988 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 16:00:18.992 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 16:00:18.992 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 11(Integer)
2019-10-31 16:00:18.993 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 16:00:18.993 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 16:00:18.993 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mybatis(String), 6(Integer), 11(Integer)
2019-10-31 16:00:18.994 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 16:00:18.995 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==>  Preparing: delete from blog where id = ? 
2019-10-31 16:00:18.995 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.deleteByPrimaryKey  : ==> Parameters: 36(Integer)
2019-10-31 16:00:18.996 DEBUG 30816 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.deleteByPrimaryKey  : <==    Updates: 1
2019-10-31 16:00:19.202  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 16:00:19.203  INFO 30816 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 220
2019-10-31 16:00:19.206  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:00:19.206 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:00:19.207 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:00:19.207 DEBUG 30816 --- [http-nio-8080-exec-3] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:00:19.208 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:00:19.208 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:00:19.211 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:00:19.212 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.212 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:19.213 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.214 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.214 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:19.215 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.216 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.216 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:00:19.216 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.218 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.218 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:19.219 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.220 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.220 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:19.221 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.222 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.222 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:19.222 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.223 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.223 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:19.224 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.225 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.225 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:00:19.225 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.226 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.226 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:19.226 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.227 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:19.228 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:19.228 DEBUG 30816 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:19.229 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:00:19.230 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:00:19.230 DEBUG 30816 --- [http-nio-8080-exec-3] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:00:19.231  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:00:19.231  INFO 30816 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 25
2019-10-31 16:00:22.671  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 16:00:22.671 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:00:22.672 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:00:22.672 DEBUG 30816 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:00:22.673 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:00:22.673 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 16:00:22.674 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 3
2019-10-31 16:00:22.676 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:22.676 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:22.676 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:22.677 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:22.678 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:22.678 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:22.679 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:22.679 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:22.680 DEBUG 30816 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:22.681 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:00:22.681 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:00:22.681 DEBUG 30816 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:00:22.682  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 16:00:22.682  INFO 30816 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 12
2019-10-31 16:00:55.999  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 16:00:56.228 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.228 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.229 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.229 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.230 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:56.230 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.231 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.231 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.231 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.232 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.232 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.233 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.234 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.234 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.235 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.236 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.236 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.236 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.237 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.237 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.238 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.239 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.239 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:56.240 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.241 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.241 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.241 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.243 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.243 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:00:56.244 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.245 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:00:56.245 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:00:56.246 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.247 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:00:56.247 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:00:56.247 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:00:56.248 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:00:56.248 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:00:56.248 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:00:56.249 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:00:56.249 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:00:56.250 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:00:56.251 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:00:56.251 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:00:56.252 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:00:56.252 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:00:56.252 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:00:56.253 DEBUG 30816 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 16:00:56.253 DEBUG 30816 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:00:56.253 DEBUG 30816 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:00:56.254 DEBUG 30816 --- [http-nio-8080-exec-7] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:00:56.254 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:00:56.254 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:00:56.255 DEBUG 30816 --- [http-nio-8080-exec-7] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:00:56.256  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:00:56.256  INFO 30816 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 257
2019-10-31 16:01:08.089  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 16:01:08.257 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.258 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.258 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.260 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.260 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:01:08.261 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.262 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.262 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.262 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.264 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.264 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:01:08.264 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.265 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.265 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.266 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.268 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.268 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:01:08.268 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.269 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.270 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.270 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.271 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.271 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.271 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.272 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.272 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.273 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.274 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.274 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:01:08.275 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.275 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.275 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.276 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.277 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.277 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:01:08.278 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.279 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:01:08.279 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:01:08.280 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.281 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:01:08.281 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:01:08.282 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:01:08.283 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:01:08.283 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:01:08.284 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:01:08.284 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:01:08.284 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:01:08.285 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:01:08.285 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:01:08.285 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:01:08.285 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:01:08.286 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:01:08.286 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:01:08.286 DEBUG 30816 --- [http-nio-8080-exec-2] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 16:01:08.287 DEBUG 30816 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:01:08.287 DEBUG 30816 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:01:08.287 DEBUG 30816 --- [http-nio-8080-exec-2] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:01:08.287 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:01:08.287 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:01:08.288 DEBUG 30816 --- [http-nio-8080-exec-2] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:01:08.289  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:01:08.289  INFO 30816 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 200
2019-10-31 16:02:30.767  INFO 37664 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 37664 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 16:02:30.767 DEBUG 37664 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 16:02:30.767  INFO 37664 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 16:02:31.790  INFO 37664 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 16:02:31.837  INFO 37664 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 repository interfaces.
2019-10-31 16:02:32.349  INFO 37664 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$439ad64b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 16:02:32.715  INFO 37664 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 16:02:33.118  INFO 37664 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 16:02:35.887  INFO 37664 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 16:02:36.035  INFO 37664 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 16:02:36.764  INFO 37664 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.692 seconds (JVM running for 7.831)
2019-10-31 16:02:37.320 DEBUG 37664 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:02:37.355 DEBUG 37664 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 28(Integer)
2019-10-31 16:02:37.394 DEBUG 37664 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:02:37.735  INFO 37664 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 16:02:37.735  INFO 37664 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 16:02:37.762  INFO 37664 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 16:02:46.539  INFO 20496 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 20496 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 16:02:46.539 DEBUG 20496 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 16:02:46.539  INFO 20496 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 16:02:47.524  INFO 20496 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 16:02:47.579  INFO 20496 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35ms. Found 0 repository interfaces.
2019-10-31 16:02:48.090  INFO 20496 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c0d3f504] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 16:02:48.454  INFO 20496 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 16:02:48.825  INFO 20496 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 16:02:51.400  INFO 20496 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 16:02:51.552  INFO 20496 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 16:02:52.299  INFO 20496 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.573 seconds (JVM running for 7.693)
2019-10-31 16:02:52.698 DEBUG 20496 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:02:52.737 DEBUG 20496 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 29(Integer)
2019-10-31 16:02:52.764 DEBUG 20496 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:02:53.084  INFO 20496 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 16:02:53.088  INFO 20496 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 16:02:53.096  INFO 20496 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 16:03:01.918  INFO 26324 --- [main] com.pan.solr.SolrTest                    : Starting SolrTest on LAPTOP-9SU42IID with PID 26324 (started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 16:03:01.918 DEBUG 26324 --- [main] com.pan.solr.SolrTest                    : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 16:03:01.918  INFO 26324 --- [main] com.pan.solr.SolrTest                    : The following profiles are active: dev
2019-10-31 16:03:02.914  INFO 26324 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 16:03:02.965  INFO 26324 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 repository interfaces.
2019-10-31 16:03:03.525  INFO 26324 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fe3b2b3c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 16:03:03.884  INFO 26324 --- [main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 16:03:04.284  INFO 26324 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 16:03:07.067  INFO 26324 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 16:03:07.215  INFO 26324 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 16:03:07.946  INFO 26324 --- [main] com.pan.solr.SolrTest                    : Started SolrTest in 6.879 seconds (JVM running for 7.956)
2019-10-31 16:03:08.385 DEBUG 26324 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:03:08.420 DEBUG 26324 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 35(Integer)
2019-10-31 16:03:08.456 DEBUG 26324 --- [main] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:08.838  INFO 26324 --- [Thread-3] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2019-10-31 16:03:08.838  INFO 26324 --- [Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2019-10-31 16:03:08.854  INFO 26324 --- [Thread-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2019-10-31 16:03:16.342  INFO 40648 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 40648 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 16:03:16.342 DEBUG 40648 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 16:03:16.342  INFO 40648 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 16:03:16.393  INFO 40648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 16:03:16.393  INFO 40648 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 16:03:17.116  INFO 40648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 16:03:17.152  INFO 40648 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 0 repository interfaces.
2019-10-31 16:03:17.532  INFO 40648 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a3ca9c56] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 16:03:17.997  INFO 40648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 16:03:18.083  INFO 40648 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 16:03:18.084  INFO 40648 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 16:03:18.210  INFO 40648 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 16:03:18.211  INFO 40648 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1818 ms
2019-10-31 16:03:18.370  INFO 40648 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 16:03:18.638  INFO 40648 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 16:03:19.934  INFO 40648 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 16:03:20.027  INFO 40648 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 16:03:20.776  INFO 40648 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 16:03:20.835  INFO 40648 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 16:03:20.839  INFO 40648 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.35 seconds (JVM running for 6.471)
2019-10-31 16:03:48.237  INFO 40648 --- [http-nio-8080-exec-4] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 16:03:48.237  INFO 40648 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 16:03:48.252  INFO 40648 --- [http-nio-8080-exec-4] o.s.web.servlet.DispatcherServlet        : Completed initialization in 13 ms
2019-10-31 16:03:48.272  INFO 40648 --- [http-nio-8080-exec-4] com.pan.interceptor.LoginIntercepter     : 用户没登录或者登录过期,请重新登录
2019-10-31 16:03:48.294  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 16:03:48.298  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 16:03:48.298  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 6
2019-10-31 16:03:49.242  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 16:03:49.642 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.668 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.694 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.701 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.701 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.702 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.704 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.705 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.706 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.708 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.709 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:49.710 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.711 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.711 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.713 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.715 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.715 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:49.716 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.717 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.718 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.719 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.721 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.722 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:03:49.724 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.726 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.726 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.727 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.728 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.729 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:49.730 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.732 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.732 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.733 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.735 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.735 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.736 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.738 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:49.738 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.740 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.741 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:49.742 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:49.742 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:49.783 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:03:49.784 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:03:49.785 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:03:49.788 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:03:49.789 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:03:49.791 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:03:49.797 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:03:49.797 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:03:49.798 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:03:49.799 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:03:49.799 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:03:49.800 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 16:03:49.811 DEBUG 40648 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:03:49.811 DEBUG 40648 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:03:49.812 DEBUG 40648 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:03:49.813 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:03:49.813 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:03:49.814 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:03:49.815  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:03:49.815  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 573
2019-10-31 16:03:54.064  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 16:03:54.234 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.234 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.238 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.240 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.240 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:54.241 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.243 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.244 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.245 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.247 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.247 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:54.248 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.250 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.250 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.251 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.253 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.253 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:54.255 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.256 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.257 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.258 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.260 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.260 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:54.261 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.262 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.263 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.264 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.265 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.266 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:03:54.267 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.268 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:03:54.269 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:03:54.269 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.271 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:03:54.272 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:03:54.272 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:03:54.274 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:03:54.274 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:03:54.275 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:03:54.276 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:03:54.276 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:03:54.278 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:03:54.278 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:03:54.278 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:03:54.279 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:03:54.280 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:03:54.281 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:03:54.282 DEBUG 40648 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 6
2019-10-31 16:03:54.284 DEBUG 40648 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:03:54.284 DEBUG 40648 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:03:54.284 DEBUG 40648 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:03:54.285 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:03:54.285 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:03:54.287 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:03:54.293  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:03:54.294  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 230
2019-10-31 16:04:24.295  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@179b9b28]}
2019-10-31 16:04:24.307 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 16:04:24.308 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 16:04:24.309 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 16:04:24.312  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 16:04:24.312  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 17
2019-10-31 16:04:24.325  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 16:04:24.329  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 16:04:24.330  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 4
2019-10-31 16:04:25.930  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:04:25.934 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:04:25.934 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:04:25.935 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:04:25.936 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:04:25.937 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:04:25.944 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:04:25.947 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.948 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:25.948 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.950 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.950 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:25.951 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.953 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.954 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:04:25.955 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.957 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.957 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:25.958 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.960 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.960 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:25.961 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.962 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.962 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:25.963 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.964 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.965 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:25.965 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.967 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.967 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:04:25.967 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.969 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.969 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:25.969 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.971 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:25.971 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:25.972 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:25.975 DEBUG 40648 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:04:25.975 DEBUG 40648 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:04:25.976 DEBUG 40648 --- [http-nio-8080-exec-5] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:04:25.977  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:04:25.977  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 47
2019-10-31 16:04:28.681  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 16:04:28.683 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 16:04:28.683 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 16:04:28.685 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 16:04:28.688 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:04:28.688 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:04:28.690 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:04:28.691  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 16:04:28.691  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 10
2019-10-31 16:04:31.887  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.tags', args=[null, {}]}
2019-10-31 16:04:31.891 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectByExample_COUNT  : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:04:31.891 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectByExample_COUNT  : ==> Parameters: 
2019-10-31 16:04:31.892 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TagMapper.selectByExample_COUNT  : <==      Total: 1
2019-10-31 16:04:31.893 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag limit ?,? 
2019-10-31 16:04:31.893 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:04:31.894 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TagMapper.selectByExample    : <==      Total: 6
2019-10-31 16:04:31.895  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/tags
2019-10-31 16:04:31.895  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 16:04:33.283  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.toInputPage', args=[{}]}
2019-10-31 16:04:33.283  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/tags-input
2019-10-31 16:04:33.283  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 0
2019-10-31 16:04:38.238  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.addTag', args=[Tag{id=null, name='mysql', blogs=null}, {}]}
2019-10-31 16:04:38.240 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag WHERE ( name = ? ) 
2019-10-31 16:04:38.240 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: mysql(String)
2019-10-31 16:04:38.241 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.selectByExample    : <==      Total: 0
2019-10-31 16:04:38.242 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.insertSelective    : ==>  Preparing: insert into tag ( name ) values ( ? ) 
2019-10-31 16:04:38.243 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.insertSelective    : ==> Parameters: mysql(String)
2019-10-31 16:04:38.244 DEBUG 40648 --- [http-nio-8080-exec-6] com.pan.dao.TagMapper.insertSelective    : <==    Updates: 1
2019-10-31 16:04:38.248  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Result : redirect:/admin/tags
2019-10-31 16:04:38.248  INFO 40648 --- [http-nio-8080-exec-6] com.pan.aspect.LogAspect                 : Spend time: 10
2019-10-31 16:04:38.256  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.TagContoller.tags', args=[null, {message=新增成功}]}
2019-10-31 16:04:38.257 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectByExample_COUNT  : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:04:38.257 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectByExample_COUNT  : ==> Parameters: 
2019-10-31 16:04:38.258 DEBUG 40648 --- [http-nio-8080-exec-8] c.p.dao.TagMapper.selectByExample_COUNT  : <==      Total: 1
2019-10-31 16:04:38.259 DEBUG 40648 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag limit ?,? 
2019-10-31 16:04:38.259 DEBUG 40648 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:04:38.260 DEBUG 40648 --- [http-nio-8080-exec-8] com.pan.dao.TagMapper.selectByExample    : <==      Total: 7
2019-10-31 16:04:38.261  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : admin/tags
2019-10-31 16:04:38.262  INFO 40648 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 6
2019-10-31 16:04:39.871  INFO 40648 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:04:39.872 DEBUG 40648 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:04:39.872 DEBUG 40648 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:04:39.873 DEBUG 40648 --- [http-nio-8080-exec-9] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:04:39.874 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:04:39.875 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:04:39.882 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:04:39.884 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.884 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:39.885 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.886 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.887 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:39.888 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.890 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.891 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:04:39.891 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.893 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.893 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:39.894 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.896 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.896 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:39.897 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.898 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.898 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:39.899 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.901 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.901 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:04:39.902 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.903 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.903 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:04:39.904 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.905 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.905 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:39.907 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.908 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:04:39.909 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:04:39.910 DEBUG 40648 --- [http-nio-8080-exec-9] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:04:39.911 DEBUG 40648 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:04:39.912 DEBUG 40648 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:04:39.912 DEBUG 40648 --- [http-nio-8080-exec-9] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:04:39.913  INFO 40648 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:04:39.913  INFO 40648 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 42
2019-10-31 16:04:41.529  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.input', args=[{}]}
2019-10-31 16:04:41.531 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 16:04:41.531 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 16:04:41.533 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TagMapper.selectByExample    : <==      Total: 7
2019-10-31 16:04:41.534 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:04:41.535 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:04:41.536 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:04:41.537  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 16:04:41.537  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 8
2019-10-31 16:06:09.968  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=null, uid=null, typeid=null, tagids='12', title='Mysql的InnoDb引擎的索引原理', description='mysql中Innodb的索引原理', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='', recommend=null, createTime=null, updateTime=null, content='索引:聚集索引和非聚集索引

聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键.

如果没有设置主键?

Innodb还会去找表中是否存在唯一标识的表的字段?

如果都没有的话,innodb就会存在三个隐藏列:

DB_ROW_ID做为隐藏的主键......

也就是说Innodb中是一定保证存在主键

自增主键和uuid作为主键的区别，由于主键使用了聚簇索引，如果主键是自增id,那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。

聚集索引的原理:
```mysql
    | id | user_name | user_phone  |
    | 1  | ss        | 455         |
    | 3  | pan       | 12345678911 |
    | 5  | sb        | 45678912345 |
    
```




非聚集索引的原理:

运行下面的sql语句建立索引:
```mysql
    create index index_name on user(user_name);
```


为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:
```mysql
    select * from user where user_name = 'pan';
```


那就先从user_name建立的索引B+数开始索引,当遍历到user_name='pan'的时候,就会找到它对应的主键索引值,用该主键索引值从聚集索引B+树中查看出磁盘中真实所放的行数据.

但是只是查看该索引值的时候:就会直接返回B+树中的值
```mysql
    select user_name from user where user_name = 'pan';
```', type=Type{id=2, name='null', blogs=null}, tagIds='12'}, org.apache.catalina.session.StandardSessionFacade@179b9b28, {}]}
2019-10-31 16:06:09.977 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==>  Preparing: insert into blog ( uid, typeid, tagids, title, description, first_picture, views, published, flag, create_time, update_time, content ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2019-10-31 16:06:09.980 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : ==> Parameters: 2(Integer), 2(Integer), 12(String), Mysql的InnoDb引擎的索引原理(String), mysql中Innodb的索引原理(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 16:06:09.969(Timestamp), 2019-10-31 16:06:09.969(Timestamp), 索引:聚集索引和非聚集索引

聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键.

如果没有设置主键?

Innodb还会去找表中是否存在唯一标识的表的字段?

如果都没有的话,innodb就会存在三个隐藏列:

DB_ROW_ID做为隐藏的主键......

也就是说Innodb中是一定保证存在主键

自增主键和uuid作为主键的区别，由于主键使用了聚簇索引，如果主键是自增id,那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。

聚集索引的原理:
```mysql
    | id | user_name | user_phone  |
    | 1  | ss        | 455         |
    | 3  | pan       | 12345678911 |
    | 5  | sb        | 45678912345 |
    
```




非聚集索引的原理:

运行下面的sql语句建立索引:
```mysql
    create index index_name on user(user_name);
```


为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:
```mysql
    select * from user where user_name = 'pan';
```


那就先从user_name建立的索引B+数开始索引,当遍历到user_name='pan'的时候,就会找到它对应的主键索引值,用该主键索引值从聚集索引B+树中查看出磁盘中真实所放的行数据.

但是只是查看该索引值的时候:就会直接返回B+树中的值
```mysql
    select user_name from user where user_name = 'pan';
```(String)
2019-10-31 16:06:09.982 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.BlogMapper.insertSelective   : <==    Updates: 1
2019-10-31 16:06:09.984 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==>  Preparing: select * from type where id = ? FOR UPDATE 
2019-10-31 16:06:09.985 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : ==> Parameters: 2(Integer)
2019-10-31 16:06:09.986 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.dao.TypeMapper.selectTypeForUpdate   : <==      Total: 1
2019-10-31 16:06:09.987 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==>  Preparing: update type set name = ?, blogs = ? where id = ? 
2019-10-31 16:06:09.988 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : ==> Parameters: 学习笔记(String), 4(Integer), 2(Integer)
2019-10-31 16:06:09.988 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.updateByPrimaryKey  : <==    Updates: 1
2019-10-31 16:06:09.990 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==>  Preparing: select * from tag where id = ? FOR UPDATE 
2019-10-31 16:06:09.991 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : ==> Parameters: 12(Integer)
2019-10-31 16:06:09.991 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagForUpdate   : <==      Total: 1
2019-10-31 16:06:09.992 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==>  Preparing: update tag set name = ?, blogs = ? where id = ? 
2019-10-31 16:06:09.992 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : ==> Parameters: mysql(String), 1(Integer), 12(Integer)
2019-10-31 16:06:09.993 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.updateByPrimaryKey   : <==    Updates: 1
2019-10-31 16:06:10.223  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 16:06:10.223  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 255
2019-10-31 16:06:10.227  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:06:10.228 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:06:10.228 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:06:10.229 DEBUG 40648 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:06:10.230 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:06:10.231 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:06:10.235 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:06:10.237 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.237 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:06:10.238 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.240 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.240 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:10.241 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.243 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.243 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:06:10.244 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.246 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.246 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:10.247 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.249 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.249 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:10.250 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.257 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.258 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:06:10.259 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.261 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.261 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:06:10.262 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.264 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.264 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:06:10.265 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.267 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.267 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:10.268 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.281 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:10.281 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:10.283 DEBUG 40648 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:10.285 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:06:10.285 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:06:10.286 DEBUG 40648 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:06:10.287  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:06:10.287  INFO 40648 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 60
2019-10-31 16:06:13.097  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogSearch', args=[false, , null, 2, {}]}
2019-10-31 16:06:13.098 DEBUG 40648 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:06:13.098 DEBUG 40648 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:06:13.099 DEBUG 40648 --- [http-nio-8080-exec-2] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:06:13.100 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:06:13.100 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 10(Integer), 10(Integer)
2019-10-31 16:06:13.101 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 4
2019-10-31 16:06:13.103 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:13.103 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:13.104 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:13.105 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:13.105 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:13.105 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:13.107 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:13.107 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:06:13.108 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:13.109 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:13.109 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:06:13.109 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:13.111 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:06:13.111 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:06:13.112 DEBUG 40648 --- [http-nio-8080-exec-2] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:06:13.113  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/blogs :: blogList
2019-10-31 16:06:13.113  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 17
2019-10-31 16:06:57.259  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs/37/input', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.toModifyPage', args=[37, {}]}
2019-10-31 16:06:57.261 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==>  Preparing: select id, name, blogs from tag 
2019-10-31 16:06:57.261 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : ==> Parameters: 
2019-10-31 16:06:57.262 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TagMapper.selectByExample    : <==      Total: 7
2019-10-31 16:06:57.264 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:06:57.264 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:06:57.265 DEBUG 40648 --- [http-nio-8080-exec-10] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:06:57.267 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:06:57.268 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 37(Integer)
2019-10-31 16:06:57.268 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:57.270 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:06:57.270 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:06:57.271 DEBUG 40648 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:06:57.272  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : admin/blogs-input
2019-10-31 16:06:57.272  INFO 40648 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 13
2019-10-31 16:11:39.483  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.post', args=[Blog{id=37, uid=null, typeid=null, tagids='12', title='Mysql的InnoDb引擎的索引原理', description='mysql中Innodb的索引原理', firstPicture='/images/a', views=null, appreciation=null, shareStatement=null, commentabled=null, published=1, flag='原创', recommend=null, createTime=null, updateTime=null, content='索引:聚集索引和非聚集索引

聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键.

如果没有设置主键?

Innodb还会去找表中是否存在唯一标识的表的字段?

如果都没有的话,innodb就会存在三个隐藏列:

DB_ROW_ID做为隐藏的主键......

也就是说Innodb中是一定保证存在主键

自增主键和uuid作为主键的区别，由于主键使用了聚簇索引，如果主键是自增id,那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。

聚集索引的原理:
```mysql
    | id | user_name | user_phone  |
    | 1  | ss        | 455         |
    | 3  | pan       | 12345678911 |
    | 5  | sb        | 45678912345 |
    
```
[![索引图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgg6AOfJnAABQ7eI-ENI472.png "索引图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgg6AOfJnAABQ7eI-ENI472.png "索引图")

执行select语句时的流程图:
```mysql
select * from table where pid = '11';
```
[![select图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgm6AUehEAABd0fBdz-4589.png "select图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgm6AUehEAABd0fBdz-4589.png "select图")
非聚集索引的原理:

运行下面的sql语句建立索引:
```mysql
    create index index_name on user(user_name);
```
[![创建非聚簇索引](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgtaAV2ZXAACTR72bJNU315.png "创建非聚簇索引")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgtaAV2ZXAACTR72bJNU315.png "创建非聚簇索引")

为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:
```mysql
    select * from user where user_name = 'pan';
```
[![图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgymAHOiuAACrY9qItjQ778.png "图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgymAHOiuAACrY9qItjQ778.png "图")

那就先从user_name建立的索引B+数开始索引,当遍历到user_name='pan'的时候,就会找到它对应的主键索引值,用该主键索引值从聚集索引B+树中查看出磁盘中真实所放的行数据.

但是只是查看该索引值的时候:就会直接返回B+树中的值
```mysql
    select user_name from user where user_name = 'pan';
```', type=Type{id=2, name='null', blogs=null}, tagIds='12'}, org.apache.catalina.session.StandardSessionFacade@179b9b28, {}]}
2019-10-31 16:11:39.488 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:11:39.489 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 37(Integer)
2019-10-31 16:11:39.490 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.499 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 16:11:39.499 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 37(Integer)
2019-10-31 16:11:39.506 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.507 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : ==>  Preparing: update blog SET uid = ?, typeid = ?, tagids = ?, title = ?, description = ?, first_picture = ?, views = ?, published = ?, flag = ?, create_time = ?, update_time = ?, content = ? where id = ? 
2019-10-31 16:11:39.508 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : ==> Parameters: 2(Integer), 2(Integer), 12(String), Mysql的InnoDb引擎的索引原理(String), mysql中Innodb的索引原理(String), /images/a(String), 0(Integer), 1(Integer), 原创(String), 2019-10-31 16:11:39.484(Timestamp), 2019-10-31 16:11:39.484(Timestamp), 索引:聚集索引和非聚集索引

聚集索引: 在InnoDb中,Mysql默认是按照表的主键来按顺序的存储数据.通过表的主键作为聚集索引,构造一颗索引的B+树,叶子节点的存放的数据就是表的行数据.因为聚集索引是按照B+数来排序的,所以主键在一个表中只能存放一个.InnoBd的默认聚集索引就是主键.

如果没有设置主键?

Innodb还会去找表中是否存在唯一标识的表的字段?

如果都没有的话,innodb就会存在三个隐藏列:

DB_ROW_ID做为隐藏的主键......

也就是说Innodb中是一定保证存在主键

自增主键和uuid作为主键的区别，由于主键使用了聚簇索引，如果主键是自增id,那么对应的数据一定也是相邻地存放在磁盘上的，写入性能比较高。如果是uuid的形式，频繁的插入会使innodb频繁地移动磁盘块，写入性能就比较低了。

聚集索引的原理:
```mysql
    | id | user_name | user_phone  |
    | 1  | ss        | 455         |
    | 3  | pan       | 12345678911 |
    | 5  | sb        | 45678912345 |
    
```
[![索引图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgg6AOfJnAABQ7eI-ENI472.png "索引图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgg6AOfJnAABQ7eI-ENI472.png "索引图")

执行select语句时的流程图:
```mysql
select * from table where pid = '11';
```
[![select图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgm6AUehEAABd0fBdz-4589.png "select图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgm6AUehEAABd0fBdz-4589.png "select图")
非聚集索引的原理:

运行下面的sql语句建立索引:
```mysql
    create index index_name on user(user_name);
```
[![创建非聚簇索引](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgtaAV2ZXAACTR72bJNU315.png "创建非聚簇索引")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgtaAV2ZXAACTR72bJNU315.png "创建非聚簇索引")

为表的其他字段建立索引,并且非聚集索引的B+树的叶子节点都不是真实的存放在磁盘中的数据,只存放着主键索引(聚集索引)和该索引字段的数据;查找该表的所有数据时,如果像一下的sql语句查看:
```mysql
    select * from user where user_name = 'pan';
```
[![图](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgymAHOiuAACrY9qItjQ778.png "图")](http://irats.cn:8888/group1/M00/00/00/rBECIl1dgymAHOiuAACrY9qItjQ778.png "图")

那就先从user_name建立的索引B+数开始索引,当遍历到user_name='pan'的时候,就会找到它对应的主键索引值,用该主键索引值从聚集索引B+树中查看出磁盘中真实所放的行数据.

但是只是查看该索引值的时候:就会直接返回B+树中的值
```mysql
    select user_name from user where user_name = 'pan';
```(String), 37(Integer)
2019-10-31 16:11:39.508 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.updateByPrimaryKeySelective      : <==    Updates: 1
2019-10-31 16:11:39.747  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : redirect:/admin/blogs
2019-10-31 16:11:39.747  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 264
2019-10-31 16:11:39.751  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {message=发布成功, blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 16:11:39.752 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 16:11:39.752 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 16:11:39.753 DEBUG 40648 --- [http-nio-8080-exec-1] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 16:11:39.754 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 16:11:39.754 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:11:39.757 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 16:11:39.759 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.759 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:39.760 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.762 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.762 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:39.763 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.765 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.765 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:11:39.766 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.767 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.767 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:39.768 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.769 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.770 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:39.770 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.772 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.772 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:39.773 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.774 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.774 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:39.775 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.777 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.777 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:11:39.778 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.779 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.779 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:39.780 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.782 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:39.782 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:39.782 DEBUG 40648 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:39.784 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 16:11:39.784 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 16:11:39.785 DEBUG 40648 --- [http-nio-8080-exec-1] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 16:11:39.786  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 16:11:39.786  INFO 40648 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 35
2019-10-31 16:11:46.676  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 16:11:46.858 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.859 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.862 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.866 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.867 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.868 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.872 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.873 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.880 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.884 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.884 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:46.886 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.889 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.889 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.891 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.893 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.893 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:46.894 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.896 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.896 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.897 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.899 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.900 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:46.901 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.903 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.903 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.905 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.907 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.907 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:46.908 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.910 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.911 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.912 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.913 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.913 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:46.914 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.916 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:46.916 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:46.917 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.919 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:46.919 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:11:46.920 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:46.921 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:11:46.922 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:11:46.922 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:11:46.923 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:11:46.923 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:11:46.924 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:11:46.924 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:11:46.924 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:11:46.925 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:11:46.926 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:11:46.926 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:11:46.927 DEBUG 40648 --- [http-nio-8080-exec-5] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 16:11:46.928 DEBUG 40648 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:11:46.928 DEBUG 40648 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:11:46.929 DEBUG 40648 --- [http-nio-8080-exec-5] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:11:46.929 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:11:46.929 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:11:46.930 DEBUG 40648 --- [http-nio-8080-exec-5] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:11:46.930  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:11:46.930  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 254
2019-10-31 16:11:50.903  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 16:11:51.067 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.067 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.068 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.070 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.070 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.071 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.072 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.072 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.073 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.074 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.074 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.075 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.076 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.076 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.076 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.078 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.079 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:51.079 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.081 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.081 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.082 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.083 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.084 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:51.085 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.086 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.086 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.087 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.088 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.088 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 16:11:51.088 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.090 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.090 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.090 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.091 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.092 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:11:51.092 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.093 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:11:51.093 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.094 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.095 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:11:51.095 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:11:51.096 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:11:51.096 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 16:11:51.097 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:11:51.097 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:11:51.098 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 16:11:51.099 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:11:51.099 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 16:11:51.100 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 16:11:51.100 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 16:11:51.100 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 16:11:51.101 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 16:11:51.101 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 16:11:51.101 DEBUG 40648 --- [http-nio-8080-exec-3] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 16:11:51.102 DEBUG 40648 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 16:11:51.102 DEBUG 40648 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 16:11:51.103 DEBUG 40648 --- [http-nio-8080-exec-3] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 16:11:51.103 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 16:11:51.103 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 16:11:51.103 DEBUG 40648 --- [http-nio-8080-exec-3] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 16:11:51.104  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 16:11:51.104  INFO 40648 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 201
2019-10-31 16:11:59.110  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.searche', args=[null, mvc, {}]}
2019-10-31 16:11:59.176  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Result : search
2019-10-31 16:11:59.176  INFO 40648 --- [http-nio-8080-exec-5] com.pan.aspect.LogAspect                 : Spend time: 66
2019-10-31 16:12:07.190  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.searche', args=[null, mvc, {}]}
2019-10-31 16:12:07.246  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : search
2019-10-31 16:12:07.246  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 56
2019-10-31 16:12:13.694  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.searche', args=[null, springmvc, {}]}
2019-10-31 16:12:13.818 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:12:13.819 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:12:13.820 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:12:13.822 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:12:13.823 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:12:13.824 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:12:13.826 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 16:12:13.826 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 16:12:13.827 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:12:13.828 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 16:12:13.829 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 16:12:13.831 DEBUG 40648 --- [http-nio-8080-exec-2] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 16:12:13.831  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : search
2019-10-31 16:12:13.831  INFO 40648 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 137
2019-10-31 18:27:56.746  INFO 2852 --- [restartedMain] com.pan.PanBlogApplication               : Starting PanBlogApplication on LAPTOP-9SU42IID with PID 2852 (E:\javaworkspace\pan-blog\target\classes started by pan tao in E:\javaworkspace\pan-blog)
2019-10-31 18:27:56.749 DEBUG 2852 --- [restartedMain] com.pan.PanBlogApplication               : Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2019-10-31 18:27:56.749  INFO 2852 --- [restartedMain] com.pan.PanBlogApplication               : The following profiles are active: dev
2019-10-31 18:27:56.821  INFO 2852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-10-31 18:27:56.821  INFO 2852 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-10-31 18:27:57.537  INFO 2852 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-10-31 18:27:57.586  INFO 2852 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 39ms. Found 0 repository interfaces.
2019-10-31 18:27:57.931  INFO 2852 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$deee7d69] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-10-31 18:27:58.389  INFO 2852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-10-31 18:27:58.486  INFO 2852 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-10-31 18:27:58.486  INFO 2852 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.24]
2019-10-31 18:27:58.596  INFO 2852 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-10-31 18:27:58.597  INFO 2852 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1776 ms
2019-10-31 18:27:58.750  INFO 2852 --- [restartedMain] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource
2019-10-31 18:27:58.999  INFO 2852 --- [restartedMain] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2019-10-31 18:28:00.256  INFO 2852 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-10-31 18:28:00.355  INFO 2852 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2019-10-31 18:28:01.050  INFO 2852 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-10-31 18:28:01.115  INFO 2852 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-10-31 18:28:01.118  INFO 2852 --- [restartedMain] com.pan.PanBlogApplication               : Started PanBlogApplication in 5.03 seconds (JVM running for 6.111)
2019-10-31 18:28:07.573  INFO 2852 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2019-10-31 18:28:07.573  INFO 2852 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-10-31 18:28:07.591  INFO 2852 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2019-10-31 18:28:07.629  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 18:28:07.828 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.852 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.875 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.883 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.883 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.885 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.887 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.887 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.888 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.890 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.891 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:07.892 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.894 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.894 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.896 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.898 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.898 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:07.899 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.901 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.901 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.902 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.903 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.904 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 18:28:07.906 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.908 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.908 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.909 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.911 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.911 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:07.912 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.914 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.915 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.916 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.917 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.918 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.919 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.921 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:07.921 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.922 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.924 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:07.925 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:07.925 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:07.961 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 18:28:07.961 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:07.962 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:07.965 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 18:28:07.965 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:07.968 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 18:28:07.974 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 18:28:07.974 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:07.975 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:07.977 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 18:28:07.977 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 18:28:07.980 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 18:28:07.988 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 18:28:07.988 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 18:28:07.989 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 18:28:07.990 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 18:28:07.990 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:07.991 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 18:28:07.993  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 18:28:07.993  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 366
2019-10-31 18:28:12.655  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[2, {}]}
2019-10-31 18:28:12.666 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:12.666 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:12.668 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:12.670 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:12.670 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 18:28:12.671 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:12.672 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 18:28:12.672 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:12.673 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:12.675 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 18:28:12.675 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:12.678 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 18:28:12.679 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 18:28:12.679 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:12.680 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:12.681 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 18:28:12.682 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 18:28:12.683 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 18:28:12.684 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 18:28:12.684 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 18:28:12.685 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 18:28:12.685 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 18:28:12.686 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:12.688 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 18:28:12.689  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 18:28:12.689  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 34
2019-10-31 18:28:14.279  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[1, {}]}
2019-10-31 18:28:14.286 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.286 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.287 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.289 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.290 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.291 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.293 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.293 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.294 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.296 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.296 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:14.297 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.299 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.299 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.301 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.303 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.304 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:14.305 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.308 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.308 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.309 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.312 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.312 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 18:28:14.313 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.316 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.316 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.317 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.319 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.319 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 18:28:14.320 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.329 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.329 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.330 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.331 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.332 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.332 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.334 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 18:28:14.334 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.335 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.337 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 18:28:14.337 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 18:28:14.338 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 18:28:14.340 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 18:28:14.341 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:14.341 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:14.342 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 18:28:14.343 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:14.344 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 18:28:14.345 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 18:28:14.345 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 18:28:14.345 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 18:28:14.346 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 18:28:14.346 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 18:28:14.348 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 18:28:14.349 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 18:28:14.349 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 18:28:14.350 DEBUG 2852 --- [http-nio-8080-exec-4] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 18:28:14.350 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 18:28:14.351 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 18:28:14.352 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 18:28:14.353  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 18:28:14.354  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 75
2019-10-31 18:28:15.549  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.about', args=[]}
2019-10-31 18:28:15.550  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : about
2019-10-31 18:28:15.550  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 1
2019-10-31 19:03:54.185  INFO 2852 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 19:03:54.201 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.201 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.205 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.207 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.207 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.208 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.210 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.210 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.211 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.212 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.213 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 19:03:54.214 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.215 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.216 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.217 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.218 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.219 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 19:03:54.220 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.224 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.224 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.225 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.226 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.226 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 19:03:54.227 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.229 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.229 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.230 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.232 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.232 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 19:03:54.233 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.234 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.234 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.235 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.237 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.237 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.238 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.240 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 19:03:54.240 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.241 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.242 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 19:03:54.243 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 19:03:54.243 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 19:03:54.244 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 19:03:54.245 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 19:03:54.246 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 19:03:54.246 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 19:03:54.247 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 19:03:54.248 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 19:03:54.249 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 19:03:54.249 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 19:03:54.252 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 19:03:54.253 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 19:03:54.253 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 19:03:54.254 DEBUG 2852 --- [http-nio-8080-exec-8] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 19:03:54.255 DEBUG 2852 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 19:03:54.255 DEBUG 2852 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 19:03:54.256 DEBUG 2852 --- [http-nio-8080-exec-8] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 19:03:54.256 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 19:03:54.256 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 19:03:54.257 DEBUG 2852 --- [http-nio-8080-exec-8] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 19:03:54.258  INFO 2852 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 19:03:54.258  INFO 2852 --- [http-nio-8080-exec-8] com.pan.aspect.LogAspect                 : Spend time: 73
2019-10-31 20:09:01.032  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.searche', args=[null, mvc, {}]}
2019-10-31 20:09:01.067  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : search
2019-10-31 20:09:01.067  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 35
2019-10-31 20:11:38.475  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/search', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.searche', args=[null, springmvc, {}]}
2019-10-31 20:11:38.509 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:11:38.510 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:11:38.511 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:11:38.512 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:11:38.513 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:11:38.514 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:11:38.516 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:11:38.516 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:11:38.517 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:11:38.519 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:11:38.519 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:11:38.520 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:11:38.521  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : search
2019-10-31 20:11:38.521  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 46
2019-10-31 20:19:21.226  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/22', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[22, {}]}
2019-10-31 20:19:21.234 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 20:19:21.234 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 22(Integer)
2019-10-31 20:19:21.238 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:19:21.278 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:19:21.279 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:19:21.279 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:19:21.281 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:19:21.282 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:19:21.283 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:19:21.285 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 20:19:21.285 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 9(Integer)
2019-10-31 20:19:21.286 DEBUG 2852 --- [http-nio-8080-exec-7] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 20:19:21.286  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 20:19:21.286  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 60
2019-10-31 20:27:50.181  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.index', args=[null, {}]}
2019-10-31 20:27:50.194 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.194 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.203 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.205 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.205 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.206 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.207 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.208 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.209 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.210 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.211 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:27:50.212 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.214 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.214 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.215 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.216 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.216 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:27:50.217 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.218 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.218 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.219 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.221 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.221 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 20:27:50.221 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.223 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.223 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.224 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.225 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.226 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:27:50.226 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.228 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.228 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.229 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.230 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.230 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.231 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.232 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:27:50.232 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.232 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.234 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:27:50.234 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:27:50.234 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:27:50.235 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM type 
2019-10-31 20:27:50.235 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 20:27:50.236 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 20:27:50.237 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==>  Preparing: select * from type Order By blogs Desc limit ?,? 
2019-10-31 20:27:50.237 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 20:27:50.238 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TypeMapper.selectTagByNumDesc  : <==      Total: 6
2019-10-31 20:27:50.238 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==>  Preparing: SELECT count(0) FROM tag 
2019-10-31 20:27:50.238 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : ==> Parameters: 
2019-10-31 20:27:50.239 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.T.selectTagByNumDesc_COUNT         : <==      Total: 1
2019-10-31 20:27:50.239 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==>  Preparing: select * from tag Order By blogs Desc limit ?,? 
2019-10-31 20:27:50.239 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 20:27:50.243 DEBUG 2852 --- [http-nio-8080-exec-1] c.pan.dao.TagMapper.selectTagByNumDesc   : <==      Total: 7
2019-10-31 20:27:50.243 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==>  Preparing: SELECT count(0) FROM blog WHERE recommend = 1 
2019-10-31 20:27:50.244 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : ==> Parameters: 
2019-10-31 20:27:50.245 DEBUG 2852 --- [http-nio-8080-exec-1] B.selectRecommendBlogsOrderByViews_COUNT : <==      Total: 1
2019-10-31 20:27:50.245 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==>  Preparing: select id,title from blog WHERE recommend = 1 Order By views Desc limit ?,? 
2019-10-31 20:27:50.245 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : ==> Parameters: 0(Integer), 6(Integer)
2019-10-31 20:27:50.246 DEBUG 2852 --- [http-nio-8080-exec-1] c.p.d.B.selectRecommendBlogsOrderByViews : <==      Total: 6
2019-10-31 20:27:50.247  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Result : index
2019-10-31 20:27:50.247  INFO 2852 --- [http-nio-8080-exec-1] com.pan.aspect.LogAspect                 : Spend time: 66
2019-10-31 20:27:59.075  INFO 2852 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.loginPage', args=[]}
2019-10-31 20:27:59.079  INFO 2852 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Result : admin/login
2019-10-31 20:27:59.079  INFO 2852 --- [http-nio-8080-exec-2] com.pan.aspect.LogAspect                 : Spend time: 4
2019-10-31 20:28:05.070  INFO 2852 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/login', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.UserController.userLogin', args=[pan, 123456, ModelAndView [view=[null]; model=null], org.apache.catalina.session.StandardSessionFacade@24145379]}
2019-10-31 20:28:05.082 DEBUG 2852 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user WHERE ( username = ? ) 
2019-10-31 20:28:05.082 DEBUG 2852 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : ==> Parameters: pan(String)
2019-10-31 20:28:05.083 DEBUG 2852 --- [http-nio-8080-exec-9] com.pan.dao.UserMapper.selectByExample   : <==      Total: 1
2019-10-31 20:28:05.085  INFO 2852 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Result : ModelAndView [view="redirect:/admin/index"; model=null]
2019-10-31 20:28:05.085  INFO 2852 --- [http-nio-8080-exec-9] com.pan.aspect.LogAspect                 : Spend time: 15
2019-10-31 20:28:05.102  INFO 2852 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/index;jsessionid=11B8791F3B6C9D2CC534C7D428143B84', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.AdminController.indexPage', args=[]}
2019-10-31 20:28:05.103  INFO 2852 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Result : admin/index
2019-10-31 20:28:05.103  INFO 2852 --- [http-nio-8080-exec-3] com.pan.aspect.LogAspect                 : Spend time: 2
2019-10-31 20:28:06.414  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/admin/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.BlogController.blogsPage', args=[Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, null, null, {blog=Blog{id=null, uid=null, typeid=null, tagids='null', title='null', description='null', firstPicture='null', views=null, appreciation=null, shareStatement=null, commentabled=null, published=null, flag='null', recommend=null, createTime=null, updateTime=null, content='null', type=null, tagIds='null'}, org.springframework.validation.BindingResult.blog=org.springframework.validation.BeanPropertyBindingResult: 0 errors}]}
2019-10-31 20:28:06.418 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==>  Preparing: SELECT count(0) FROM blog 
2019-10-31 20:28:06.418 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : ==> Parameters: 
2019-10-31 20:28:06.419 DEBUG 2852 --- [http-nio-8080-exec-4] c.p.d.B.selectByTitleLike_COUNT          : <==      Total: 1
2019-10-31 20:28:06.420 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==>  Preparing: select * from blog limit ?,? 
2019-10-31 20:28:06.421 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : ==> Parameters: 0(Integer), 10(Integer)
2019-10-31 20:28:06.425 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.BlogMapper.selectByTitleLike   : <==      Total: 10
2019-10-31 20:28:06.428 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.428 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:28:06.429 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.431 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.432 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:28:06.432 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.434 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.434 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 20:28:06.435 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.436 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.436 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:28:06.437 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.438 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.438 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:28:06.439 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.440 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.440 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:28:06.440 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.441 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.442 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:28:06.443 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.445 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.445 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 15(Integer)
2019-10-31 20:28:06.446 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.448 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.448 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:28:06.449 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.450 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:28:06.450 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 14(Integer)
2019-10-31 20:28:06.451 DEBUG 2852 --- [http-nio-8080-exec-4] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:28:06.456 DEBUG 2852 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==>  Preparing: select id, name, blogs from type 
2019-10-31 20:28:06.456 DEBUG 2852 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : ==> Parameters: 
2019-10-31 20:28:06.457 DEBUG 2852 --- [http-nio-8080-exec-4] com.pan.dao.TypeMapper.selectByExample   : <==      Total: 6
2019-10-31 20:28:06.458  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Result : admin/blogs
2019-10-31 20:28:06.458  INFO 2852 --- [http-nio-8080-exec-4] com.pan.aspect.LogAspect                 : Spend time: 44
2019-10-31 20:28:38.187  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.ArchivesController.archives', args=[{}]}
2019-10-31 20:28:38.190 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.selectAllYears    : ==>  Preparing: select DATE_FORMAT(update_time,'%Y') as year from blog Group by YEAR order by year desc; 
2019-10-31 20:28:38.190 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.selectAllYears    : ==> Parameters: 
2019-10-31 20:28:38.192 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.selectAllYears    : <==      Total: 1
2019-10-31 20:28:38.193 DEBUG 2852 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.selectBolyGroupByYear   : ==>  Preparing: SELECT * FROM blog WHERE DATE_FORMAT(update_time, '%Y') = ? ORDER BY update_time DESC; 
2019-10-31 20:28:38.193 DEBUG 2852 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.selectBolyGroupByYear   : ==> Parameters: 2019(String)
2019-10-31 20:28:38.199 DEBUG 2852 --- [http-nio-8080-exec-7] c.p.d.BlogMapper.selectBolyGroupByYear   : <==      Total: 14
2019-10-31 20:28:38.202 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.countByExample    : ==>  Preparing: select count(*) from blog 
2019-10-31 20:28:38.202 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.countByExample    : ==> Parameters: 
2019-10-31 20:28:38.204 DEBUG 2852 --- [http-nio-8080-exec-7] com.pan.dao.BlogMapper.countByExample    : <==      Total: 1
2019-10-31 20:28:38.204  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Result : archives
2019-10-31 20:28:38.205  INFO 2852 --- [http-nio-8080-exec-7] com.pan.aspect.LogAspect                 : Spend time: 18
2019-10-31 20:47:27.955  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Request : {url='http://localhost:8080/blog/37', ip='0:0:0:0:0:0:0:1', classMethod='com.pan.controller.IndexController.blog', args=[37, {}]}
2019-10-31 20:47:27.959 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==>  Preparing: select id, uid, typeid, tagids, title, description, first_picture, views, appreciation, share_statement, commentabled, published, flag, recommend, create_time, update_time , content from blog where id = ? 
2019-10-31 20:47:27.960 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : ==> Parameters: 37(Integer)
2019-10-31 20:47:27.961 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.BlogMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:47:27.975 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==>  Preparing: select id, name, blogs from type where id = ? 
2019-10-31 20:47:27.975 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:47:27.976 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TypeMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:47:27.977 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==>  Preparing: select id, nickname, username, password, email, avatar, type, createTime, updateTime from user where id = ? 
2019-10-31 20:47:27.978 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2019-10-31 20:47:27.978 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.UserMapper.selectByPrimaryKey  : <==      Total: 1
2019-10-31 20:47:27.979 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==>  Preparing: select id, name, blogs from tag where id = ? 
2019-10-31 20:47:27.980 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : ==> Parameters: 12(Integer)
2019-10-31 20:47:27.980 DEBUG 2852 --- [http-nio-8080-exec-10] c.pan.dao.TagMapper.selectByPrimaryKey   : <==      Total: 1
2019-10-31 20:47:27.981  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Result : blog
2019-10-31 20:47:27.981  INFO 2852 --- [http-nio-8080-exec-10] com.pan.aspect.LogAspect                 : Spend time: 26
